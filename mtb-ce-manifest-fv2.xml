<apps version="2.0">
  <app keywords="psoc6,starter,template,empty,blank,mtb-flow">
    <name>Empty PSoC6 App</name>
    <id>mtb-example-psoc6-empty-app</id>
    <category>Getting Started</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-empty-app</uri>
    <description><![CDATA[This empty application provides a template for creating applications using PSoC&#8482; 6 devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-empty-app/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,led,starter,hello world,mtb-flow">
    <name>Hello World</name>
    <id>mtb-example-psoc6-hello-world</id>
    <category>Getting Started</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-hello-world</uri>
    <description><![CDATA[This code example demonstrates simple UART communication by printing a "Hello World" message on a terminal and blinks an LED using a Timer resource using PSoC&#8482; 6 MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-hello-world/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.1 release</num>
        <commit>release-v2.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,led,lptimer,mtb-flow">
    <name>Low-Power Timer</name>
    <id>mtb-example-psoc6-lptimer</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-lptimer</uri>
    <description><![CDATA[This example explains how to set up a low-power timer using the LPTimer HAL resource to measure the timing between events in free-running mode on PSoC&#8482; 6 MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-lptimer/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led low_power</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,fault handling,mtb-flow">
    <name>Fault Handling</name>
    <id>mtb-example-psoc6-fault-handling</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-fault-handling</uri>
    <description><![CDATA[This example demonstrates the fault handling functionality of PSoC&#8482; 6 MCU using Peripheral Driver Library (PDL) System Library (SysLib).
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-fault-handling/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.1 release</num>
        <commit>release-v2.1.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,wdt,mtb-flow">
    <name>Watchdog Timer</name>
    <id>mtb-example-psoc6-wdt</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-wdt</uri>
    <description><![CDATA[This example explains how to set up a Watchdog Timer (WDT) using the WDT HAL resource. The WDT resets the device if it is not serviced or "kicked" within the configured timeout interval. This helps in recovering the program from an unintended lock up.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-wdt/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,mcwdt,mtb-flow">
    <name>Free-Running Multi-Counter Watchdog Timer</name>
    <id>mtb-example-psoc6-mcwdt</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-mcwdt</uri>
    <description><![CDATA[This example explains how to set up a Multi-Counter Watchdog Timer (MCWDT) using the MCWDT PDL resource to measure the timing between events in free-running mode on PSoC6 MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-mcwdt/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,mtb-flow,led,pwm,square wave,frequency,duty cycle,blinky,blinking">
    <name>PWM Square Wave</name>
    <id>mtb-example-psoc6-pwm-square-wave</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-pwm-square-wave</uri>
    <description><![CDATA[This code example generates a square wave using the PWM driver. An LED connected to the PWM output pin blinks at 2 Hz.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-pwm-square-wave/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,led,capsense,button,slider,i2c,tuner,mtb-flow">
    <name>CAPSENSE Buttons and Slider</name>
    <id>mtb-example-psoc6-capsense-buttons-slider</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-capsense-buttons-slider</uri>
    <description><![CDATA[This code example features a 5-segment CAPSENSE&#8482; slider and two CAPSENSE&#8482; buttons. Button 0 turns the LED on, Button 1 turns the LED off and the slider controls the brightness of the LED. The code example also demonstrates interfacing with Tuner GUI using I2C interface.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-capsense-buttons-slider/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led capsense_button capsense_linear_slider</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,led,capsense,button,slider,i2c,tuner,rtos,mtb-flow">
    <name>CAPSENSE Buttons and Slider FreeRTOS</name>
    <id>mtb-example-psoc6-capsense-buttons-slider-freertos</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-capsense-buttons-slider-freertos</uri>
    <description><![CDATA[This code example features a 5-segment CAPSENSE&#8482; slider and two CAPSENSE&#8482; buttons. Button 0 turns the LED on, Button 1 turns the LED off and the slider controls the brightness of the LED. The code example also demonstrates interfacing with Tuner GUI using I2C interface.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-capsense-buttons-slider-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led capsense_button capsense_linear_slider</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,uart,transmit,receive,mtb-flow">
    <name>UART Transmit and Receive</name>
    <id>mtb-example-psoc6-uart-transmit-receive</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-uart-transmit-receive</uri>
    <description><![CDATA[This example demonstrates the UART (HAL) transmit and receive operation in PSoC&#8482; 6 MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-uart-transmit-receive/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,uart,transmit,receive,dma,mtb-flow" req_capabilities_v2="[cy8ceval_062s2, cy8ceval_062_s2_lai_4373m2, cy8ckit_062_ble, cy8ckit_062_wifi_bt, cy8ckit_062s2_43012, cy8cproto_062_4343w, cy8cproto_062s3_4343w, cy8cproto_063_ble, cysbsyskit_01, cysbsyskit_dev_01, cy8ckit_062s4, cyw9p62s1_43012evb_01, cyw9p62s1_43438evb_01]">
    <name>SCB UART Transmit and Receive using DMA</name>
    <id>mtb-example-psoc6-uart-transmit-receive-dma</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-uart-transmit-receive-dma</uri>
    <description><![CDATA[This example demonstrates the UART transmit and receive operation using DMA in PSoC&#8482; 6 MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-uart-transmit-receive-dma/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.4.0 release</num>
        <commit>release-v2.4.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.3.0 release</num>
        <commit>release-v2.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,i2c,master,slave,mtb-flow">
    <name>I2C Master</name>
    <id>mtb-example-psoc6-i2c-master</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-i2c-master</uri>
    <description><![CDATA[This example demonstrates the use of I2C (HAL) resource for PSoC&#8482; 6 MCU in Master mode.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-i2c-master/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.3.0 release</num>
        <commit>release-v2.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,i2c,ezi2c,master,slave,mtb-flow">
    <name>I2C Master EzI2C Slave</name>
    <id>mtb-example-psoc6-i2c-master-ezi2c-slave</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-i2c-master-ezi2c-slave</uri>
    <description><![CDATA[This example demonstrates the use of I2C (HAL) resource for PSoC&#8482; 6 MCU in Master mode with an EzI2C slave.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-i2c-master-ezi2c-slave/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.3.0 release</num>
        <commit>release-v2.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,i2c,slave,mtb-flow">
    <name>I2C Slave Using Callbacks</name>
    <id>mtb-example-psoc6-i2c-slave-callback</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-i2c-slave-callback</uri>
    <description><![CDATA[This example demonstrates the operation of the I2C (HAL) resource for PSoC&#8482; 6 MCU in Slave mode using callbacks.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-i2c-slave-callback/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,spi,master,slave,mtb-flow">
    <name>SPI Master</name>
    <id>mtb-example-psoc6-spi-master</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-spi-master</uri>
    <description><![CDATA[This example demonstrates the use of SPI (HAL) resource for PSoC&#8482; 6 MCU in Master mode.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-spi-master/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.1 release</num>
        <commit>release-v2.1.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,spi,master,slave,dma,mtb-flow" req_capabilities_v2="[cy8ceval_062s2, cy8ceval_062_s2_lai_4373m2, cy8ckit_062_ble, cy8ckit_062_wifi_bt, cy8ckit_062s2_43012, cy8cproto_062_4343w, cy8cproto_062s3_4343w, cy8cproto_063_ble, cysbsyskit_01, cysbsyskit_dev_01, cy8ckit_062s4, cyw9p62s1_43012evb_01, cyw9p62s1_43438evb_01]">
    <name>SCB SPI Master DMA</name>
    <id>mtb-example-psoc6-spi-master-dma</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-spi-master-dma</uri>
    <description><![CDATA[This example demonstrates the use of PSoC&#8482; 6 MCU Serial Communication Block (SCB) resource in SPI Master mode using DMA.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-spi-master-dma/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,led,smartio,smart io,pwm,mtb-flow">
    <name>Ramping LED using Smart IO</name>
    <id>mtb-example-psoc6-smartio-ramping-led</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-smartio-ramping-led</uri>
    <description><![CDATA[This example uses a PWM resource and Smart I/O in PSoC&#8482; 6 MCU to implement a ramping LED, where an LED gradually cycles through increasing and decreasing brightness levels. There is no CPU usage except for the initialization of PWM and Smart I/O.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-smartio-ramping-led/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led smart_io</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.5.0 release</num>
        <commit>release-v2.5.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.4.0 release</num>
        <commit>release-v2.4.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.3.0 release</num>
        <commit>release-v2.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,eink,emwin,freertos,display,mtb-flow">
    <name>emWin E-Ink FreeRTOS</name>
    <id>mtb-example-psoc6-emwin-eink-freertos</id>
    <category>Graphics</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-emwin-eink-freertos</uri>
    <description><![CDATA[This code example demonstrates displaying 2D graphics on an E-Ink display using EmWin graphics library in FreeRTOS.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-emwin-eink-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led arduino switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,oled,emwin,freertos,display,mtb-flow">
    <name>emWin OLED FreeRTOS</name>
    <id>mtb-example-psoc6-emwin-oled-freertos</id>
    <category>Graphics</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-emwin-oled-freertos</uri>
    <description><![CDATA[This code example demonstrates displaying 2D graphics on an OLED display using EmWin graphics library in FreeRTOS.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-emwin-oled-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 arduino switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,pwm,tcpwm,asymmetric,mtb-flow">
    <name>Asymmetric PWM Generation</name>
    <id>mtb-example-psoc6-pwm-dual-compare-capture</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-pwm-dual-compare-capture</uri>
    <description><![CDATA[This code example demonstrates the generation of asymmetric PWM signals using two compare/capture registers available in the TCPWM block of the PSoC&#8482; 6 MCU devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-pwm-dual-compare-capture/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 cy8ckit_062s4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,cryptography,sha2,message digest,hash,mtb-flow">
    <name>Cryptography SHA Demonstration</name>
    <id>mtb-example-psoc6-crypto-sha</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-crypto-sha</uri>
    <description><![CDATA[This code example shows how to generate a 32-byte hash value or message digest for an arbitrary user input message with the SHA2 algorithm using the Cryptographic hardware block in PSoC&#8482; 6 MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-crypto-sha/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,csdadc,mtb-flow">
    <name>CSDADC</name>
    <id>mtb-example-psoc6-csdadc</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-csdadc</uri>
    <description><![CDATA[This example demonstrates the usage of CSD analog-to-digital converter (ADC) in PSoC&#8482; 6 MCU. CSDADC measures the external voltage and displays the conversion result the terminal application.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-csdadc/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 capsense</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,dual cpu,starter,template,empty,blank,mtb-flow">
    <name>Dual-CPU Empty PSoC6 App</name>
    <id>mtb-example-psoc6-dual-cpu-empty-app</id>
    <category>Getting Started</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-dual-cpu-empty-app</uri>
    <description><![CDATA[This empty application provides a template for creating dual-CPU applications using PSoC&#8482; 6 devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-dual-cpu-empty-app/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 multi_core</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,pdm,pcm,mtb-flow,audio,microphone">
    <name>PDM PCM Audio</name>
    <id>mtb-example-psoc6-pdm-pcm</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-pdm-pcm</uri>
    <description><![CDATA[This example demonstrates how to use the pulse-density modulation/pulse-code modulation (PDM/PCM) hardware block in PSoC&#8482; 6 MCU with a digital microphone.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-pdm-pcm/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 pdm</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,i2s,mtb-flow,audio,codec">
    <name>I2S Audio</name>
    <id>mtb-example-psoc6-i2s</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-i2s</uri>
    <description><![CDATA[This example demonstrates how to use the I2S hardware block in PSoC&#8482; 6 MCU to interface with an audio codec.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-i2s/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 i2s</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,ipc,mtb-flow,pipes">
    <name>Dual-CPU IPC Pipes</name>
    <id>mtb-example-psoc6-dual-cpu-ipc-pipes</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-dual-cpu-ipc-pipes</uri>
    <description><![CDATA[This example demonstrates how to use the inter-processor communication (IPC) driver to implement a message pipe in PSoC&#8482; 6 MCU. The pipe is used to send messages between CPUs.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-dual-cpu-ipc-pipes/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 multi_core switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.3.0 release</num>
        <commit>release-v2.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,ipc,mtb-flow,semaphore">
    <name>Dual-CPU IPC Semaphore</name>
    <id>mtb-example-psoc6-dual-cpu-ipc-sema</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-dual-cpu-ipc-sema</uri>
    <description><![CDATA[This example demonstrates how to use the inter-processor communication (IPC) driver to implement a semaphore in PSoC&#8482; 6 MCU. The semaphore is used as a lock to control access to a resource shared by the CPUs and synchronize the initialization instructions.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-dual-cpu-ipc-sema/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 multi_core led switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.3.0 release</num>
        <commit>release-v2.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,mtb-flow,ble,bluetooth,anycloud,ess,4343w,43012">
    <name>Bluetooth LE Environmental Sensing Service</name>
    <id>mtb-example-anycloud-ble-ess</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-ble-ess</uri>
    <description><![CDATA[This code example demonstrates the implementation of a simple Bluetooth&#174; Low Energy Environmental Sensing Profile. It shows how to send environmental parameters like temperature by sending simulated temperature values over the Bluetooth&#174; Low Energy connection using the AIROC&#8482; Wi-Fi & Bluetooth&#174; combos supported in AnyCloud-SDK.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-ble-ess/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 bt led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,mtb-flow,ble,bluetooth,anycloud,beacon,eddystone,multi-adv,4343w,43012">
    <name>Bluetooth LE Multi Beacon</name>
    <id>mtb-example-anycloud-ble-multi-beacon</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-ble-multi-beacon</uri>
    <description><![CDATA[This code example demonstrates the implementation of a beacon which advertises Eddystone and
iBeacon UUID data.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-ble-multi-beacon/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 bt</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.1.0 release</num>
        <commit>release-v3.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,mtb-flow,ble,bluetooth,anycloud,onboarding,4343w,43012">
    <name>Wi-Fi Onboarding Using Bluetooth LE</name>
    <id>mtb-example-anycloud-ble-wifi-onboarding</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-ble-wifi-onboarding</uri>
    <description><![CDATA[This code example demonstrates WiFi Onboarding using Bluetooth&#174; Low Energy.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-ble-wifi-onboarding/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 wifi bt low_power anycloud</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.1.0 release</num>
        <commit>release-v3.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,sar,adc,op amp,mtb-flow">
    <name>Low-Power Analog Front End using OpAmp and SAR ADC</name>
    <id>mtb-example-psoc6-low-power-analog-front-end</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-low-power-analog-front-end</uri>
    <description><![CDATA[This example demonstrates the low-power analog features of PSoC&#8482; 6 MCU using an OpAmp and SAR ADC. PDL is used for the application firmware. This example is supported only for the devices like CY8C62x4 which have an OpAmp and SAR ADC capable of operating in System Deep Sleep mode.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-low-power-analog-front-end/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 cy8ckit_062s4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,sar,analog,sensor,mtb-flow">
    <name>SAR ADC Low Power Sensing - Thermistor and ALS</name>
    <id>mtb-example-psoc6-low-power-sar-adc-thermistor-als</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-low-power-sar-adc-thermistor-als</uri>
    <description><![CDATA[This example demonstrates low-power sensing of a thermistor and ambient light sensor (ALS) using the SAR ADC of PSoC&#8482; 6 MCU. PDL is used for the application firmware. This example is supported only for the devices like CY8C62x4 which have a SAR ADC capable of operating in System Deep Sleep mode.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-low-power-sar-adc-thermistor-als/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 cy8ckit_062s4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,capsense,tuner,ble,server,tuning,mtb-flow">
    <name>CAPSENSE Tuning Over Bluetooth LE - Server</name>
    <id>mtb-example-psoc6-ble-capsense-tuner-server</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-ble-capsense-tuner-server</uri>
    <description><![CDATA[This code example demonstrates how to monitor the CAPSENSE&#8482; data and tune the CAPSENSE&#8482; sensors over Bluetooth&#174; Low Energy communication with CAPSENSE&#8482; Tuner GUI using PSoC&#8482; 6 Bluetooth&#174; Low Energy MCU. This is intended to be used with the CAPSENSE&#8482; Tuning Over Bluetooth&#174; LE - Client example.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-ble-capsense-tuner-server/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led ble capsense_button capsense_linear_slider</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,capsense,tuner,ble,client,tuning,ezi2c,mtb-flow">
    <name>CAPSENSE Tuning Over Bluetooth LE - Client</name>
    <id>mtb-example-psoc6-ble-capsense-tuner-client</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-ble-capsense-tuner-client</uri>
    <description><![CDATA[This code example demonstrates how to monitor the CAPSENSE&#8482; data and tune the CAPSENSE&#8482; sensors over Bluetooth&#174; Low Energy communication with CAPSENSE&#8482; Tuner GUI using PSoC&#8482; 6 Bluetooth&#174; Low Energy MCU. This is intended to be used with the CAPSENSE&#8482; Tuning Over Bluetooth&#174; LE - Server example.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-ble-capsense-tuner-client/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led ble</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,sar,adc,simultaneous sampling,mtb-flow">
    <name>SAR ADC Simultaneous Sampling</name>
    <id>mtb-example-psoc6-sar-adc-simultaneous-sampling</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-sar-adc-simultaneous-sampling</uri>
    <description><![CDATA[This code example demonstrates simultaneous sampling of two SAR ADCs. The simultaneouly sampled input voltages by SAR ADCs are displayed on UART. PDL is used for the application firmware. This example is supported only for the devices like CY8C62x4 which have two SAR ADCs.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-sar-adc-simultaneous-sampling/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 cy8ckit_062s4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.2.0 release</num>
        <commit>release-v1.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="btsdk,spi,cyw208xx,data-logger,mtb-flow">
    <name>CYW208xx Data logger</name>
    <id>mtb-example-btsdk-cyw208xx-data-logger</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-btsdk-cyw208xx-data-logger</uri>
    <description><![CDATA[This code example includes two applications that demonstrate the operation of multiple Serial Peripheral Interface (SPI) interfaces using the CYW208xx Bluetooth&#174; SoC.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-btsdk-cyw208xx-data-logger/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>CYW208XX ncu15wf104</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="btsdk,privacy,bonding,mtb-flow">
    <name>LE Peripheral Privacy</name>
    <id>mtb-example-btsdk-peripheral-privacy</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-btsdk-peripheral-privacy</uri>
    <description><![CDATA[This code example demonstrates the privacy features available to users in Bluetooth&#174; Low Energy 5.0 and above.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-btsdk-peripheral-privacy/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>button fw2 btsdk</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="btsdk,spi,cyw20719b2,mtb-flow">
    <name>CYW20719B2 SPI</name>
    <id>mtb-example-btsdk-cyw20719b2-spi</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-btsdk-cyw20719b2-spi</uri>
    <description><![CDATA[This code example demonstrates the SPI interface using CYW20719B2 boards.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-btsdk-cyw20719b2-spi/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>ncu15wf104 CYW920719B2Q40EVB_01 fw2 btsdk</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.1 release</num>
        <commit>release-v2.1.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="btsdk,sensors,sensor hub,motion,accelerometer,gyro,compass,temperature,thermistor,magnetic,3d magnetic,i2c,adc,mtb-flow">
    <name>LE SensorHub</name>
    <id>mtb-example-btsdk-sensorhub</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-btsdk-sensorhub</uri>
    <description><![CDATA[This code example demonstrates the interfacing of Multiple sensors, Motion, Temperature, and 3D magnetic sensor and sends the data over GATT custom service.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-btsdk-sensorhub/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>lsm9ds1 ncu15wf104 fw2 btsdk</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="GPIO,PWM,btsdk,mtb-flow">
    <name>PWM GPIO</name>
    <id>mtb-example-btsdk-pwm-gpio</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-btsdk-pwm-gpio</uri>
    <description><![CDATA[This example demonstrates the configuration of PWM (pulse width modulation) to control the brightness of an LED, and configuration of GPIO to toggle an LED ON and OFF.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-btsdk-pwm-gpio/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>fw2 btsdk led2x</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.1 release</num>
        <commit>release-v2.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,starter,template,empty,blank,mtb-flow">
    <name>Empty PSoC4 App</name>
    <id>mtb-example-psoc4-empty-app</id>
    <category>Getting Started</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-empty-app</uri>
    <description><![CDATA[This empty application provides a template for creating applications using PSoC&#8482; 4 devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-empty-app/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,led,capsense,custom scan,mtb-flow">
    <name>CAPSENSE Custom Scan</name>
    <id>mtb-example-psoc6-capsense-custom-scan</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-capsense-custom-scan</uri>
    <description><![CDATA[This code example demonstrates CAPSENSE&#8482; custom scanning through CAPSENSE&#8482; Middleware's callback functions that allow altering the sensor parameters during runtime or synchronizing the CAPSENSE&#8482; scan with non-CapSense operations. In this code example, the callback function is used to change the inactive sensor state to either shield or ground depending on the sensor being scanned.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-capsense-custom-scan/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led capsense_linear_slider</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.1 release</num>
        <commit>release-v2.1.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,msc,usb,file system,mass storage,sd,mtb-flow">
    <name>USB Mass Storage File System</name>
    <id>mtb-example-psoc6-usb-msc-filesystem-freertos</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-usb-msc-filesystem-freertos</uri>
    <description><![CDATA[This example demonstrates how to configure the USB block in a PSoC&#8482; 6 MCU device as a Mass Storage (MSC) device and run a file system (FatFs) through an external memory (microSD). This example uses FreeRTOS.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-usb-msc-filesystem-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led usb_device pdm switch sdhc</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,anycloud,wifi,mtb-flow,wifi-scan,wcm,scan filters" req_capabilities_v2="[flash_2048k, flash_1024k, flash_512k, cy8ckit_064b0s2_4343w]">
    <name>Wi-Fi Scan</name>
    <id>mtb-example-anycloud-wifi-scan</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-wifi-scan</uri>
    <description><![CDATA[This code example demonstrates how to configure different scan filters provided in the Wi-Fi Connection Manager (WCM) middleware and scan for the available Wi-Fi networks.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-wifi-scan/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack and the Mbed TLS open-source TLS/SSL library which has cryptographic capabilities. Creating a project from this template will cause lwIP and Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the lwIP &amp; Mbed TLS licenses and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx led switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.3.0 release</num>
        <commit>release-v2.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,anycloud,wifi,mtb-flow,wcm,wps,enrollee,wps-pbc,wps-sta-pin" req_capabilities_v2="[flash_2048k, flash_1024k]">
    <name>WPS Enrollee</name>
    <id>mtb-example-anycloud-wps-enrollee</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-wps-enrollee</uri>
    <description><![CDATA[This code example demonstrates how to use the connection management and WPS Enrollee feature provided in the Wi-Fi Connection Manager (WCM) middleware.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-wps-enrollee/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack and the Mbed TLS open-source TLS/SSL library which has cryptographic capabilities. Creating a project from this template will cause lwIP and Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the lwIP &amp; Mbed TLS licenses and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx led switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,sgpio,target,mtb-flow,smartio,spi" req_capabilities_v2="[cy8ckit_062_ble, cy8ckit_062_wifi_bt, cy8ckit_062s2_43012, cy8ckit_064b0s2_4343w, cy8cproto_062_4343w, cy8cproto_063_ble, cysbsyskit_01, cysbsyskit_dev_01]">
    <name>SGPIO Target Interface</name>
    <id>mtb-example-psoc6-smartio-sgpio-target</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-smartio-sgpio-target</uri>
    <description><![CDATA[This example uses a SPI resource and Smart I/O in PSoC&#8482; 6 MCU to implement the SGPIO Target interface.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-smartio-sgpio-target/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 smart_io</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.4.0 release</num>
        <commit>release-v1.4.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.3.0 release</num>
        <commit>release-v1.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.2.0 release</num>
        <commit>release-v1.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,capsense,slider,linear slider,csd,tuning,i2c,tuner">
    <name>CAPSENSE CSD Slider Tuning</name>
    <id>mtb-example-psoc4-capsense-csd-slider-tuning</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-capsense-csd-slider-tuning</uri>
    <description><![CDATA[This code example demonstrates how to manually tune Self Capacitance (CSD) based slider widget in PSoC&#8482; 4 devices using CAPSENSE&#8482; Tuner GUI.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-capsense-csd-slider-tuning/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 capsense_linear_slider</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,mtb-flow,ble,bluetooth,anycloud,battery,4343w,43012" req_capabilities_v2="[cy8ceval_062_s2_lai_4373m2, cy8ckit_062s2_43012, cy8cproto_062_4343w]">
    <name>Bluetooth LE Battery Server</name>
    <id>mtb-example-anycloud-ble-battery-server</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-ble-battery-server</uri>
    <description><![CDATA[This code example demonstrates the implementation of a simple Bluetooth&#174; LE Battery Service. The Battery Service exposes the Battery Level of the device and comes with support for OTA update over Bluetooth&#174; LE.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-ble-battery-server/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 bt led multi_core</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>3.1.0 release</num>
        <commit>release-v3.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,mtb-flow,ble,bluetooth,anycloud,findme,4343w,43012">
    <name>Bluetooth LE Findme</name>
    <id>mtb-example-anycloud-ble-findme</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-ble-findme</uri>
    <description><![CDATA[This design implements a Bluetooth&#174; Low Energy FMP(Find Me Profile) that consists of an IAS(Immediate Alert Service). FMP and IAS are Bluetooth&#174; Low Energy standard Profile and Service respectively, as defined by the Bluetooth&#174; SIG.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-ble-findme/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 bt led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,led,capsense,button,slider,i2c,tuner,ble,bluetooth,anycloud,4343w,43012,43438,mtb-flow">
    <name>Bluetooth LE CAPSENSE Buttons and Slider</name>
    <id>mtb-example-anycloud-ble-capsense-buttons-slider</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-ble-capsense-buttons-slider</uri>
    <description><![CDATA[This code example features a 5-segment CAPSENSE&#8482; slider and two CAPSENSE&#8482; buttons with Bluetooth&#174; Low Energy custom service. Button 0 turns the LED on, Button 1 turns the LED off and the slider controls the brightness of the LED. The LED status is notified to the client via Bluetooth&#174; Low Energy GATT profile.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-ble-capsense-buttons-slider/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led bt capsense_button capsense_linear_slider</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,lpa,anycloud,wifi,wlan,lowpower" req_capabilities_v2="[flash_2048k, flash_1024k, flash_512k, cy8ckit_064b0s2_4343w]">
    <name>WLAN Low Power</name>
    <id>mtb-example-anycloud-wlan-lowpower</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-wlan-lowpower</uri>
    <description><![CDATA[This code example demonstrates the low-power operation of a host MCU and a WLAN device using the network activity handlers provided by the Low Power Assistant middleware for AIROC&#8482; Wi-Fi & Bluetooth&#174; combos.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-wlan-lowpower/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license. <br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx led low_power</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.3.0 release</num>
        <commit>release-v2.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,tester,anycloud,ble,tool,manufacturing">
    <name>Tester - Bluetooth MFG Tool</name>
    <id>mtb-anycloud-bluetooth-mfg-tester</id>
    <category>Manufacturing</category>
    <uri>https://github.com/Infineon/mtb-anycloud-bluetooth-mfg-tester</uri>
    <description><![CDATA[This application is used to validate the Bluetooth&#174; Firmware and RF performance for PSoC&#8482; 6 MCU with Bluetooth&#174; BR/EDR/LE devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-anycloud-bluetooth-mfg-tester/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 bt cyw43xxx anycloud</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.3.0 release</num>
        <commit>release-v1.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.2.0 release</num>
        <commit>release-v1.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,tester,anycloud,wifi,wlan,certification,cert,tool">
    <name>Tester - Wi-Fi Cert Tool</name>
    <id>mtb-anycloud-wifi-cert-tester</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-anycloud-wifi-cert-tester</uri>
    <description><![CDATA[This Tester is a Wi-Fi Cert tool used for Wi-Fi 11n PSK/Enterprise Security certification for PSoC&#8482; 6 MCU with 2 MB flash and CYW43xxx connectivity devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-anycloud-wifi-cert-tester/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This tester application makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license. <br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx low_power anycloud</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>3.2.0 release</num>
        <commit>release-v3.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>3.1.0 release</num>
        <commit>release-v3.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,tester,anycloud,wifi,wlan,tool,manufacturing">
    <name>Tester - Wi-Fi Bluetooth Console</name>
    <id>mtb-anycloud-wifi-bluetooth-tester</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-anycloud-wifi-bluetooth-tester</uri>
    <description><![CDATA[This application integrates command console library including Wi-Fi iPerf and Bluetooth&#174; Low Energy functionality. Using this application, the user can characterize the Wi-Fi/Bluetooth&#174; Low Energy functionality and performance.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-anycloud-wifi-bluetooth-tester/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This tester application makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license. <br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx low_power anycloud flash_2048k</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.3.0 release</num>
        <commit>release-v1.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.2.1 release</num>
        <commit>release-v1.2.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.2.0 release</num>
        <commit>release-v1.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="1.0" req_capabilities_per_version="bsp_gen1">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,tester,anycloud,wifi,wlan,tool,manufacturing">
    <name>Tester - Wi-Fi MFG Tool</name>
    <id>mtb-anycloud-wifi-mfg-tester</id>
    <category>Manufacturing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-anycloud-wifi-mfg-tester</uri>
    <description><![CDATA[This tester is a tool used for Wi-Fi manufacturing tests with PSoC&#8482; 6 MCU and CYW43xxx connectivity devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-anycloud-wifi-mfg-tester/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This tester application makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license. <br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx low_power anycloud</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>3.1.0 release</num>
        <commit>release-v3.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>3.0.1 release</num>
        <commit>release-v3.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
    </versions>
  </app>
    <app keywords="mtb-flow,psoc6,lpa,anycloud,wifi,wlan,offload,tcp-keepalive" req_capabilities_v2="[flash_2048k, flash_1024k, flash_512k]">
    <name>TCP Keepalive Offload</name>
    <id>mtb-example-anycloud-offload-tcp-keepalive</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-offload-tcp-keepalive</uri>
    <description><![CDATA[This code example demonstrates the TCP Keepalive Offload functionality offered by AIROC&#8482; Wi-Fi & Bluetooth&#174; combos using PSoC&#8482; 6 MCU. It employs Low Power Assistant (LPA) middleware library which helps in developing low power applications for the Infineon devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-offload-tcp-keepalive/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license. <br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx low_power</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.3.0 release</num>
        <commit>release-v2.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,qspi,fram,led">
    <name>QSPI F-RAM Access</name>
    <id>mtb-example-psoc6-qspi-fram-access</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-qspi-fram-access</uri>
    <description><![CDATA[This code example demonstrates interfacing PSoC&#8482; 6 MCU with an external QSPI F-RAM memory and access it in Single, Dual, or Quad SPI mode using the Serial Memory Interface (SMIF) block. This example uses the PSoC&#8482; 6 MCU standard QSPI HAL driver library to build the QSPI F-RAM access API.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-qspi-fram-access/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led qspi fram</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,i2c,i2c-slave,callback,pwm,mtb-flow">
    <name>I2C Slave Using Callbacks</name>
    <id>mtb-example-psoc4-i2c-slave-callback</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-i2c-slave-callback</uri>
    <description><![CDATA[This example demonstrates the operation of the I2C block for PSoC&#8482; 4 in Slave mode using callbacks.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-i2c-slave-callback/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,tcpwm,interrupt">
    <name>Periodic Interrupt Using TCPWM</name>
    <id>mtb-example-psoc4-tcpwm-interrupt</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-tcpwm-interrupt</uri>
    <description><![CDATA[This example uses the TCPWM Component in the Timer/Counter mode to generate a periodic interrupt. An LED toggles whenever the interrupt occurs.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-tcpwm-interrupt/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,uart,led,mtb-flow">
    <name>Hello World</name>
    <id>mtb-example-psoc4-hello-world</id>
    <category>Getting Started</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-hello-world</uri>
    <description><![CDATA[This code example demonstrates simple UART communication by printing a "Hello world" message on a terminal and blinks an LED using PSoC&#8482; 4 devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-hello-world/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,mtb-flow,gpio,interrupt,isr,led,deep sleep">
    <name>GPIO Interrupt</name>
    <id>mtb-example-psoc4-gpio-interrupt</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-gpio-interrupt</uri>
    <description><![CDATA[This code example demonstrates the use of a GPIO configured as an input pin to generate interrupts on PSoC&#8482; 4. The GPIO signal interrupts the CPU and executes a user-defined Interrupt Service Routine (ISR). The GPIO interrupt acts as a wakeup source to wake the CPU from Deep Sleep.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-gpio-interrupt/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,capsense,csx,button,tuning,ezi2c,mtb-flow">
    <name>CAPSENSE CSX Button Tuning</name>
    <id>mtb-example-psoc4-capsense-csx-button-tuning</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-capsense-csx-button-tuning</uri>
    <description><![CDATA[This code example demonstrates how to manually tune a mutual capacitance (CSX)-based button widget in PSoC&#8482; 4 devices using CAPSENSE&#8482; Tuner GUI.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-capsense-csx-button-tuning/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 capsense_button</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,i2c,i2c-master,ezi2c-slave,mtb-flow">
    <name>I2C Master EzI2C Slave</name>
    <id>mtb-example-psoc4-i2c-master-slave</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-i2c-master-slave</uri>
    <description><![CDATA[This example demonstrates the operation of I2C resource for PSoC&#8482; 4 in Master mode with an EzI2C slave.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-i2c-master-slave/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,spi,master">
    <name>SPI Master</name>
    <id>mtb-example-psoc4-spi-master</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-spi-master</uri>
    <description><![CDATA[This example demonstrates the use of a SPI resource for PSoC&#8482; 4 in master mode using high level APIs. The SPI master is configured to send command packets to control a user LED on the slave.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-spi-master/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,spi,slave">
    <name>SPI Slave</name>
    <id>mtb-example-psoc4-spi-slave</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-spi-slave</uri>
    <description><![CDATA[This example demonstrates the use of a SPI Serial Communication Block (SCB) resource for PSoC&#8482; 4 in slave mode using high-level API. This example is intended to be used with PSoC&#8482; 4 SPI Master project
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-spi-slave/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,uart,dma">
    <name>SCB UART Transmit and Receive with DMA</name>
    <id>mtb-example-psoc4-uart-transmit-receive-dma</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-uart-transmit-receive-dma</uri>
    <description><![CDATA[This code example demonstrates the UART transmit and receive operation in PSoC&#8482; 4 using DMA. The application uses a serial terminal to read data and echoes what is received.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-uart-transmit-receive-dma/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 dma</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,led,pwm,tcpwm,dma,breathing">
    <name>PWM Triggering a DMA Channel</name>
    <id>mtb-example-psoc4-pwm-trigger-dma</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-pwm-trigger-dma</uri>
    <description><![CDATA[This example demonstrates how to route trigger signals on a PSoC&#8482; 4 device.The trigger signal, in this code example, is routed from the PWM to the DMA, using Device Configurator.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-pwm-trigger-dma/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led dma</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,uart,transmit,receive">
    <name>UART Transmit and Receive</name>
    <id>mtb-example-psoc4-uart-trasmit-receive</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-uart-transmit-receive</uri>
    <description><![CDATA[This example demonstrates the UART transmit and receive operation in PSoC&#8482; 4 device. The application uses a serial terminal to read data and to echo back the received data.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-uart-trasmit-receive/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,i2s,audio,mtb-flow,smartio,spi" req_capabilities_v2="[cy8ckit_062_ble, cy8ckit_062_wifi_bt, cy8ckit_062s2_43012, cy8ckit_064b0s2_4343w, cy8cproto_062_4343w, cy8cproto_063_ble, cy8ckit_062s4]">
    <name>I2S Master using Smart IO and SPI</name>
    <id>mtb-example-psoc6-smartio-i2s</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-smartio-i2s</uri>
    <description><![CDATA[This example uses a SPI resource and Smart I/O in PSoC&#8482; 6 MCU to implement the I2S Master interface (TX only).
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-smartio-i2s/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 smart_io</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.2.0 release</num>
        <commit>release-v1.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,pdm,pcm,i2s,mtb-flow,audio,microphone,codec">
    <name>PDM to I2S Audio</name>
    <id>mtb-example-psoc6-pdm-to-i2s</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-pdm-to-i2s</uri>
    <description><![CDATA[This example demonstrates how to route Pulse-Density Modulation (PDM) audio data to the Inter-IC Sound (I2S) Interface in PSoC&#8482; 6 MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-pdm-to-i2s/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 pdm i2s</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,usb,mtb-flow,audio,microphone,recorder">
    <name>USB Audio Recorder</name>
    <id>mtb-example-psoc6-usb-audio-recorder</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-usb-audio-recorder</uri>
    <description><![CDATA[This example demonstrates the use of PSoC&#8482; 6 MCU to implement an audio recorder using the USB Audio Device Class.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-usb-audio-recorder/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 usb_device pdm</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,usb,mtb-flow,hid,mouse">
    <name>USB HID Mouse</name>
    <id>mtb-example-psoc6-usb-hid-mouse</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-usb-hid-mouse</uri>
    <description><![CDATA[This example demonstrates how to configure the USB block in a PSoC&#8482; 6 MCU as a HID. The device enumerates as a 3-button mouse.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-usb-hid-mouse/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 usb_device pdm</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,usb,mtb-flow,hid,generic">
    <name>USB HID Generic</name>
    <id>mtb-example-psoc6-usb-hid-generic</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-usb-hid-generic</uri>
    <description><![CDATA[This example demonstrates how to configure the USB block in a PSoC&#8482; 6 MCU as a Human Interface Device (HID). The device enumerates as a Generic HID device.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-usb-hid-generic/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 usb_device pdm</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,wdt,interrupt,reset,deepsleep,mtb-flow">
    <name>Watchdog timer interrupt and reset</name>
    <id>mtb-example-psoc4-wdt</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-wdt</uri>
    <description><![CDATA[This code example features the watchdog timer and its usage in interrupt mode, reset mode and how to wake up the device from deepsleep using watchdog interrupt.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-wdt/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,wdc,interrupt">
    <name>Watchdog Counter Interrupts</name>
    <id>mtb-example-psoc4-wdc</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-wdc</uri>
    <description><![CDATA[This example demonstrates the use of PSoC&#8482; 4 Watchdog Counters in cascaded mode. The user LED is toggled every time the Counter2 interrupt occurs. The match values of all the counters are set to toggle the LED every 1 second.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-wdc/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 lptimer led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,gpio,pins">
    <name>GPIO Pins</name>
    <id>mtb-example-psoc4-gpio</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-psoc4-gpio</uri>
    <description><![CDATA[This example demonstrates multiple methods of configuring, reading, writing, and generating interrupts with PSoC&#8482; 4 General Purpose Input/Output (GPIO) pins.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-gpio/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,gpio,interrupt,switch">
    <name>GPIO Interrupt</name>
    <id>mtb-example-psoc6-gpio-interrupt</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-gpio-interrupt</uri>
    <description><![CDATA[This example demonstrates how to configure a GPIO to generate an interrupt in PSoC&#8482; 6 MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-gpio-interrupt/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led switch low_power</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,rtc">
    <name>RTC Basics</name>
    <id>mtb-example-psoc6-rtc-basics</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-rtc-basics</uri>
    <description><![CDATA[This example demonstrates the usage of the real-time clock (RTC) in PSoC&#8482; 6 MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-rtc-basics/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 rtc</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.1 release</num>
        <commit>release-v2.1.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,adc,hal">
    <name>ADC basic</name>
    <id>mtb-example-psoc6-adc-basic</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-adc-basic</uri>
    <description><![CDATA[This example demonstrates use of the ADC (Analog to Digital Converter) HAL driver to perform voltage measurements.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-adc-basic/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,led,power,sleep,mtb-flow">
    <name>Switching Power Modes</name>
    <id>mtb-example-psoc6-switching-power-modes</id>
    <category>Getting Started</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-switching-power-modes</uri>
    <description><![CDATA[This example demonstrates how to transition PSoC&#8482; 6 between the following power modes - Active, Sleep, Low Power Active, Low Power Sleep, and Deep Sleep.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-switching-power-modes/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led low_power</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow, psoc4, low power, uart, led">
    <name>Power Modes</name>
    <id>mtb-example-psoc4-power-modes</id>
    <category>Getting Started</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-power-modes</uri>
    <description><![CDATA[This code example shows how to enter system Sleep and Deep Sleep modes. After entering Deep Sleep or Sleep mode, the example also shows how to wake up from these low-power modes and return to normal Active mode.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-power-modes/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,capsense,csd,button,tuning,ezi2c,mtb-flow">
    <name>CAPSENSE CSD Button Tuning</name>
    <id>mtb-example-psoc4-capsense-csd-button-tuning</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-capsense-csd-button-tuning</uri>
    <description><![CDATA[This code example demonstrates how to manually tune a self-capacitance (CSD) based button widget in PSoC&#8482; 4 devices using CAPSENSE&#8482; Tuner GUI.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-capsense-csd-button-tuning/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led capsense_button</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,msc,capsense,csd,button,tuning,mtb-flow">
    <name>MSC CAPSENSE CSD Button Tuning</name>
    <id>mtb-example-psoc4-msc-capsense-csd-button-tuning</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-msc-capsense-csd-button-tuning</uri>
    <description><![CDATA[This code example demonstrates how to manually tune a self capacitance-based button widget in PSoC&#8482; 4 devices using the Multi Sense Converter (MSC) CSD-RM sensing technique and CAPSENSE&#8482; Tuner GUI.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-msc-capsense-csd-button-tuning/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led msc_button</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,msc,capsense,csx,button,tuning,mtb-flow">
    <name>MSC CAPSENSE CSX Button Tuning</name>
    <id>mtb-example-psoc4-msc-capsense-csx-button-tuning</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-msc-capsense-csx-button-tuning</uri>
    <description><![CDATA[This code example demonstrates how to manually tune a mutual capacitance-based button widget in PSoC&#8482; 4 devices using the Multi Sense Converter (MSC) CSX-RM sensing technique and CAPSENSE&#8482; Tuner GUI.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-msc-capsense-csx-button-tuning/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led msc_button</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,starter,template,empty,blank,mtb-flow">
    <name>Empty XMC App</name>
    <id>mtb-example-xmc-empty-app</id>
    <category>Getting Started</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-empty-app</uri>
    <description><![CDATA[This empty application provides a template for creating applications using XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-empty-app/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 0.X release</num>
        <commit>latest-v0.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>0.5.0 release</num>
        <commit>release-v0.5.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,gpio,led,isr,toggle,systick,mtb-flow">
    <name>GPIO Toggle</name>
    <id>mtb-example-xmc-gpio-toggle</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-gpio-toggle</uri>
    <description><![CDATA[This code example demonstrates GPIO toggling by periodically blinking an LED using SysTick available in XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-gpio-toggle/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 0.X release</num>
        <commit>latest-v0.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>0.5.0 release</num>
        <commit>release-v0.5.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,gpio,led,freertos,mtb-flow">
    <name>FreeRTOS Blinky</name>
    <id>mtb-example-xmc-blinky-freertos</id>
    <category>Getting Started</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-blinky-freertos</uri>
    <description><![CDATA[This code example demonstrates blinking LED functionality implemented by FreeRTOS tasks running on the XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-blinky-freertos/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 0.X release</num>
        <commit>latest-v0.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>0.5.0 release</num>
        <commit>release-v0.5.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,ccu,ccu4,pwm,led,mtb-flow">
    <name>CCU4 PWM</name>
    <id>mtb-example-xmc-ccu4-pwm</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-ccu4-pwm</uri>
    <description><![CDATA[This code example demonstrates the use of CCU4 module in XMC MCU to create a PWM signal. The CCU4 slice is configured in monoshot mode and is restarted on an external start event.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-ccu4-pwm/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 0.X release</num>
        <commit>latest-v0.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>0.5.0 release</num>
        <commit>release-v0.5.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,ccu,ccu4,capture,mtb-flow">
    <name>CCU4 Capture</name>
    <id>mtb-example-xmc-ccu4-capture</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-ccu4-capture</uri>
    <description><![CDATA[This code example demonstrates the capture features of the Capture and Compare Unit 4 (CCU4) slices available in XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-ccu4-capture/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 0.X release</num>
        <commit>latest-v0.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>0.5.0 release</num>
        <commit>release-v0.5.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,ccu,ccu4,timer,concatenation,led,mtb-flow">
    <name>CCU4 Timer Concatenation</name>
    <id>mtb-example-xmc-ccu4-timer-concatenation</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-ccu4-timer-concatenation</uri>
    <description><![CDATA[This code example demonstrates the concatenation or linking feature of the Capture and Compare Unit 4 (CCU4) slices available in XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-ccu4-timer-concatenation/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 0.X release</num>
        <commit>latest-v0.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>0.5.0 release</num>
        <commit>release-v0.5.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,ccu,ccu4,timer,led,mtb-flow">
    <name>CCU4 Timer</name>
    <id>mtb-example-xmc-ccu4-timer</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-ccu4-timer</uri>
    <description><![CDATA[This code example demonstrates the usage of the Capture and Compare Unit 4 (CCU4) timer by blinking an LED using CCU4 timer period match interrupt available in XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-ccu4-timer/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 0.X release</num>
        <commit>latest-v0.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>0.5.0 release</num>
        <commit>release-v0.5.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,uart,printf,hello world,usic,mtb-flow">
    <name>UART Printf</name>
    <id>mtb-example-xmc-uart-printf</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-uart-printf</uri>
    <description><![CDATA[This example demonstrates how to use the printf function with a Universal Serial Interface Channel (USIC) based UART in XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-uart-printf/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 0.X release</num>
        <commit>latest-v0.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>0.5.0 release</num>
        <commit>release-v0.5.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,uart,printf,shell,console,usic,led,mtb-flow">
    <name>UART Shell</name>
    <id>mtb-example-xmc-uart-shell</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-uart-shell</uri>
    <description><![CDATA[This code example demonstrates implementation of a shell on the UART communication interface including commands to toggle a LED using XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-uart-shell/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 0.X release</num>
        <commit>latest-v0.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>0.5.0 release</num>
        <commit>release-v0.5.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,uart,dma,usic,mtb-flow">
    <name>UART DMA</name>
    <id>mtb-example-xmc-uart-dma</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-uart-dma</uri>
    <description><![CDATA[This example demonstrates how to stream data using DMA via UART based on Universal Serial Interface Channel (USIC) to an external terminal.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-uart-dma/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc dma</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 0.X release</num>
        <commit>latest-v0.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>0.5.0 release</num>
        <commit>release-v0.5.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,uart,dma,usic,mtb-flow">
    <name>DMA Ring Buffer</name>
    <id>mtb-example-xmc-dma-ring-buffer</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-dma-ring-buffer</uri>
    <description><![CDATA[This code example demonstrates how to receive data using DMA via a Universal Serial Interface Channel (USIC) and synchronize the processing with an OS task through a ring buffer. For simplicity, the OS task is emulated inside this example with a SysTick Timer interrupt.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-dma-ring-buffer/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc dma</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,i2c,master,slave,transmit,receive,usic,led,mtb-flow">
    <name>I2C Master and Slave</name>
    <id>mtb-example-xmc-i2c-master-slave</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-i2c-master-slave</uri>
    <description><![CDATA[This code example demonstrates the implementation of an I2C master and an I2C slave on the same device based on the Universal Serial Interface Channel (USIC). The I2C master sends commands to the I2C slave to toggle the LEDs present on the XMC development kit.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-i2c-master-slave/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc i2c led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,flash,program,sector,erase,led,mtb-flow">
    <name>Flash Program</name>
    <id>mtb-example-xmc-flash-program</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-flash-program</uri>
    <description><![CDATA[This code example demonstrates how to erase a sector of the flash, write data to the sector and check the data for correctness on the XMC MCU device.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-flash-program/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,ccu,ccu8,timer,led,mtb-flow">
    <name>CCU8 Timer</name>
    <id>mtb-example-xmc-ccu8-timer</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-ccu8-timer</uri>
    <description><![CDATA[This code example demonstrates the usage of Capture-Compare Unit 8 (CCU8) in the XMC MCU in timer mode. The CCU8 timer slice program blinks an LED when a timer period match interrupt occurs.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-ccu8-timer/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,adc,vadc,scan,continuous scan,led,mtb-flow">
    <name>VADC Scan</name>
    <id>mtb-example-xmc-vadc-scan</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-vadc-scan</uri>
    <description><![CDATA[This code example demonstrates working of the Versatile Analog to Digital Converter (VADC) in the XMC MCU in continuous scan mode for one channel.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-vadc-scan/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led adc</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,rtc,alarm,led,mtb-flow">
    <name>RTC Alarm</name>
    <id>mtb-example-xmc-rtc-alarm</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-rtc-alarm</uri>
    <description><![CDATA[This code example demonstrates an RTC alarm interrupt of 1 minute to set a periodically blinking LED on the XMC MCU Evaluation kits.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-rtc-alarm/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc rtc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,ccu,ccu8,pwm,led,mtb-flow">
    <name>CCU8 PWM</name>
    <id>mtb-example-xmc-ccu8-pwm</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-ccu8-pwm</uri>
    <description><![CDATA[This code example demonstrates how to generate PWM signals using Capture and Compare unit (CCU8) slices available in XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-ccu8-pwm/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,ccu,ccu8,capture,led,mtb-flow">
    <name>CCU8 Capture</name>
    <id>mtb-example-xmc-ccu8-capture</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-ccu8-capture</uri>
    <description><![CDATA[This code example demonstrates the capture feature of Capture and Compare unit (CCU8) slices available in XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-ccu8-capture/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,ccu,ccu8,pwm,mtb-flow">
    <name>CCU8 PWM Complementary</name>
    <id>mtb-example-xmc-ccu8-pwm-complementary</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-ccu8-pwm-complementary</uri>
    <description><![CDATA[This code example demonstrates generating two complementary pulse width modulated (PWM) waves using the Capture and Compare Unit(CCU8 module) available in XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-ccu8-pwm-complementary/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,dac,sine,wave,analog,mtb-flow">
    <name>DAC Sine Wave</name>
    <id>mtb-example-xmc-dac-sine</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-dac-sine</uri>
    <description><![CDATA[This code example demonstrates the usage of DAC peripheral of the XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-dac-sine/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc dac</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,acmp,comparator,analog,led,mtb-flow">
    <name>Analog Comparator</name>
    <id>mtb-example-xmc-acmp-cmp</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-acmp-cmp</uri>
    <description><![CDATA[This code example demonstrates the usage of the Analog Comparator (ACMP) peripheral of XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-acmp-cmp/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc comp led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,flash,emulated,eeprom,mtb-flow">
    <name>Flash EEPROM</name>
    <id>mtb-example-xmc-flash-eeprom</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-flash-eeprom</uri>
    <description><![CDATA[This code example shows how to use a portion of the internal flash memory of XMC MCUs as emulated EEPROM memory, and provides necessary APIs to perform read and write operations to the emulated EEPROM.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-flash-eeprom/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,can,receiver,led,mtb-flow">
    <name>CAN Receiver</name>
    <id>mtb-example-xmc-can-receiver</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-can-receiver</uri>
    <description><![CDATA[This example demonstrates how to receive CAN messages over the CAN bus using XMC MCU. This example can be used together with the <a href="https://github.com/Infineon/mtb-example-xmc-can-transmitter">CAN Transmitter</a> example running on another board.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-can-receiver/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc can led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,can,loopback,led,mtb-flow">
    <name>CAN Loopback</name>
    <id>mtb-example-xmc-can-loopback</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-can-loopback</uri>
    <description><![CDATA[This code example demonstrates the communication between two CAN nodes in loopback mode using XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-can-loopback/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc can led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,dma,fce,crc,led,mtb-flow">
    <name>DMA FCE</name>
    <id>mtb-example-xmc-dma-fce</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-dma-fce</uri>
    <description><![CDATA[This code example demonstrates how to use DMA to feed the Flexible CRC Engine (FCE) to calculate the CRC-32 on a fictitious frame of data in XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-dma-fce/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc dma led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,spi,dma,led,mtb-flow">
    <name>SPI DMA</name>
    <id>mtb-example-xmc-spi-dma</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-spi-dma</uri>
    <description><![CDATA[This code example demonstrates how to use DMA driver to transfer data from RAM to SPI freeing the CPU for other tasks.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-spi-dma/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc dma spi led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,fce,crc,led,mtb-flow">
    <name>FCE CRC</name>
    <id>mtb-example-xmc-fce-crc</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-fce-crc</uri>
    <description><![CDATA[This code example uses the Flexible CRC Engine (FCE) driver for kernel to demonstrate CRC-32, CRC-16, and CRC-8 checksum calculations.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-fce-crc/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led xmc4000</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,can,transmitter,led,mtb-flow">
    <name>CAN Transmitter</name>
    <id>mtb-example-xmc-can-transmitter</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-can-transmitter</uri>
    <description><![CDATA[This example demonstrates how to transmit CAN messages over the CAN bus using XMC MCU. This example can be used with the <a href="https://github.com/Infineon/mtb-example-xmc-can-receiver">CAN Receiver</a> example running on another board.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-can-transmitter/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc can led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,uart,transmit,hello world,led,mtb-flow">
    <name>UART Transmit</name>
    <id>mtb-example-xmc-uart-transmit</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-uart-transmit</uri>
    <description><![CDATA[This code example demonstrates simple UART communication by printing periodic "Hello World!!" message on a terminal and blinking an LED. The message can be seen on a PC terminal.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-uart-transmit/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,math,sqrt,square root,cordic,mtb-flow">
    <name>MATH SQRT</name>
    <id>mtb-example-xmc-math-sqrt</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-math-sqrt</uri>
    <description><![CDATA[This code example uses the MATH CORDIC block to perform the square root operation for the given input number.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-math-sqrt/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc xmc1000</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,eru,extint,interrupt,led,mtb-flow">
    <name>ERU EXTINT</name>
    <id>mtb-example-xmc-eru-extint</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-eru-extint</uri>
    <description><![CDATA[This code example demonstrates Event Request Unit (ERU) functionality with external interrupt on XMC MCU evaluation kits. In this example, an external signal, fed into the ERU unit using a GPIO pin, triggers a service request interrupt that toggles an LED.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-eru-extint/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,scu,sleep,led,mtb-flow">
    <name>SCU Sleep</name>
    <id>mtb-example-xmc-scu-sleep</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-scu-sleep</uri>
    <description><![CDATA[This code example demonstrates the System Control Unit (SCU) sleep mode on the XMC MCU evaluation kits. Wakeup is done by using an external interrupt via the Event Request Unit (ERU). An LED glows at every falling edge of the external signal inside the ERU interrupt. The MCU is put back to sleep mode again after servicing the interrupt.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-scu-sleep/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,watchdog,wdt,prewarning,led,mtb-flow">
    <name>WDT Prewarning</name>
    <id>mtb-example-xmc-wdt-prewarning</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-wdt-prewarning</uri>
    <description><![CDATA[This code example demonstrates the prewarning feature of the watchdog timer (WDT) on the XMC MCU evaluation kits.
    <br>A pre-warning alarm is triggered before a watchdog reset only if the watchdog timer is not serviced properly. When a prewarning condition occurs, the User LED1 blinks once. After a watchdog reset, the MCU checks the reason for the last reset; if it was caused by a watchdog reset, the User LED2 blinks at a faster rate.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-wdt-prewarning/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,ccu,ccu8,timer,concatenation,led,mtb-flow">
    <name>CCU8 Timer Concatenation</name>
    <id>mtb-example-xmc-ccu8-timer-concatenation</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-ccu8-timer-concatenation</uri>
    <description><![CDATA[This code example demonstrates the concatenation or linking feature of the Capture and Compare Unit 8 (CCU8) slices available in XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-ccu8-timer-concatenation/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,spi,master,transmit,led,mtb-flow">
    <name>SPI Master</name>
    <id>mtb-example-xmc-spi-master</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-spi-master</uri>
    <description><![CDATA[This code example demonstrates the transfer of 3 bytes of data using SPI Master in XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-spi-master/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led spi</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,dma,pwm,mtb-flow">
    <name>DMA PWM</name>
    <id>mtb-example-xmc-dma-pwm</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-dma-pwm</uri>
    <description><![CDATA[This code example demonstrates the use of DMA double buffering with the PWM block. DMA writes to the compare register of the PWM to obtain a varying duty cycle at the output. Two buffers are present to provide an increasing duty cycle in one and a decreasing duty cycle in the other.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-dma-pwm/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc dma</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,dma,gpio,led,mtb-flow">
    <name>DMA GPIO</name>
    <id>mtb-example-xmc-dma-gpio</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-dma-gpio</uri>
    <description><![CDATA[This code example demonstrates how to configure the GPIO registers using GPDMA.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-dma-gpio/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc dma led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,dma,m2m,led,mtb-flow">
    <name>DMA M2M</name>
    <id>mtb-example-xmc-dma-m2m</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-dma-m2m</uri>
    <description><![CDATA[This example demonstrates the transfer of data from the flash to the RAM using the GPDMA peripheral.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-dma-m2m/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc dma led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,mtb-flow,flash-protection,flash,protection">
    <name>Flash Protection</name>
    <id>mtb-example-xmc-flash-protection</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-flash-protection</uri>
    <description><![CDATA[This example demonstrates how flash protection can be configured in the XMC 4000 Series of devices.
    <br><br><b>Note:</b> This code example involves programming the User Configuration Blocks (UCB), which can only be programmed only a limited number of times. See the Design and Implementation section in the README before proceeding with this code example.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-flash-protection/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc xmc4000</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,uart,transmit,tx,receive,rx,fifo,interrupt,led,mtb-flow">
    <name>UART Transmit Receive FIFO Interrupts</name>
    <id>mtb-example-xmc-uart-transmit-receive-fifo-interrupts</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-uart-transmit-receive-fifo-interrupts</uri>
    <description><![CDATA[This code example demonstrates how to use the Tx and Rx FIFO limit interrupts and send data from the Tx buffer to the Rx buffer. If reception is successful, the on-board LED 1 glows; otherwise, the LED remains OFF.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-uart-transmit-receive-fifo-interrupts/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,tse,calc,temperature,dts,mtb-flow">
    <name>TSE Calc Temperature</name>
    <id>mtb-example-xmc-tse-calc-temperature</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-tse-calc-temperature</uri>
    <description><![CDATA[This code example demonstrates how to use TSE (on-chip temperature sensor). TSE calculates temperature readings from the sensor and sends them over UART periodically every 1 s. Correspondingly, the LED blinks every 1 s; the temperature readings can be observed on the terminal.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-tse-calc-temperature/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led xmc1000</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,ccu,ccu8,sync,start,timer,led,mtb-flow">
    <name>CCU8 Timer Synchronous Start</name>
    <id>mtb-example-xmc-ccu8-sync-start</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-ccu8-sync-start</uri>
    <description><![CDATA[This code example demonstrates the synchronous start of Capture-Compare Unit 8 (CCU80 and CCU81) in the XMC MCU upon receving a trigger from the Event Request Unit (ERU). The CCU8 timer slice program blinks the on-board user LEDs (CCU80 blinks User LED1 and CCU81 blinks User LED2) when a timer period match interrupt occurs.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-ccu8-sync-start/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,math,cordic,mtb-flow">
    <name>MATH CORDIC</name>
    <id>mtb-example-xmc-math-cordic</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-math-cordic</uri>
    <description><![CDATA[This code example uses the MATH CORDIC block to perform circular, hyperbolic, and logarithmic operations. The example demonstrates the blocking, non-blocking, and direct register write operations of the CORDIC block.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-math-cordic/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc xmc1000</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,posif,qd,led,mtb-flow">
    <name>POSIF QD</name>
    <id>mtb-example-xmc-posif-qd</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-posif-qd</uri>
    <description><![CDATA[This example demonstrates a Position Interface (POSIF) module in Quadrature Decoder (QD) mode and uses the CCU40 module to determine the speed of rotation of the encoder.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-posif-qd/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,adc,vadc,background,bg,led,mtb-flow">
    <name>VADC Background</name>
    <id>mtb-example-xmc-vadc-bg</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-vadc-bg</uri>
    <description><![CDATA[This example demonstrates how to convert a single channel using the background source in VADC. In this example, the background source continuously requests conversion. The ADC conversion result is read and displayed on the UART Terminal.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-vadc-bg/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led adc</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,watchdog,wdt,feed,led,mtb-flow">
    <name>WDT FEED</name>
    <id>mtb-example-xmc-wdt-feed</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-wdt-feed</uri>
    <description><![CDATA[This code example demonstrates a Watchdog Timer (WDT) on the XMC MCU.
    <br><br>The WDT needs to be fed every second for proper serving of the WDT. The SysTick timer is used to feed the WDT. When feeding occurs, the User LED blinks. If there is no feeding, the device goes into reset. After the reset, the MCU checks the reason for the last reset. If it is due to a failure to feed the WDT, the User LED blinks at a faster rate.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-wdt-feed/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,qspi-flash,flash,qspi,spi-qspi-flash,led,mtb-flow">
    <name>SPI QSPI Flash</name>
    <id>mtb-example-xmc-spi-qspi-flash</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-spi-qspi-flash</uri>
    <description><![CDATA[This example demonstrates how the communication between the XMC4700 (master) and the on-board QSPI flash chip N25Q03 (slave) takes place using the Quad SPI interface.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-spi-qspi-flash/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc spi led xmc4000</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,brownout,detection,power-supply,led,mtb-flow">
    <name>Brownout Detection</name>
    <id>mtb-example-xmc-scu-brownout-detection</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-scu-brownout-detection</uri>
    <description><![CDATA[This code example demonstrates brownout detection by reducing power supply voltage from 3.3 V to the defined voltage threshold using brownout detection available in XMC MCU devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-scu-brownout-detection/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,adc,vadc,queue,mtb-flow">
    <name>VADC Queue</name>
    <id>mtb-example-xmc-vadc-queue</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-vadc-queue</uri>
    <description><![CDATA[This example demonstrates how to convert multiple channels in a dedicated sequence using the queue source in VADC.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-vadc-queue/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc adc</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,mtb-flow,flash-bmi,flash,bmi,boot-mode-index">
    <name>Flash BMI</name>
    <id>mtb-example-xmc-flash-bmi</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-flash-bmi</uri>
    <description><![CDATA[This example demonstrates how Boot Mode Index (BMI) can be used to configure a customized boot sequence on XMC4700 device.
    <br><br><b>Note:</b> This code example involves programming the User Configuration Blocks (UCB), which can be programmed only a limited number of times. See the Design and Implementation section in the README before proceeding with this code example.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-flash-bmi/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc xmc4000</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,posif,hall,uart,led,mtb-flow">
    <name>POSIF Hall</name>
    <id>mtb-example-xmc-posif-hall</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-posif-hall</uri>
    <description><![CDATA[This code example demonstrates a position interface (POSIF) module in Hall sensor mode and uses the capture and compare unit 4 (CCU40) module to determine the speed of rotation of the motor.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-posif-hall/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
    <app keywords="mtb-flow,psoc6,anycloud,udp,client,wifi,led" req_capabilities_v2="[flash_2048k, flash_1024k, flash_512k, cy8ckit_064b0s2_4343w]">
    <name>UDP Client</name>
    <id>mtb-example-anycloud-udp-client</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-udp-client</uri>
    <description><![CDATA[This code example demonstrates implementation of UDP Client using the Wi-Fi connectivity SDK. The UDP Client establishes a connection with a remote UDP server and based on the command received from the UDP server, turns the user LED ON or OFF using PSoC&#8482; 6 MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-udp-client/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license. <br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 cyw43xxx wifi led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.3.0 release</num>
        <commit>release-v2.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,anycloud,udp,server,wifi,switch" req_capabilities_v2="[flash_2048k, flash_1024k, flash_512k, cy8ckit_064b0s2_4343w]">
    <name>UDP Server</name>
    <id>mtb-example-anycloud-udp-server</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-udp-server</uri>
    <description><![CDATA[This code example demonstrates implementation of UDP Server using the Wi-Fi connectivity SDK. The UDP Server allows the user to send LED ON/OFF command to the UDP client using PSoC&#8482; 6 MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-udp-server/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license. <br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 cyw43xxx wifi switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.3.0 release</num>
        <commit>release-v2.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,wifi,anycloud,ota,http,https">
    <name>OTA Using HTTPS</name>
    <id>mtb-example-anycloud-ota-https</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-ota-https</uri>
    <description><![CDATA[This code example demonstrates OTA update with PSoC&#8482; 6 MCU and CYW43xxx connectivity devices. The device establishes a connection with the designated HTTPS server. It periodically checks the job document to see if a new update is available. When a new update is available, it will be downloaded and written to the secondary slot. On the next reboot, MCUBoot will copy the new image over to the primary slot and run the application.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-ota-https/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license. <br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 cyw43xxx wifi led flash_2048k</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,uart,capsense,slider,ganged sensor,i2c,tuner,rtos,mtb-flow">
    <name>Low-power CAPSENSE FreeRTOS</name>
    <id>mtb-example-psoc6-low-power-capsense-freertos</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-low-power-capsense-freertos</uri>
    <description><![CDATA[This code example demonstrates how to create a low-power CAPSENSE&#8482; design using PSoC&#8482; 6 MCU. This example features a 5-segment CAPSENSE&#8482; slider and a Ganged Sensor, and displays the detected touch position over the serial terminal.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-low-power-capsense-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 capsense_linear_slider low_power</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.2.0 release</num>
        <commit>release-v1.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,wifi,anycloud,ota,mqtt">
    <name>OTA Using MQTT</name>
    <id>mtb-example-anycloud-ota-mqtt</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-ota-mqtt</uri>
    <description><![CDATA[This code example demonstrates OTA update with PSoC&#8482; 6 MCU and CYW43xxx connectivity devices. The device establishes a connection with the designated MQTT broker. It periodically checks the job document to see if a new update is available. When a new update is available, it will be downloaded and written to the secondary slot. On the next reboot, MCUBoot will copy the new image over to the primary slot and run the application.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-ota-mqtt/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license. <br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 cyw43xxx wifi led flash_2048k</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 4.X release</num>
        <commit>latest-v4.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>4.0.0 release</num>
        <commit>release-v4.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>3.1.0 release</num>
        <commit>release-v3.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,usb,suspend,resume,mtb-flow">
    <name>USB Suspend and Resume</name>
    <id>mtb-example-psoc6-usb-suspend</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-usb-suspend</uri>
    <description><![CDATA[This code example demonstrates how PSoC&#8482; 6 USB detects a suspend condition, enters a low-power state, and restores normal operation when USB activity is resumed.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-usb-suspend/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led usb_device</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.2.0 release</num>
        <commit>release-v1.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,button,led,ble,findme,FMP,GAP peripheral,mtb-flow">
    <name>Bluetooth LE Find Me</name>
    <id>mtb-example-psoc6-ble-findme</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-ble-findme</uri>
    <description><![CDATA[This code example demonstrates the implementation of a simple Bluetooth&#174; Low Energy Immediate Alert Service (IAS)-based Find Me Profile (FMP) using PSoC&#8482; 6 MCU with Bluetooth&#174; Low Energy Connectivity.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-ble-findme/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led switch ble</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,anycloud,http,https,server,wifi" req_capabilities_v2="[flash_2048k, flash_1024k, flash_512k]">
    <name>HTTPS Server</name>
    <id>mtb-example-anycloud-https-server</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-https-server</uri>
    <description><![CDATA[This code example demonstrates the implementation of an HTTPS server with PSoC&#8482; 6 MCU and CYW43xxx connectivity devices. It employs the HTTPS server middleware library, which takes care of all the underlying socket connections with the HTTPS client. This example establishes a secure connection with a HTTPS client through SSL handshake. Once the SSL handshake completes successfully, the HTTPS client can make GET, POST, and PUT requests with the server.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-https-server/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license.<br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 cyw43xxx led wifi</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,anycloud,http,softap,tft,server,wifi,AP+STA concurrent mode,web server" req_capabilities_v2="[flash_2048k, flash_1024k]">
    <name>Wi-Fi Web Server</name>
    <id>mtb-example-anycloud-wifi-web-server</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-anycloud-wifi-web-server</uri>
    <description><![CDATA[This code example demonstrates Wi-Fi provisioning via a SoftAP interface and setting up a web server using PSoC&#8482; 6 MCU with AIROC&#8482; CYW43xxx Wi-Fi & Bluetooth&#174; combo chips. In this example, the PSoC&#8482; 6 MCU device is configured in AP+STA concurrent mode. It starts an HTTP web server while in AP+STA concurrent mode and hosts an HTTP web page. The kit can be connected to the desired Wi-Fi network by entering the credentials via this web page. After connecting to the specified Wi-Fi network, the device is reconfigured to start a new HTTP web server. The new web server hosts a web page that displays the device data containing ambient light sensor (ALS) value and provides a button to change the brightness of an LED.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-wifi-web-server/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack and the Mbed TLS open-source TLS/SSL library which has cryptographic capabilities. Creating a project from this template will cause lwIP and Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the lwIP &amp; Mbed TLS licenses and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 cyw43xxx led capsense_button capsense_linear_slider wifi</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
    <app keywords="mtb-flow,psoc6,anycloud,tcp,secure,client,wifi" req_capabilities_v2="[flash_2048k, flash_1024k, flash_512k]">
    <name>Secure TCP client</name>
    <id>mtb-example-anycloud-secure-tcp-client</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-secure-tcp-client</uri>
    <description><![CDATA[This code example demonstrates the implementation of a secure TCP client using PSoC&#8482;&#8482;&#8482; 6 MCU with AIROC&#8482; CYW43xxx Wi-Fi & Bluetooth&#174; combo chips.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-secure-tcp-client/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack and the Mbed TLS open-source TLS/SSL library which has cryptographic capabilities. Creating a project from this template will cause lwIP and Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the lwIP &amp; Mbed TLS licenses and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx led switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,anycloud,tcp,secure,server,wifi" req_capabilities_v2="[flash_2048k, flash_1024k, flash_512k]">
    <name>Secure TCP server</name>
    <id>mtb-example-anycloud-secure-tcp-server</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-secure-tcp-server</uri>
    <description><![CDATA[This code example demonstrates the implementation of a secure TCP server using PSoC&#8482;&#8482;&#8482; 6 MCU with AIROC&#8482; CYW43xxx Wi-Fi & Bluetooth&#174; combo chips.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-secure-tcp-server/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack and the Mbed TLS open-source TLS/SSL library which has cryptographic capabilities. Creating a project from this template will cause lwIP and Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the lwIP &amp; Mbed TLS licenses and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx led switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,anycloud,tcp,client,wifi" req_capabilities_v2="[flash_2048k, flash_1024k]">
    <name>TCP Client</name>
    <id>mtb-example-anycloud-tcp-client</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-tcp-client</uri>
    <description><![CDATA[This code example demonstrates implementation of TCP client with PSoC&#8482; 6 MCU and CYW43xxx connectivity devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-tcp-client/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license. <br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx led switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,anycloud,tcp,server,wifi" req_capabilities_v2="[flash_2048k, flash_1024k]">
    <name>TCP Server</name>
    <id>mtb-example-anycloud-tcp-server</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-tcp-server</uri>
    <description><![CDATA[This code example demonstrates implementation of a TCP server with PSoC&#8482; 6 MCU and CYW43xxx connectivity devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-tcp-server/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack and the Mbed TLS open-source TLS/SSL library which has cryptographic capabilities. Creating a project from this template will cause lwIP and Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the lwIP &amp; Mbed TLS licenses and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx led switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
    <app keywords="mtb-flow,psoc6,anycloud,mqtt,client,wifi,aws,mosquitto" req_capabilities_v2="[flash_2048k, flash_1024k, flash_512k]">
    <name>MQTT Client</name>
    <id>mtb-example-anycloud-mqtt-client</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-mqtt-client</uri>
    <description><![CDATA[This code example demonstrates implementing an MQTT Client using the MQTT Client library. The library uses the AWS IoT Device SDK MQTT Client library that includes an MQTT 3.1.1 Client.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-mqtt-client/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license.<br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx led switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 4.X release</num>
        <commit>latest-v4.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>4.0.0 release</num>
        <commit>release-v4.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>3.1.0 release</num>
        <commit>release-v3.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,anycloud,mqtt,azure-iot,azure,azure-sdk,wifi" req_capabilities_v2="[flash_2048k, flash_1024k, flash_1856k]">
    <name>Connecting to Azure IoT</name>
    <id>mtb-example-anycloud-azure-iot</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-anycloud-azure-iot</uri>
    <description><![CDATA[This code example demonstrates connecting to the Azure IoT services using the <a href="https://github.com/Azure/azure-sdk-for-c">Azure SDK for Embedded C</a> and Infineon's Wi-Fi connectivity SDK in ModusToolbox&#8482;. This code example demonstrates the features such as IoT hub - C2D (Cloud-to-Device messaging), Telemetry, Methods, Twin, Provisioning, and PnP (Plug and Play).
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-azure-iot/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license.<br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,usb,audio,freertos,mtb-flow" req_capabilities_v2="[cy8ceval_062s2, cy8ceval_062_s2_lai_4373m2, cy8ckit_062_wifi_bt, cy8ckit_062s2_43012, cy8cproto_062_4343w, cyw9p62s1_43012evb_01, cyw9p62s1_43438evb_01]">
    <name>USB Audio Device FreeRTOS</name>
    <id>mtb-example-psoc6-usb-audio-device-freertos</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-usb-audio-device-freertos</uri>
    <description><![CDATA[This example demonstrates how to use PSoC&#8482; 6 MCU to implement a USB Audio Device and HID Audio Playback Control that connects to the PC via the USB interface. The example also uses FreeRTOS.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-usb-audio-device-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 usb_device capsense_button capsense_linear_slider i2s</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,cryptography,trng,mtb-flow">
    <name>Cryptography TRNG Demonstration</name>
    <id>mtb-example-psoc6-crypto-trng</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-crypto-trng</uri>
    <description><![CDATA[This code example demonstrates generating a One-Time Password (OTP) using the True Random Number generation feature of PSoC&#8482; 6 MCU cryptography block.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-crypto-trng/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,bmi160,motion,motion-sensor,bmi160,freertos,mtb-flow">
    <name>BMI160 Motion Sensor over I2C FreeRTOS</name>
    <id>mtb-example-psoc6-bmi160-motion-sensor-freertos</id>
    <category>Sensing</category>
    <uri>https://github.com/Infineon/mtb-example-psoc6-bmi160-motion-sensor-freertos</uri>
    <description><![CDATA[This code example demonstrates interfacing of the BMI160 Motion Sensor with PSoC&#8482; 6 MCU over an I2C interface within a FreeRTOS task. This example reads the raw motion data and estimates the orientation of the board.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-bmi160-motion-sensor-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,cryptography,aes,mtb-flow">
    <name>Cryptography AES Demonstration</name>
    <id>mtb-example-psoc6-crypto-aes</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-crypto-aes</uri>
    <description><![CDATA[This code example encrypts and decrypts user input data using the AES algorithm using a 128-bit key. The encrypted and decrypted data are displayed on a UART terminal emulator.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-crypto-aes/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,protection units,pc,smpu,dual cpu,memory,console,mtb-flow">
    <name>Protection Units FreeRTOS</name>
    <id>mtb-example-psoc6-dual-cpu-protection-units-freertos</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-dual-cpu-protection-units-freertos</uri>
    <description><![CDATA[This example demonstrates how to use the protection units to isolate the CM0+ CPU memory from CM4.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-dual-cpu-protection-units-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 multi_core</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.2.0 release</num>
        <commit>release-v1.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,led,starter,hello world,mtb-flow">
    <name>Hello World</name>
    <id>mtb-example-pmg1-hello-world</id>
    <category>Getting Started</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-pmg1-hello-world</uri>
    <description><![CDATA[This code example demonstrates simple UART communication by printing a "Hello World" message on a terminal and blinking an LED using Power Delivery Microcontroller Generation 1 (PMG1) devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-hello-world/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,usbpd,mtb-flow">
    <name>USBPD Sink</name>
    <id>mtb-example-pmg1-usbpd-sink</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-pmg1-usbpd-sink</uri>
    <description><![CDATA[This code example demonstrates USB-C attach detection and USB Power Delivery contract negotiation using Power Delivery Microcontroller Generation 1 (PMG1) devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-usbpd-sink/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>usbpd pmg1 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,usbpd,mtb-flow" req_capabilities_v2="[pmg1_cy7113]">
    <name>USBPD DRP</name>
    <id>mtb-example-pmg1-usbpd-drp</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-usbpd-drp</uri>
    <description><![CDATA[This code example demonstrates USB-C attach detection and USB Power Delivery contract negotiation using Power Delivery Microcontroller Generation 1 (PMG1) devices in DRP role.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-usbpd-drp/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>usbpd pmg1 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,usbpd,capsense,mtb-flow">
    <name>USBPD Sink CAPSENSE</name>
    <id>mtb-example-pmg1-usbpd-sink-capsense</id>
    <category>Sensing</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-usbpd-sink-capsense</uri>
    <description><![CDATA[This code example demonstrates CAPSENSE&trade; functionality using a 5-segment CAPSENSE&trade; slider and two CAPSENSE&trade; buttons along with USB-C attach detection and USB Power Delivery contract negotiation using Power Delivery Microcontroller Generation 1 (PMG1) devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-usbpd-sink-capsense/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>usbpd pmg1 capsense led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,usbpd,mtb-flow" req_capabilities_v2="[pmg1_cy7113]">
    <name>USBPD Sink using FreeRTOS</name>
    <id>mtb-example-pmg1-usbpd-sink-freertos</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-usbpd-sink-freertos</uri>
    <description><![CDATA[This code example demonstrates USB-C attach detection and USB Power Delivery contract negotiation using Power Delivery Microcontroller Generation 1 (PMG1) devices. This code example uses FreeRTOS.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-usbpd-sink-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>usbpd pmg1 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,usb,mtb-flow,hid,mouse">
    <name>USB HID Mouse</name>
    <id>mtb-example-pmg1-usb-hid-mouse</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-usb-hid-mouse</uri>
    <description><![CDATA[This code example demonstrates how to configure the USB block in a PMG1 MCU as a Human Interface Device (HID). The device enumerates as a 3-button mouse.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-usb-hid-mouse/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1 usb_device</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,mtb-flow">
    <name>Basic Device Firmware Upgrade</name>
    <id>mtb-example-pmg1-dfu-basic</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-dfu-basic</uri>
    <description><![CDATA[This code example demonstrates Device Firmware Upgrade (DFU) with PMG1 MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-dfu-basic/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,led,switch,gpio-interrupt,mtb-flow">
    <name>LED Switch Interface</name>
    <id>mtb-example-pmg1-led-sw-interface</id>
    <uri>https://github.com/Infineon/mtb-example-pmg1-led-sw-interface</uri>
    <description><![CDATA[This code example demonstrates simple Switch and LED interface on Power Delivery Microcontroller Generation 1 (PMG1) devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-led-sw-interface">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1 led switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,dfu,bootloader,mtb-flow" req_capabilities_v2="[cy8ceval_062s2, cy8ceval_062_s2_lai_4373m2, cy8ckit_062_ble, cy8ckit_062_wifi_bt, cy8ckit_062s2_43012, cy8cproto_062_4343w, cy8cproto_062s3_4343w, cy8cproto_063_ble, cy8ckit_062s4, cyw9p62s1_43012evb_01, cyw9p62s1_43438evb_01]">
    <name>Basic Device Firmware Upgrade</name>
    <id>mtb-example-psoc6-dfu-basic</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-dfu-basic</uri>
    <description><![CDATA[This example demonstrates Device Firmware Upgrade (DFU) with PSoC6 MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-dfu-basic/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led switch std_crypto</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>1.4.0 release</num>
        <commit>release-v1.4.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>1.3.0 release</num>
        <commit>release-v1.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>1.2.0 release</num>
        <commit>release-v1.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,emulated,eeprom,flash,mtb-flow">
    <name>Emulated EEPROM</name>
    <id>mtb-example-psoc6-emulated-eeprom</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-emulated-eeprom</uri>
    <description><![CDATA[This code example demonstrates emulation of EEPROM behavior in flash memory of PSoC&#8482; 6 MCU using emeeprom middleware.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-emulated-eeprom/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,mcuboot,bootloader,mtb-flow" req_capabilities_v2="[flash_2048k, flash_1024k, flash_512k]">
    <name>MCUboot-Based Basic Bootloader</name>
    <id>mtb-example-psoc6-mcuboot-basic</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-mcuboot-basic</uri>
    <description><![CDATA[This code example demonstrates building a simple bootloader application for PSoC&#8482; 62/63 MCUs using the open-source library - MCUboot.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-mcuboot-basic/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 std_crypto led qspi nor_flash</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,mtb-flow,ml,nn,profiler" req_capabilities_v2="[flash_2048k, flash_1856k, flash_1024k, flash_832k, flash_512k]">
    <name>Machine Learning Neural Network Profiler</name>
    <id>mtb-example-ml-profiler</id>
    <category>Machine Learning</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-ml-profiler</uri>
    <description><![CDATA[This code example demonstrates how to run through the machine learning (ML) development flow with PSoC&#8482; 6 MCU, where the end user has a pre-trained Neural Network (NN) model, which can be profiled and validated at the PC and target device.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-ml-profiler/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 uart</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.3" tools_max_version="2.2.3" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,mtb-flow,littlefs,filesystem,file,system,nor-flash,sd-card">
    <name>Littlefs Filesystem</name>
    <id>mtb-example-psoc6-filesystem-littlefs-freertos</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-filesystem-littlefs-freertos</uri>
    <description><![CDATA[This example shows how to perform file I/O operations using the <a href="https://github.com/littlefs-project/littlefs">littlefs</a> filesystem API on storage devices such as SD card and NOR flash. This example uses the <a href="https://github.com/Infineon/mtb-littlefs">mtb-littlefs</a> library that implements the block device drivers for use with littlefs.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-filesystem-littlefs-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 qspi nor_flash switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,mtb-flow,segger,emfile,FAT,filesystem,file,system,nor-flash,sd-card">
    <name>emFile Filesystem</name>
    <id>mtb-example-psoc6-filesystem-emfile-freertos</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-filesystem-emfile-freertos</uri>
    <description><![CDATA[This example shows how to create a FAT filesystem on storage devices such as SD card and NOR flash using the SEGGER emFile library.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-filesystem-emfile-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 qspi nor_flash switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc64,led,freertos,mtb-flow">
    <name>Secure Blinky LED FreeRTOS</name>
    <id>mtb-example-psoc6-secure-blinkyled-freertos</id>
    <category>Getting Started</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-secure-blinkyled-freertos</uri>
    <description><![CDATA[This code example demonstrates the implementation of two tasks with FreeRTOS. One task blinks an LED and the other prints an incrementing counter value out to the UART.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-secure-blinkyled-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>secure_boot</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,msc,capsense,csd,touchpad,tuning,mtb-flow">
    <name>MSC CAPSENSE CSD Touchpad Tuning</name>
    <id>mtb-example-psoc4-msc-capsense-csd-touchpad-tuning</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-msc-capsense-csd-touchpad-tuning</uri>
    <description><![CDATA[This code example demonstrates how to manually tune a self capacitance-based touchpad widget in PSoC&#8482; 4 devices using the Multi Sense Converter (MSC) CSD-RM sensing technique and CAPSENSE&#8482; Tuner GUI.
<br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-msc-capsense-csd-touchpad-tuning/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led msc_touchpad</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,msc,capsense,csx,touchpad,tuning,mtb-flow">
    <name>MSC Multi-Touch CSX Touchpad Tuning</name>
    <id>mtb-example-psoc4-msc-capsense-csx-touchpad-tuning</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-msc-capsense-csx-touchpad-tuning</uri>
    <description><![CDATA[This code example demonstrates how to manually tune a mutual capacitance-based touchpad widget in PSoC&#8482; 4 devices using the Multi Sense Converter (MSC) CSX-RM sensing technique and CAPSENSE&#8482; Tuner GUI.
<br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-msc-capsense-csx-touchpad-tuning/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led msc_touchpad</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,machine-learning,ml,bmx160,gesture,motion sensor,mtb-flow">
    <name>Machine Learning Gesture Classification</name>
    <id>mtb-example-ml-gesture-classification</id>
    <category>Machine Learning</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-ml-gesture-classification</uri>
    <description><![CDATA[This code example demonstrates how to perform gesture classification based on motion sensor (accelerometer and gyroscope) data. The code example comes with a pre-trained model that classifies the following gestures: circle, square, and side-to-side.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-ml-gesture-classification/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 spi arduino cyw43xxx</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="btsdk,mesh,ble,sensors,sensor hub,als,ambient,light,temperature,thermistor,i2c,adc,mtb-flow">
    <name>Mesh SensorHub</name>
    <id>mtb-example-btsdk-mesh-sensorhub</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-btsdk-mesh-sensorhub</uri>
    <description><![CDATA[This example demonstrates the use of a Bluetooth&#174; Low Energy Mesh sensor model with Ambient Light and Temperature sensor interfaced with AIROC&#8482; CYW20835 Bluetooth&#174; LE system-on-chip using ModusToolbox&#8482; software.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-btsdk-mesh-sensorhub/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>mesh fw2 led2x ncu15wf104 button MAX44009EDT</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,emwin,display,tft,freertos,mtb-flow" req_capabilities_v2="[cy8ckit_062_ble, cy8ckit_062_wifi_bt, cy8ckit_062s2_43012, cy8ckit_064b0s2_4343w, cyw9p62s1_43438evb_01]">
    <name>emWin TFT FreeRTOS</name>
    <id>mtb-example-psoc6-emwin-tft-freertos</id>
    <category>Graphics</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-emwin-tft-freertos</uri>
    <description><![CDATA[This example demonstrates displaying 2D graphics on a TFT display using the emWin graphics library in FreeRTOS. The application initializes the system peripherals and creates a task that cycles through demo images in response to button presses.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-emwin-tft-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 arduino switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,lin">
    <name>LIN Slave</name>
    <id>mtb-example-psoc4-lin-slave</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-psoc4-lin-slave</uri>
    <description><![CDATA[This code example shows how to implement a basic LIN 2.2 slave using the LIN Middleware in PSoC&#8482; 4. PSoC&#8482; 4 responds to an external LIN Master's commands to either turn on the corresponding color LED on PSoC&#8482; development kit or report the current LED color status.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-lin-slave/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 lin</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,qspi-flash,flash,qspi,spi-qspi-flash,led,mtb-flow">
    <name>QSPI XIP</name>
    <id>mtb-example-psoc6-qspi-xip</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-qspi-xip</uri>
    <description><![CDATA[This example demonstrates how to use the QSPI block of the PSoC&#8482; 6 MCU in execute-in-place (XIP) mode with an external flash memory device.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-qspi-xip/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 multi_core led qspi nor_flash</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,qspi,spi,nor,flash,sfdp,smif,serial-flash,mtb-flow">
    <name>QSPI Flash Read Write Using SFDP</name>
    <id>mtb-example-psoc6-qspi-readwrite-sfdp</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-qspi-readwrite-sfdp</uri>
    <description><![CDATA[This example demonstrates interfacing with an external NOR flash memory in Quad-SPI mode using the Serial Memory Interface (SMIF) block in PSoC&#8482; 6 MCU. This example uses the Serial Flash Discoverable Parameters (SFDP) standard to auto-discover the flash parameters and the commands for read, program, and erase operations.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-qspi-readwrite-sfdp/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 std_crypto led qspi nor_flash</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,qspi,spi,nor,flash,smif,serial-flash,mtb-flow">
    <name>QSPI Flash Read Write</name>
    <id>mtb-example-psoc6-qspi-readwrite</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-qspi-readwrite</uri>
    <description><![CDATA[This example demonstrates interfacing with an external NOR flash memory in Quad SPI (QSPI) mode using the serial memory interface (SMIF) block in PSoC&#8482;&trade; 6 MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-qspi-readwrite/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 std_crypto led qspi nor_flash</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,canfd,mtb-flow">
    <name>CAN FD</name>
    <id>mtb-example-psoc4-canfd</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-psoc4-canfd</uri>
    <description><![CDATA[This example demonstrates how to use CAN FD in PSoC&#8482; 4 MCU devices. In this example, the CANFD Node-1 sends a CAN FD frame to CANFD-Node-2 on pressing the user button and vice versa. Both the CAN FD nodes log the received data over UART serial terminal. Each time a CAN FD Frame is received, the user LED toggles.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-canfd/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led can cy8ckit_041s_max</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,msc,capsense,csd,slider,tuning,mtb-flow">
    <name>MSC CAPSENSE CSD Slider Tuning</name>
    <id>mtb-example-psoc4-msc-capsense-csd-slider-tuning</id>
    <category>Sensing</category>
    <uri>https://github.com/Infineon/mtb-example-psoc4-msc-capsense-csd-slider-tuning</uri>
    <description><![CDATA[This code example demonstrates how to manually tune a self capacitance-based slider widget in PSoC&#8482; 4 devices using the Multi Sense Converter (MSC) CSD-RM sensing technique and CAPSENSE&#8482; Tuner GUI.
<br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-msc-capsense-csd-slider-tuning/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led msc_slider</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="measurement,ble,client,server,throughput,btsdk,mtb-flow">
    <name>LE Throughput Measurement</name>
    <id>mtb-example-btsdk-ble-throughput</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-btsdk-ble-throughput</uri>
    <description><![CDATA[This code example demonstrates the maximum Bluetooth&#174; LE throughput (using GATT layer notifications and write command) that can be obtained with Infineon AIROC&#8482; CYW20xxx Bluetooth&#174; devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-btsdk-ble-throughput/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>fw2 btsdk led2x button</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,wifi,anycloud,ota,mqtt,mcuboot,bootloader" req_capabilities_v2="[cy8ckit_062s2_43012, cy8cproto_062_4343w]">
    <name>MCUboot-Based Bootloader with Rollback</name>
    <id>mtb-example-anycloud-mcuboot-rollback</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-mcuboot-rollback</uri>
    <description><![CDATA[This code example implements a bootloader based on MCUboot to demonstrate &#8216;Rollback&#8217; to a known good image ('factory_app_cm4') in case of unrecoverable error conditions in the current application. The bootloader can load the factory app from a known location in the external memory by directly copying it into the primary slot in the internal flash, based on user inputs during boot. The factory app can then perform the OTA to download an image over Wi-Fi and place it to the secondary slot of MCUboot.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-mcuboot-rollback/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license. <br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx led std_crypto qspi nor_flash flash_2048k</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,audio,voice,picovoice,wake word,intent,speech,demo">
    <name>Picovoice E2E Voice Recognition Demo</name>
    <category>Peripherals</category>
    <id>picovoice-demo-psoc6</id>
    <uri>https://github.com/Picovoice/picovoice-demo-psoc6</uri>
    <description><![CDATA[This package contains a demo project for the CY8CKIT-062S2-43012 kit using the Picovoice end-to-end voice recognition platform. The device will listen for a wake word and then extract intent from a spoken command.
    <br><br>For more details, see the <a href="https://github.com/Picovoice/picovoice-demo-psoc6/blob/main/README.md">README on GitHub</a>.<br><br><a href="https://picovoice.ai/">Picovoice</a> is an end-to-end platform for building voice products on your terms. Unlike Alexa and Google services, Picovoice runs entirely on-device while being more accurate.<br> > <a href="https://picovoice.ai/docs/">Get Started</a><br> > <a href="https://picovoice.ai/contact/sales/">Talk to Sales</a>]]></description>
    <req_capabilities>psoc6 pdm rgb_led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Main</num>
        <commit>main</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,audio,voice,porcupine,wake word,demo">
    <name>Picovoice Porcupine Wake Word Demo</name>
    <category>Peripherals</category>
    <id>porcupine-demo-psoc6</id>
    <uri>https://github.com/Picovoice/porcupine-demo-psoc6</uri>
    <description><![CDATA[This package contains a demo project for the CY8CKIT-062S2-43012 kit using the Picovoice Porcupine&trade; wake word engine. The device will listen for a wake word and trigger the led upon recognition.
    <br><br>For more details, see the <a href="https://github.com/Picovoice/porcupine-demo-psoc6/blob/main/README.md">README on GitHub</a>.<br><br><a href="https://picovoice.ai/">Picovoice</a> is an end-to-end platform for building voice products on your terms. Unlike Alexa and Google services, Picovoice runs entirely on-device while being more accurate.<br> > <a href="https://picovoice.ai/docs/">Get Started</a><br> > <a href="https://picovoice.ai/contact/sales/">Talk to Sales</a>]]></description>
    <req_capabilities>psoc6 pdm rgb_led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Main</num>
        <commit>main</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,emulated,eeprom,flash,mtb-flow">
    <name>Emulated EEPROM</name>
    <id>mtb-example-psoc4-emulated-eeprom</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-psoc4-emulated-eeprom</uri>
    <description><![CDATA[This example demonstrates how to use the Em_EEPROM middleware in PSoC&#8482; 4 MCU devices. In this example, a counter is read from the Emulated EEPROM (Em_EEPROM), incremented, written back to the Em_EEPROM and printed on a serial terminal. This occurs on every device reset or power cycle. As a result, an incrementing value is printed on every reset.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-emulated-eeprom/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,sar,adc,die temperature,opamp">
    <name>SAR ADC BASIC</name>
    <id>mtb-example-psoc4-sar-adc</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-psoc4-sar-adc</uri>
    <description><![CDATA[This example demonstrates how to use the SAR ADC in PSoC&#8482; 4 MCU devices. In this example, the ADC is configured to measure inputs from different sources and display results through a uart terminal.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-sar-adc/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 adc opamp</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,anycloud,cts,server,bluetooth">
    <name>Bluetooth LE CTS Server</name>
    <id>mtb-example-anycloud-ble-cts-server</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-ble-cts-server</uri>
    <description><![CDATA[This code example demonstrates the implementation of a simple AIROC&#8482; Bluetooth&#174; LE GAP central - GATT server with Current time service (CTS) using the AIROC&#8482; Wi-Fi & Bluetooth&#174; combos and ModusToolbox&#8482; Software Environment.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-ble-cts-server/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 bt led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,anycloud,cts,client,bluetooth">
    <name>Bluetooth LE CTS Client</name>
    <id>mtb-example-anycloud-ble-cts-client</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-ble-cts-client</uri>
    <description><![CDATA[This code example demonstrates the implementation of a simple AIROC&#8482; Bluetooth&#174; LE GAP peripheral - GATT client with Current time service (CTS) using the AIROC&#8482; Wi-Fi & Bluetooth&#174; combos and ModusToolbox&#8482; Software Environment.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-ble-cts-client/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 bt led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,sensor,xensiv,radar,presence,csk">
    <name>Radar Presence Application</name>
    <id>mtb-example-sensors-radar-presence</id>
    <category>Sensing</category>
    <uri>https://github.com/Infineon/mtb-example-sensors-radar-presence</uri>
    <description><![CDATA[This application demonstrates the use of the radar presence application on the feather board.<br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-sensors-radar-presence/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cysbsyskit_dev_01</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,sensor,xensiv,radar,entrance counter,csk">
    <name>Radar Entrance Counter Application</name>
    <id>mtb-example-sensors-radar-entrancecounter</id>
    <category>Sensing</category>
    <uri>https://github.com/Infineon/mtb-example-sensors-radar-entrancecounter</uri>
    <description><![CDATA[This application demonstrates the use of the radar entrance counter application on the feather board.<br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-sensors-radar-entrancecounter/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cysbsyskit_dev_01</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,sensor,xensiv,co2,pasco2,dps,dps3xx,csk">
    <name>PAS CO2 Application</name>
    <id>mtb-example-sensors-pasco2</id>
    <category>Sensing</category>
    <uri>https://github.com/Infineon/mtb-example-sensors-pasco2</uri>
    <description><![CDATA[This application demonstrates the use of the pas co2 pressure sensor on the feather board.<br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-sensors-pasco2/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cysbsyskit_dev_01</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,sensor,xensiv,anycloud,radar,presence,counter,entrance counter,csk">
    <name>Radar Sensor MQTT Client</name>
    <id>mtb-example-sensors-radar-anycloud-mqtt-client</id>
    <category>Sensing</category>
    <uri>https://github.com/Infineon/mtb-example-sensors-radar-anycloud-mqtt-client</uri>
    <description><![CDATA[This application demonstrates how to implement an MQTT client for publishing presence or entrance counter events to the cloud.<br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-sensors-radar-anycloud-mqtt-client/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cysbsyskit_dev_01</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,sensor,xensiv,anycloud,co2,pasco2,csk">
    <name>PAS CO2 Sensor MQTT Client</name>
    <id>mtb-example-sensors-pasco2-anycloud-mqtt-client</id>
    <category>Sensing</category>
    <uri>https://github.com/Infineon/mtb-example-sensors-pasco2-anycloud-mqtt-client</uri>
    <description><![CDATA[This application demonstrates how to implement an MQTT client for publishing the current PPM level to the cloud.<br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-sensors-pasco2-anycloud-mqtt-client/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cysbsyskit_dev_01</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,usb,cdc,echo,mtb-flow">
    <name>USB CDC echo</name>
    <id>mtb-example-psoc6-usb-cdc-echo</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-usb-cdc-echo</uri>
    <description><![CDATA[This example demonstrates how to configure the USB block in a PSoC&#8482;&trade; 6 MCU for communication device class (CDC). When configured for a CDC, the PSoC&#8482;&trade; 6 MCU device enumerates a virtual COM port, which can be read and written by a terminal emulator program on a PC.
<br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-usb-cdc-echo/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 usb</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cyw43907,uart,mtb-flow">
    <name>UART Transmit and Receive</name>
    <id>mtb-example-cyw43907-uart-tx-rx</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-cyw43907-uart-tx-rx</uri>
    <description><![CDATA[This code example demonstrates the UART (HAL) transmit and receive operation in CYW43907. The application uses a serial terminal to read data and to echo back the received data. The UART resource is configured to do both transmit and receive operations.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-cyw43907-uart-tx-rx/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cat4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cyw43907, hello world, led, timer, mtb-flow">
    <name>Hello World</name>
    <id>mtb-example-cyw43907-hello-world</id>
    <category>Getting Started</category>
    <uri>https://github.com/Infineon/mtb-example-cyw43907-hello-world</uri>
    <description><![CDATA[This code example demonstrates the simple UART communication by printing a "Hello World" message on a terminal and blinks an LED using a Timer resource using CYW43907.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-cyw43907-hello-world/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cat4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cyw43907, watchdog timer, mtb-flow">
    <name>Watchdog Timer</name>
    <id>mtb-example-cyw43907-wdt</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-cyw43907-wdt</uri>
    <description><![CDATA[This code example explains how to set up a Watchdog Timer using the WDT HAL resource. The WDT resets the device if it is not serviced or "kicked" within the configured timeout interval. This helps in recovering the program from an unintended lock up.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-cyw43907-wdt/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cat4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cyw43907, gpio, mtb-flow">
    <name>GPIO</name>
    <id>mtb-example-cyw43907-gpio</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-cyw43907-gpio</uri>
    <description><![CDATA[This code example demonstrates the use of a GPIO configured as an input pin to generate interrupts on CYW43907. The GPIO signal interrupts the CPU and executes a user-defined Interrupt Service Routine (ISR).
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-cyw43907-gpio/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cat4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cyw43907, pwm, mtb-flow">
    <name>PWM Square Wave</name>
    <id>mtb-example-cyw43907-pwm</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-cyw43907-pwm</uri>
    <description><![CDATA[This code example generates a square wave using the PWM driver. An LED connected to the PWM output pin blinks at 1000 Hz with Variable Duty Cycle.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-cyw43907-pwm/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cat4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cyw43907,tcp,client,wifi,mtb-flow">
    <name>TCP Client</name>
    <id>mtb-example-cyw43907-tcp-client</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-cyw43907-tcp-client</uri>
    <description><![CDATA[This code example demonstrates the implementation of a TCP client.
    The example establishes a connection with a remote TCP server and based on the command received from the TCP server,
    turns the user LED ON or OFF.
    Additionally, this code example can be configured to bring up the Wi-Fi device either in STA interface or in Soft AP interface mode.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-cyw43907-tcp-client/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cat4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cyw43907,tcp,server,wifi,mtb-flow">
    <name>TCP Server</name>
    <id>mtb-example-cyw43907-tcp-server</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-cyw43907-tcp-server</uri>
    <description><![CDATA[This code example demonstrates the implementation of a TCP server.
    In this example, the TCP server establishes a connection with a TCP client. Once the connection completes successfully, the  server allows the user to send LED ON/OFF command to the TCP client and the client responds by sending an acknowledgement message to the server. Additionally, this code example can be configured to bring up the Wi-Fi device either in STA interface or in Soft AP interface mode.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-cyw43907-tcp-server/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cat4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cyw43907,secure,tcp,client,wifi,mtb-flow">
    <name>Secure TCP Client</name>
    <id>mtb-example-cyw43907-secure-tcp-client</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-cyw43907-secure-tcp-client</uri>
    <description><![CDATA[This code example demonstrates the implementation of a secure TCP client.
    In this example, a TCP client establishes a secure connection with a TCP server through a SSL handshake.
    Once the SSL handshake completes successfully, the TCP client turns ON or OFF the user LED based on the command received    from the TCP server. The Wi-Fi device can be brought up in either STA or Soft AP interface mode.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-cyw43907-secure-tcp-client/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cat4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cyw43907,secure,tcp,server,wifi,mtb-flow">
    <name>Secure TCP Server</name>
    <id>mtb-example-cyw43907-secure-tcp-server</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-cyw43907-secure-tcp-server</uri>
    <description><![CDATA[This code example demonstrates the implementation of a secure TCP server.
    In this example, the TCP server establishes a secure connection with a TCP client through SSL handshake.
    Once the SSL handshake completes successfully, the server allows the user to send LED ON/OFF command to the TCP client;
    the client responds by sending an acknowledgement message to the server.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-cyw43907-secure-tcp-server/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cat4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cyw43907,scan,wifi,mtb-flow">
    <name>Wi-Fi Scan</name>
    <id>mtb-example-cyw43907-wifi-scan</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-cyw43907-wifi-scan</uri>
    <description><![CDATA[This example demonstrates how to configure different scan filters provided in the Wi-Fi connection manager (WCM) middleware and
    scan for the available Wi-Fi networks. The example initializes the Wi-Fi device, starts a Wi-Fi scan without any filter, and prints the results on the serial terminal.
    The example starts a scan every three seconds after the previous scan completes.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-cyw43907-wifi-scan/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cat4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cyw43907,i2c,mtb-flow">
    <name>I2C Master</name>
    <id>mtb-example-cyw43907-i2c</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-cyw43907-i2c</uri>
    <description><![CDATA[This code example demonstrates the I2C (HAL) operation in CYW43907 MCU. The application uses I2C to read data from CY8CKIT-032 PSoC&#8482; Analog Front End (AFE) Arduino Shield and
    display the result in the UART serial Terminal every time the user presses the button.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-cyw43907-i2c/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cat4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cyw43907,mqtt,client,wifi,mtb-flow">
    <name>MQTT Client</name>
    <id>mtb-example-cyw43907-mqtt-client</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-cyw43907-mqtt-client</uri>
    <description><![CDATA[This code example demonstrates implementing an MQTT client using the MQTT client library. The library uses the AWS IoT device SDK MQTT client library that includes an MQTT 3.1.1 client.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-cyw43907-mqtt-client/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cat4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cyw43907,https,wifi,server,secure,mtb-flow">
    <name>Secure HTTP Server</name>
    <id>mtb-example-cyw43907-secure-http-server</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-cyw43907-secure-http-server</uri>
    <description><![CDATA[This code example demonstrates the implementation of an HTTPS server with AIROC&#8482; CYW43907 MCU.It employs the HTTPS server middleware library,
    which takes care of all the underlying socket connections with the HTTPS client.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-cyw43907-secure-http-server/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cat4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cyw43907,udp,client,wifi,mtb-flow">
    <name>UDP Client</name>
    <id>mtb-example-cyw43907-udp-client</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-cyw43907-udp-client</uri>
    <description><![CDATA[This code example demonstrates the implementation of a UDP client with CYW43907 connectivity device.
    The example establishes a connection with a remote UDP server, and based on the command received from the UDP server,
    turns the user LED ON or OFF.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-cyw43907-udp-client/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cat4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cyw43907,udp,server,wifi,mtb-flow">
    <name>UDP Server</name>
    <id>mtb-example-cyw43907-udp-server</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-cyw43907-udp-server</uri>
    <description><![CDATA[In this code example, the UDP server waits for the UDP client to establish connection.
    Once the connection is established, the server allows the user to send the LED ON/OFF command to the UDP client through a button press;
    the client responds by sending an acknowledgement message to the server.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-cyw43907-udp-server/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cat4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,anycloud,bluetooth,mqtt,client,wifi,aws,iot,mosquitto" req_capabilities_v2="[cy8ceval_062_mur_43439m2, cy8ckit_062s2_43012]">
    <name>Bluetooth LE IoT Gateway</name>
    <id>mtb-example-anycloud-ble-wifi-gateway</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/Infineon/mtb-example-anycloud-ble-wifi-gateway</uri>
    <description><![CDATA[This code example demonstrates implementing a Bluetooth&#174; IoT gateway using the MQTT client library and Bluetooth&#174; LE host stack for Infineon connectivity devices. The MQTT client library uses the AWS IoT device SDK that includes an MQTT 3.1.1 client as well as libraries specific to AWS IoT such as Thing Shadows. The Bluetooth&#174; Mesh stack runs with FreeRTOS in the server and client model.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-ble-wifi-gateway/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license.<br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi bt cyw43xxx led switch anycloud</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
    </versions>
  </app>
</apps>
