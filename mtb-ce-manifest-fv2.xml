<apps version="2.0">
  <app keywords="starter,template,empty,blank,mtb-flow" req_capabilities_v2="[psoc6,xmc7000,t2gbh,cyw920829m2evb_01,cat1d]">
    <name>Empty App</name>
    <id>mtb-example-empty-app</id>
    <category>Getting Started</category>
    <uri>https://github.com/Infineon/mtb-example-empty-app</uri>
    <description><![CDATA[This empty application provides a template for creating applications.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-empty-app/blob/master/README.md">README on GitHub</a>.]]></description>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 4.X release</num>
        <commit>latest-v4.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>4.0.0 release</num>
        <commit>release-v4.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="led,starter,hello world,mtb-flow" req_capabilities_v2="hal led [psoc6,xmc7000,t2gbh,] [flash_8384k,flash_2048k,flash_1024k,flash_512k,flash_256k,flash_832k,flash_448k,cy8ckit_064b0s2_4343w]">
    <name>Hello World</name>
    <id>mtb-example-hal-hello-world</id>
    <category>Getting Started</category>
    <uri>https://github.com/Infineon/mtb-example-hal-hello-world</uri>
    <description><![CDATA[This code example demonstrates simple UART communication by printing a "Hello World" message on a terminal and blinks an LED using a Timer resource.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-hal-hello-world/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 4.X release</num>
        <commit>latest-v4.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>4.0.0 release</num>
        <commit>release-v4.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.1 release</num>
        <commit>release-v2.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,led,lptimer,mtb-flow" req_capabilities_v2="psoc6 led low_power">
    <name>Low-Power Timer</name>
    <id>mtb-example-psoc6-lptimer</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-lptimer</uri>
    <description><![CDATA[This example explains how to set up a low-power timer using the LPTimer HAL resource to measure the timing between events in free-running mode on PSoC&#8482; 6 MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-lptimer/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led low_power</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,fault handling,mtb-flow" req_capabilities_v2="psoc6">
    <name>Fault Handling</name>
    <id>mtb-example-psoc6-fault-handling</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-fault-handling</uri>
    <description><![CDATA[This example demonstrates the fault handling functionality of PSoC&#8482; 6 MCU using Peripheral Driver Library (PDL) System Library (SysLib).
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-fault-handling/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.1 release</num>
        <commit>release-v2.1.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="wdt,mtb-flow" req_capabilities_v2="[psoc6,xmc7000,t2gbh]">
    <name>Watchdog Timer</name>
    <id>mtb-example-psoc6-wdt</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-wdt</uri>
    <description><![CDATA[This example explains how to set up a Watchdog Timer (WDT) using the WDT HAL resource. The WDT resets the device if it is not serviced or "kicked" within the configured timeout interval. This helps in recovering the program from an unintended lock up.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-wdt/blob/master/README.md">README on GitHub</a>.]]></description>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,mcwdt,mtb-flow" req_capabilities_v2="psoc6 capsense [std_crypto,flash_2048k,flash_1024k,flash_512k,flash_256k]">
    <name>Free-Running Multi-Counter Watchdog Timer</name>
    <id>mtb-example-psoc6-mcwdt</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-mcwdt</uri>
    <description><![CDATA[This example explains how to set up a Multi-Counter Watchdog Timer (MCWDT) using the MCWDT PDL resource to measure the timing between events in free-running mode on PSoC&#8482; 6 MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-mcwdt/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 capsense</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,led,pwm,square wave,frequency,duty cycle,blinky,blinking" req_capabilities_v2="hal led [psoc6,xmc7000,t2gbh,cyw920829m2evb_01]">
    <name>PWM Square Wave</name>
    <id>mtb-example-hal-pwm-square-wave</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-hal-pwm-square-wave</uri>
    <description><![CDATA[This code example generates a square wave using the PWM driver. An LED connected to the PWM output pin blinks at 2 Hz.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-hal-pwm-square-wave/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,led,capsense,button,slider,i2c,tuner,mtb-flow" req_capabilities_v2="psoc6 led capsense_button capsense_linear_slider [flash_2048k,flash_1024k,flash_512k,flash_256k,cy8ckit_064b0s2_4343w]">
    <name>CAPSENSE Buttons and Slider</name>
    <id>mtb-example-psoc6-capsense-buttons-slider</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-capsense-buttons-slider</uri>
    <description><![CDATA[This code example features a 5-segment CAPSENSE&#8482; slider and two CAPSENSE&#8482; buttons. Button 0 turns the LED on, Button 1 turns the LED off and the slider controls the brightness of the LED. The code example also demonstrates interfacing with Tuner GUI using I2C interface.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-capsense-buttons-slider/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led capsense_button capsense_linear_slider</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 4.X release</num>
        <commit>latest-v4.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>4.0.0 release</num>
        <commit>release-v4.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,led,capsense,button,slider,i2c,tuner,rtos,mtb-flow" req_capabilities_v2="psoc6 led capsense_button capsense_linear_slider [flash_2048k,flash_1024k,flash_512k,flash_256k,cy8ckit_064b0s2_4343w]">
    <name>CAPSENSE Buttons and Slider FreeRTOS</name>
    <id>mtb-example-psoc6-capsense-buttons-slider-freertos</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-capsense-buttons-slider-freertos</uri>
    <description><![CDATA[This code example features a 5-segment CAPSENSE&#8482; slider and two CAPSENSE&#8482; buttons. Button 0 turns the LED on, Button 1 turns the LED off and the slider controls the brightness of the LED. The code example also demonstrates interfacing with Tuner GUI using I2C interface.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-capsense-buttons-slider-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led capsense_button capsense_linear_slider</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 4.X release</num>
        <commit>latest-v4.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>4.0.0 release</num>
        <commit>release-v4.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="uart,transmit,receive,mtb-flow" req_capabilities_v2="hal led [psoc6,xmc7000,t2gbh]">
    <name>UART Transmit and Receive</name>
    <id>mtb-example-psoc6-uart-transmit-receive</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-uart-transmit-receive</uri>
    <description><![CDATA[This example demonstrates the UART (HAL) transmit and receive operation.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-uart-transmit-receive/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,uart,transmit,receive,dma,mtb-flow" req_capabilities_v2="psoc6 led [cy8ceval_062s2,cy8ceval_062_s2_lai_4373m2,cy8ckit_062_ble,cy8ckit_062_wifi_bt,cy8ckit_062s2_43012,cy8cproto_062_4343w,cy8cproto_062s3_4343w,cy8cproto_063_ble,cysbsyskit_01,cysbsyskit_dev_01,cy8ckit_062s4,cyw9p62s1_43012evb_01,cyw9p62s1_43438evb_01]">
    <name>SCB UART Transmit and Receive using DMA</name>
    <id>mtb-example-psoc6-uart-transmit-receive-dma</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-uart-transmit-receive-dma</uri>
    <description><![CDATA[This example demonstrates the UART transmit and receive operation using DMA in PSoC&#8482; 6 MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-uart-transmit-receive-dma/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.4.0 release</num>
        <commit>release-v2.4.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.3.0 release</num>
        <commit>release-v2.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="i2c,master,slave,mtb-flow" req_capabilities_v2="hal led [psoc6,xmc7000,t2gbh]">
    <name>I2C Master</name>
    <id>mtb-example-psoc6-i2c-master</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-i2c-master</uri>
    <description><![CDATA[This example demonstrates the use of I2C (HAL) resource in Master mode.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-i2c-master/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.3.0 release</num>
        <commit>release-v2.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="i2c,ezi2c,master,slave,mtb-flow" req_capabilities_v2="hal led [psoc6,xmc7000,t2gbh]">
    <name>I2C Master EzI2C Slave</name>
    <id>mtb-example-psoc6-i2c-master-ezi2c-slave</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-i2c-master-ezi2c-slave</uri>
    <description><![CDATA[This example demonstrates the use of I2C (HAL) resource in Master mode with an EzI2C slave.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-i2c-master-ezi2c-slave/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.3.0 release</num>
        <commit>release-v2.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="i2c,slave,mtb-flow" req_capabilities_v2="hal led [psoc6,xmc7000,t2gbh]">
    <name>I2C Slave Using Callbacks</name>
    <id>mtb-example-psoc6-i2c-slave-callback</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-i2c-slave-callback</uri>
    <description><![CDATA[This example demonstrates the operation of the I2C (HAL) resource in Slave mode using callbacks.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-i2c-slave-callback/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="spi,master,slave,mtb-flow" req_capabilities_v2="hal led [psoc6,xmc7000,t2gbh]">
    <name>SPI Master</name>
    <id>mtb-example-psoc6-spi-master</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-spi-master</uri>
    <description><![CDATA[This example demonstrates the use of SPI (HAL) resource in Master mode.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-spi-master/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.1 release</num>
        <commit>release-v2.1.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,spi,master,slave,dma,mtb-flow" req_capabilities_v2="psoc6 led [cy8ceval_062s2,cy8ceval_062_s2_lai_4373m2,cy8ckit_062_ble,cy8ckit_062_wifi_bt,cy8ckit_062s2_43012,cy8cproto_062_4343w,cy8cproto_062s3_4343w,cy8cproto_063_ble,cysbsyskit_01,cysbsyskit_dev_01,cy8ckit_062s4,cyw9p62s1_43012evb_01,cyw9p62s1_43438evb_01]">
    <name>SCB SPI Master DMA</name>
    <id>mtb-example-psoc6-spi-master-dma</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-spi-master-dma</uri>
    <description><![CDATA[This example demonstrates the use of PSoC&#8482; 6 MCU Serial Communication Block (SCB) resource in SPI Master mode using DMA.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-spi-master-dma/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.3.0 release</num>
        <commit>release-v2.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="oob,led,starter,hello world,mtb-flow" req_capabilities_v2="hal led uart switch [xmc7000,t2gbh] [kit_xmc72_evk,kit_t2g_b_h_evk]">
    <name>XMC7000 OOB Demo</name>
    <id>mtb-example-xmc7000-oob-demo</id>
    <category>Getting Started</category>
    <uri>https://github.com/Infineon/mtb-example-xmc7000-oob-demo</uri>
    <description><![CDATA[This example is the out-of-the-box (OOB) demo project for the KIT_XMC72_EVK XMC7200 evaluation kit which includes - Hello world, PWM square-wave output, GPIO interrupt, SAR ADC basics, XMC&#8482; MCU power modes, QSPI memory read/write, and CAN FD loopback code examples.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc7000-oob-demo/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal led uart switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pwm,tcpwm,timer,mtb-flow" req_capabilities_v2="hal led [xmc7000,t2gbh]">
    <name>TCPWM Timer</name>
    <id>mtb-example-hal-tcpwm-timer</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-hal-tcpwm-timer</uri>
    <description><![CDATA[This code example generates an interrupt every second with the timer driver, and toggles the user LED when a timer interrupt is generated.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-hal-tcpwm-timer/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pwm,tcpwm,dead time,mtb-flow" req_capabilities_v2="hal [xmc7000,t2gbh]">
    <name>TCPWM Dead Time Mode</name>
    <id>mtb-example-hal-tcpwm-dt</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-hal-tcpwm-dt</uri>
    <description><![CDATA[This code example shows TCPWM dead-time mode function. PWM line and PWM COMPL pins output the 1-kHz frequency wave and 1-kHz frequency wave with PWM leftalign 250 us in PWM dead-time mode.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-hal-tcpwm-dt/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="led,smartio,smart io,mtb-flow" req_capabilities_v2="switch led smart_io [xmc7000,t2gbh]">
    <name>Smart IO with GPIO</name>
    <id>mtb-example-pdl-xmc7000-smartio-gpio</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pdl-xmc7000-smartio-gpio</uri>
    <description><![CDATA[This example uses the smart I/O peripheral in XMC7000 MCU to connect the button input pin to an output pin to toggle an external LED. There is no CPU usage except for the initialization of GPIO and smart I/O.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pdl-xmc7000-smartio-gpio/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>switch led smart_io</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="led,button,mtb-flow" req_capabilities_v2="switch led [xmc7000,t2gbh]">
    <name>GPIO Pins</name>
    <id>mtb-example-pdl-xmc7000-gpio-pins</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pdl-xmc7000-gpio-pins</uri>
    <description><![CDATA[This example demonstrates the GPIO pin operation on the XMC7000 MCU, using Eclipse IDE for ModusToolbox&#8482;. This includes reading, writing, interrupts, and full port configurations.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pdl-xmc7000-gpio-pins/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>switch led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pwm,tcpwm,asymmetric,mtb-flow" req_capabilities_v2="uart [xmc7000,t2gbh]">
    <name>Asymmetric PWM Generation</name>
    <id>mtb-example-pdl-xmc7000-pwm-dual-compare-capture</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pdl-xmc7000-pwm-dual-compare-capture</uri>
    <description><![CDATA[This code example demonstrates the generation of asymmetric PWM signals using two compare/capture registers available in the TCPWM block of the XMC7000 MCU devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pdl-xmc7000-pwm-dual-compare-capture/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>uart</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="uart,transmit,receive,dma,mtb-flow" req_capabilities_v2="led [xmc7000,t2gbh]">
    <name>SCB UART Transmit and Receive using DMA</name>
    <id>mtb-example-pdl-xmc7000-uart-transmit-receive-dma</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pdl-xmc7000-uart-transmit-receive-dma</uri>
    <description><![CDATA[This example demonstrates the UART transmit and receive operation using DMA in XMC7000 MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pdl-xmc7000-uart-transmit-receive-dma/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="systick,timer,toggle,led,mtb-flow" req_capabilities_v2="led [xmc7000,t2gbh]">
    <name>Toggle LED with SysTick Timer</name>
    <id>mtb-example-pdl-xmc7000-systick-led</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pdl-xmc7000-systick-led</uri>
    <description><![CDATA[This code example demonstrates how to use the SysTick timer to generate a timer interrupt on XMC7000 MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pdl-xmc7000-systick-led/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cryptography,sha2,message digest,hash,mtb-flow" req_capabilities_v2="uart [xmc7000,t2gbh]">
    <name>Cryptography SHA Demonstration</name>
    <id>mtb-example-pdl-xmc7000-crypto-sha</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pdl-xmc7000-crypto-sha</uri>
    <description><![CDATA[This code example shows how to generate a 32-byte hash value or message digest for an arbitrary user input message with the SHA2 algorithm using the Cryptographic hardware block in the XMC7000 MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pdl-xmc7000-crypto-sha/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>uart</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cryptography,aes,mtb-flow" req_capabilities_v2="uart [xmc7000,t2gbh]">
    <name>Cryptography AES Demonstration</name>
    <id>mtb-example-pdl-xmc7000-crypto-aes</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pdl-xmc7000-crypto-aes</uri>
    <description><![CDATA[This code example encrypts and decrypts user input data using the AES algorithm using a 128-bit key. The encrypted and decrypted data are displayed on a UART terminal emulator.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pdl-xmc7000-crypto-aes/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>uart</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="canfd,can,mtb-flow" req_capabilities_v2="led [xmc7000,t2gbh] [kit_xmc72_evk,kit_t2g_b_h_evk]">
    <name>CAN FD</name>
    <id>mtb-example-pdl-xmc7000-canfd</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pdl-xmc7000-canfd</uri>
    <description><![CDATA[This code example demonstrates how to use controller area network flexible data-rate (CAN FD) in XMC7000 MCU devices. In this example, the CAN Node-1 sends a CAN FD or standard frame to CAN Node-2 on pressing the user button and vice versa. Both the CAN nodes log the received data over UART serial terminal. Each time a CAN frame is received, the user LED toggles.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pdl-xmc7000-canfd/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="tcpwm,counter,mtb-flow" req_capabilities_v2="led [xmc7000,t2gbh]">
    <name>TCPWM Counter</name>
    <id>mtb-example-pdl-xmc7000-tcpwm-counter</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pdl-xmc7000-tcpwm-counter</uri>
    <description><![CDATA[This code example demonstrates how to use the tcpwm counter on the XMC7000 MCU. The counter is started by pwm signal and work with 200KHz clock frequency. Enable the counter CC0 match interrupt, when counter up to CC0 match value generates the interrupt to toggle user LED.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pdl-xmc7000-tcpwm-counter/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="gpio,led,freertos,mtb-flow" req_capabilities_v2="led [xmc7000,t2gbh]">
    <name>FreeRTOS Blinky</name>
    <id>mtb-example-xmc7000-blinky-freertos</id>
    <category>Getting Started</category>
    <uri>https://github.com/Infineon/mtb-example-xmc7000-blinky-freertos</uri>
    <description><![CDATA[This code example demonstrates blinking LED functionality implemented by FreeRTOS tasks on the XMC7000 MCU devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc7000-blinky-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="spi,master,slave,dma,mtb-flow" req_capabilities_v2="led [xmc7000,t2gbh]">
    <name>SCB SPI Master DMA</name>
    <id>mtb-example-pdl-xmc7000-spi-master-dma</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pdl-xmc7000-spi-master-dma</uri>
    <description><![CDATA[This example demonstrates the use of the SPI Serial Communication Block (SCB) resource for XMC7000 MCU in master and slave mode using DMA.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pdl-xmc7000-spi-master-dma/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="led,power,sleep,mtb-flow" req_capabilities_v2="led low_power [xmc7000,t2gbh]">
    <name>Switching Power Modes</name>
    <id>mtb-example-xmc7000-switching-power-modes</id>
    <category>Getting Started</category>
    <uri>https://github.com/Infineon/mtb-example-xmc7000-switching-power-modes</uri>
    <description><![CDATA[This example demonstrates how to transition XMC7000 MCU to the Active, Sleep, DeepSleep and Hibernate power states, and how to wake up and return to Active state.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc7000-switching-power-modes/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>led low_power</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="low power,sleep,mtb-flow" req_capabilities_v2="uart low_power [xmc7000,t2gbh]">
    <name>Low-Power Wakeup from RTC Alarm</name>
    <id>mtb-example-xmc7000-low-power-wakeup-from-rtc-alarm</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc7000-low-power-wakeup-from-rtc-alarm</uri>
    <description><![CDATA[This code example demonstrates XMC7000 MCU how to enter the DeepSleep and Hibernate mode, and wake-up using the RTC alarm.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc7000-low-power-wakeup-from-rtc-alarm/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>uart low_power</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="multicore,starter,template,empty,blank,mtb-flow" req_capabilities_v2="[xmc7000,t2gbh]">
    <name>Multicore Empty App</name>
    <id>mtb-example-xmc7000-multicore-empty-app</id>
    <category>Getting Started</category>
    <uri>https://github.com/Infineon/mtb-example-xmc7000-multicore-empty-app</uri>
    <description><![CDATA[This empty application provides a multicore template for creating XMC7000 MCU applications.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc7000-multicore-empty-app/blob/master/README.md">README on GitHub</a>.]]></description>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="multicore,ipc,mtb-flow,pipes" req_capabilities_v2="multi_core [xmc7000,t2gbh]">
    <name>Multicore IPC Pipes</name>
    <id>mtb-example-xmc7000-multicore-ipc-pipes</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc7000-multicore-ipc-pipes</uri>
    <description><![CDATA[This example demonstrates how to use the inter-processor communication (IPC) driver to implement a message pipe in XMC7000 MCU. The pipe is used to send messages between CPUs.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc7000-multicore-ipc-pipes/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>multi_core</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mcwdt,mtb-flow" req_capabilities_v2="uart [xmc7000,t2gbh]">
    <name>MCWDT Interrupt</name>
    <id>mtb-example-pdl-xmc7000-mcwdt</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pdl-xmc7000-mcwdt</uri>
    <description><![CDATA[This example shows how to configure XMC7000 MCWDT Subcounter0/1 and Subcounter2 operation with interrupt.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pdl-xmc7000-mcwdt/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>uart</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="lvd,interrupt,mtb-flow" req_capabilities_v2="led [xmc7000,t2gbh]">
    <name>LVD Interrupt</name>
    <id>mtb-example-pdl-xmc7000-lvd-interrupt</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pdl-xmc7000-lvd-interrupt</uri>
    <description><![CDATA[This code example shows how to configure low-voltage detection (LVD) in XMC7000 MCU to monitor VDDD and generate an interrupt when VDDD drops below the configured threshold.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pdl-xmc7000-lvd-interrupt/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="emulated,eeprom,flash,mtb-flow" req_capabilities_v2="led uart [xmc7000,t2gbh]">
    <name>Emulated EEPROM</name>
    <id>mtb-example-xmc7000-emulated-eeprom</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc7000-emulated-eeprom</uri>
    <description><![CDATA[This code example demonstrates emulation of EEPROM behavior in flash memory of XMC7000 MCU using emeeprom middleware.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc7000-emulated-eeprom/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>led uart</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="fault handling,mtb-flow" req_capabilities_v2="uart [xmc7000,t2gbh]">
    <name>Fault Handling</name>
    <id>mtb-example-pdl-xmc7000-fault-handling</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pdl-xmc7000-fault-handling</uri>
    <description><![CDATA[This example demonstrates the fault handling functionality of XMC7000 MCU using Peripheral Driver Library (PDL) System Library (SysLib).
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pdl-xmc7000-fault-handling/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>uart</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="qspi,spi,nor,flash,smif,serial-flash,mtb-flow" req_capabilities_v2="hal uart led qspi nor_flash [xmc7000,t2gbh]">
    <name>QSPI Flash Read Write</name>
    <id>mtb-example-hal-qspi-readwrite</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-hal-qspi-readwrite</uri>
    <description><![CDATA[This example demonstrates interfacing with an external NOR flash memory in Quad SPI (QSPI) mode using the serial memory interface (SMIF) block. This example uses the HAL QSPI driver to access the external NOR flash memory.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-hal-qspi-readwrite/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal uart led qspi nor_flash</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,adc,hal" req_capabilities_v2="hal uart [xmc7000,t2gbh]">
    <name>ADC basic</name>
    <id>mtb-example-xmc7000-adc-basic</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc7000-adc-basic</uri>
    <description><![CDATA[This example demonstrates use of the ADC (Analog to Digital Converter) HAL driver to perform voltage measurements in XMC7000 MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc7000-adc-basic/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal uart</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="evtgen,event generator,mtb-flow" req_capabilities_v2="uart [xmc7000,t2gbh]">
    <name>EVTGEN trigger ADC</name>
    <id>mtb-example-pdl-xmc7000-evtgen-active-trigger-adc</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pdl-xmc7000-evtgen-active-trigger-adc</uri>
    <description><![CDATA[This code example demonstrates how to use the XMC7000 MCU event generator (EVTGEN) resource to trigger ADC conversion in active power mode.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pdl-xmc7000-evtgen-active-trigger-adc/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>uart</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,flash,code flash,hal" req_capabilities_v2="hal uart [xmc7000,t2gbh]">
    <name>Code Flash Sector Data Updating</name>
    <id>mtb-example-hal-code-flash-sector-data-updating</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-hal-code-flash-sector-data-updating</uri>
    <description><![CDATA[This code example demonstrates the use of the Flash HAL driver to perform code flash Read/Write/Erase basic operate and update sector data online. The running steps logs on a UART terminal emulator.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-hal-code-flash-sector-data-updating/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal uart</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,eink,emwin,freertos,display,mtb-flow" req_capabilities_v2="psoc6 led arduino switch">
    <name>emWin E-Ink FreeRTOS</name>
    <id>mtb-example-psoc6-emwin-eink-freertos</id>
    <category>Graphics</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-emwin-eink-freertos</uri>
    <description><![CDATA[This code example demonstrates displaying 2D graphics on an E-Ink display using EmWin graphics library in FreeRTOS.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-emwin-eink-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led arduino switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,oled,emwin,freertos,display,mtb-flow" req_capabilities_v2="psoc6 arduino switch">
    <name>emWin OLED FreeRTOS</name>
    <id>mtb-example-psoc6-emwin-oled-freertos</id>
    <category>Graphics</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-emwin-oled-freertos</uri>
    <description><![CDATA[This code example demonstrates displaying 2D graphics on an OLED display using EmWin graphics library in FreeRTOS.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-emwin-oled-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 arduino switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pwm,tcpwm,asymmetric,mtb-flow" req_capabilities_v2="uart [cy8ckit_062s4]">
    <name>Asymmetric PWM Generation</name>
    <id>mtb-example-psoc6-pwm-dual-compare-capture</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-pwm-dual-compare-capture</uri>
    <description><![CDATA[This code example demonstrates the generation of asymmetric PWM signals using two compare/capture registers available in the TCPWM block of the PSoC&#8482; 6 MCU devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-pwm-dual-compare-capture/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>uart</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,cryptography,sha2,message digest,hash,mtb-flow" req_capabilities_v2="uart [psoc6]">
    <name>Cryptography SHA Demonstration</name>
    <id>mtb-example-psoc6-crypto-sha</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-crypto-sha</uri>
    <description><![CDATA[This code example shows how to generate a 32-byte hash value or message digest for an arbitrary user input message with the SHA2 algorithm using the Cryptographic hardware block.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-crypto-sha/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>uart</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,csdadc,mtb-flow" req_capabilities_v2="psoc6 capsense">
    <name>CSDADC</name>
    <id>mtb-example-psoc6-csdadc</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-csdadc</uri>
    <description><![CDATA[This example demonstrates the usage of CSD analog-to-digital converter (ADC) in PSoC&#8482; 6 MCU. CSDADC measures the external voltage and displays the conversion result the terminal application.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-csdadc/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 capsense</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,dual cpu,starter,template,empty,blank,mtb-flow" req_capabilities_v2="psoc6 multi_core">
    <name>Dual-CPU Empty PSoC6 App</name>
    <id>mtb-example-psoc6-dual-cpu-empty-app</id>
    <category>Getting Started</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-dual-cpu-empty-app</uri>
    <description><![CDATA[This empty application provides a template for creating dual-CPU applications using PSoC&#8482; 6 devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-dual-cpu-empty-app/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 multi_core</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>2.3.0 release</num>
        <commit>release-v2.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,pdm,pcm,mtb-flow,audio,microphone" req_capabilities_v2="psoc6 pdm">
    <name>PDM PCM Audio</name>
    <id>mtb-example-psoc6-pdm-pcm</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-pdm-pcm</uri>
    <description><![CDATA[This example demonstrates how to use the pulse-density modulation/pulse-code modulation (PDM/PCM) hardware block in PSoC&#8482; 6 MCU with a digital microphone.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-pdm-pcm/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 pdm</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,i2s,mtb-flow,audio,codec" req_capabilities_v2="psoc6 i2s">
    <name>I2S Audio</name>
    <id>mtb-example-psoc6-i2s</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-i2s</uri>
    <description><![CDATA[This example demonstrates how to use the I2S hardware block in PSoC&#8482; 6 MCU to interface with an audio codec.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-i2s/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 i2s</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,ipc,mtb-flow,pipes">
    <name>Dual-CPU IPC Pipes</name>
    <id>mtb-example-psoc6-dual-cpu-ipc-pipes</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-dual-cpu-ipc-pipes</uri>
    <description><![CDATA[This example demonstrates how to use the inter-processor communication (IPC) driver to implement a message pipe in PSoC&#8482; 6 MCU. The pipe is used to send messages between CPUs.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-dual-cpu-ipc-pipes/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 multi_core switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>2.3.0 release</num>
        <commit>release-v2.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,ipc,mtb-flow,semaphore" req_capabilities_v2="psoc6 multi_core led switch [capsense,flash_2048k]">
    <name>Dual-CPU IPC Semaphore</name>
    <id>mtb-example-psoc6-dual-cpu-ipc-sema</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-dual-cpu-ipc-sema</uri>
    <description><![CDATA[This example demonstrates how to use the inter-processor communication (IPC) driver to implement a semaphore in PSoC&#8482; 6 MCU. The semaphore is used as a lock to control access to a resource shared by the CPUs and synchronize the initialization instructions.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-dual-cpu-ipc-sema/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 multi_core led switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 4.X release</num>
        <commit>latest-v4.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>4.0.0 release</num>
        <commit>release-v4.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>2.3.0 release</num>
        <commit>release-v2.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,mtb-flow,ble,bluetooth,btstack,freertos,ess,4343w,43012" req_capabilities_v2="psoc6 bt led cyw43xxx [flash_2048k, flash_1024k, flash_512k, cy8ckit_064b0s2_4343w]">
    <name>Bluetooth LE Environmental Sensing Service</name>
    <id>mtb-example-btstack-freertos-ess</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/Infineon/mtb-example-btstack-freertos-ess</uri>
    <description><![CDATA[This code example demonstrates the implementation of a simple Bluetooth&#174; Low Energy Environmental Sensing Profile. It shows how to send environmental parameters like temperature by sending simulated temperature values over the Bluetooth&#174; Low Energy connection using the AIROC&#8482; Wi-Fi & Bluetooth&#174; combos supported in AnyCloud-SDK.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-btstack-freertos-ess/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 bt led cyw43xxx</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 4.X release</num>
        <commit>latest-v4.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>4.0.0 release</num>
        <commit>release-v4.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.1.0 release</num>
        <commit>release-v3.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,mtb-flow,ble,bluetooth,btstack,freertos,beacon,eddystone,multi-adv,4343w,43012" req_capabilities_v2="psoc6 bt cyw43xxx [flash_2048k, flash_1024k, flash_512k, cy8ckit_064b0s2_4343w]">
    <name>Bluetooth LE Multi Beacon</name>
    <id>mtb-example-btstack-freertos-multi-beacon</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/Infineon/mtb-example-btstack-freertos-multi-beacon</uri>
    <description><![CDATA[This code example demonstrates the implementation of a beacon which advertises Eddystone and
iBeacon UUID data.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-btstack-freertos-multi-beacon/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 bt cyw43xxx</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 4.X release</num>
        <commit>latest-v4.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>4.0.0 release</num>
        <commit>release-v4.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.1.0 release</num>
        <commit>release-v3.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,mtb-flow,ble,bluetooth,anycloud,onboarding,4343w,43012">
    <name>Wi-Fi Onboarding Using Bluetooth LE</name>
    <id>mtb-example-anycloud-ble-wifi-onboarding</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-ble-wifi-onboarding</uri>
    <description><![CDATA[This code example demonstrates WiFi Onboarding using Bluetooth&#174; Low Energy.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-ble-wifi-onboarding/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 wifi bt low_power anycloud</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.2.0 release</num>
        <commit>release-v3.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.1.0 release</num>
        <commit>release-v3.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,sar,adc,op amp,mtb-flow" req_capabilities_v2="psoc6 cy8ckit_062s4">
    <name>Low-Power Analog Front End using OpAmp and SAR ADC</name>
    <id>mtb-example-psoc6-low-power-analog-front-end</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-low-power-analog-front-end</uri>
    <description><![CDATA[This example demonstrates the low-power analog features of PSoC&#8482; 6 MCU using an OpAmp and SAR ADC. PDL is used for the application firmware. This example is supported only for the devices like CY8C62x4 which have an OpAmp and SAR ADC capable of operating in System Deep Sleep mode.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-low-power-analog-front-end/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 cy8ckit_062s4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,sar,analog,sensor,mtb-flow" req_capabilities_v2="psoc6 cy8ckit_062s4">
    <name>SAR ADC Low Power Sensing - Thermistor and ALS</name>
    <id>mtb-example-psoc6-low-power-sar-adc-thermistor-als</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-low-power-sar-adc-thermistor-als</uri>
    <description><![CDATA[This example demonstrates low-power sensing of a thermistor and ambient light sensor (ALS) using the SAR ADC of PSoC&#8482; 6 MCU. PDL is used for the application firmware. This example is supported only for the devices like CY8C62x4 which have a SAR ADC capable of operating in System Deep Sleep mode.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-low-power-sar-adc-thermistor-als/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 cy8ckit_062s4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,capsense,tuner,ble,server,tuning,mtb-flow">
    <name>CAPSENSE Tuning Over Bluetooth LE - Server</name>
    <id>mtb-example-psoc6-ble-capsense-tuner-server</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-ble-capsense-tuner-server</uri>
    <description><![CDATA[This code example demonstrates how to monitor the CAPSENSE&#8482; data and tune the CAPSENSE&#8482; sensors over Bluetooth&#174; Low Energy communication with CAPSENSE&#8482; Tuner GUI using PSoC&#8482; 6 Bluetooth&#174; Low Energy MCU. This is intended to be used with the CAPSENSE&#8482; Tuning Over Bluetooth&#174; LE - Client example.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-ble-capsense-tuner-server/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led ble capsense_button capsense_linear_slider</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,capsense,tuner,ble,client,tuning,ezi2c,mtb-flow">
    <name>CAPSENSE Tuning Over Bluetooth LE - Client</name>
    <id>mtb-example-psoc6-ble-capsense-tuner-client</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-ble-capsense-tuner-client</uri>
    <description><![CDATA[This code example demonstrates how to monitor the CAPSENSE&#8482; data and tune the CAPSENSE&#8482; sensors over Bluetooth&#174; Low Energy communication with CAPSENSE&#8482; Tuner GUI using PSoC&#8482; 6 Bluetooth&#174; Low Energy MCU. This is intended to be used with the CAPSENSE&#8482; Tuning Over Bluetooth&#174; LE - Server example.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-ble-capsense-tuner-client/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led ble</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,sar,adc,simultaneous sampling,mtb-flow" req_capabilities_v2="psoc6 cy8ckit_062s4">
    <name>SAR ADC Simultaneous Sampling</name>
    <id>mtb-example-psoc6-sar-adc-simultaneous-sampling</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-sar-adc-simultaneous-sampling</uri>
    <description><![CDATA[This code example demonstrates simultaneous sampling of two SAR ADCs. The simultaneouly sampled input voltages by SAR ADCs are displayed on UART. PDL is used for the application firmware. This example is supported only for the devices like CY8C62x4 which have two SAR ADCs.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-sar-adc-simultaneous-sampling/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 cy8ckit_062s4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.2.0 release</num>
        <commit>release-v1.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="btsdk,spi,cyw208xx,data-logger,mtb-flow">
    <name>CYW208xx Data logger</name>
    <id>mtb-example-btsdk-cyw208xx-data-logger</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-btsdk-cyw208xx-data-logger</uri>
    <description><![CDATA[This code example includes two applications that demonstrate the operation of multiple Serial Peripheral Interface (SPI) interfaces using the CYW208xx Bluetooth&#174; SoC.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-btsdk-cyw208xx-data-logger/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>CYW208XX ncu15wf104</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>3.1.0 release</num>
        <commit>release-v3.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="btsdk,privacy,bonding,mtb-flow">
    <name>LE Peripheral Privacy</name>
    <id>mtb-example-btsdk-peripheral-privacy</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-btsdk-peripheral-privacy</uri>
    <description><![CDATA[This code example demonstrates the privacy features available to users in Bluetooth&#174; Low Energy 5.0 and above.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-btsdk-peripheral-privacy/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>button fw2 btsdk</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="btsdk,spi,cyw20719b2,mtb-flow">
    <name>CYW20719B2 SPI</name>
    <id>mtb-example-btsdk-cyw20719b2-spi</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-btsdk-cyw20719b2-spi</uri>
    <description><![CDATA[This code example demonstrates the SPI interface using CYW20719B2 boards.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-btsdk-cyw20719b2-spi/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>ncu15wf104 CYW920719B2Q40EVB_01 fw2 btsdk</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>2.1.1 release</num>
        <commit>release-v2.1.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="btsdk,sensors,sensor hub,motion,accelerometer,gyro,compass,temperature,thermistor,magnetic,3d magnetic,i2c,adc,mtb-flow">
    <name>LE SensorHub</name>
    <id>mtb-example-btsdk-sensorhub</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-btsdk-sensorhub</uri>
    <description><![CDATA[This code example demonstrates the interfacing of Multiple sensors, Motion, Temperature, and 3D magnetic sensor and sends the data over GATT custom service.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-btsdk-sensorhub/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>lsm9ds1 ncu15wf104 fw2 btsdk</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="GPIO,PWM,btsdk,mtb-flow">
    <name>PWM GPIO</name>
    <id>mtb-example-btsdk-pwm-gpio</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-btsdk-pwm-gpio</uri>
    <description><![CDATA[This example demonstrates the configuration of PWM (pulse width modulation) to control the brightness of an LED, and configuration of GPIO to toggle an LED ON and OFF.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-btsdk-pwm-gpio/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>fw2 btsdk led2x</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.1 release</num>
        <commit>release-v2.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,starter,template,empty,blank,mtb-flow">
    <name>Empty PSoC4 App</name>
    <id>mtb-example-psoc4-empty-app</id>
    <category>Getting Started</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-empty-app</uri>
    <description><![CDATA[This empty application provides a template for creating applications using PSoC&#8482; 4 devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-empty-app/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,led,capsense,custom scan,mtb-flow" req_capabilities_v2="psoc6 led capsense_linear_slider">
    <name>CAPSENSE Custom Scan</name>
    <id>mtb-example-psoc6-capsense-custom-scan</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-capsense-custom-scan</uri>
    <description><![CDATA[This code example demonstrates CAPSENSE&#8482; custom scanning through CAPSENSE&#8482; Middleware's callback functions that allow altering the sensor parameters during runtime or synchronizing the CAPSENSE&#8482; scan with non-CapSense operations. In this code example, the callback function is used to change the inactive sensor state to either shield or ground depending on the sensor being scanned.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-capsense-custom-scan/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led capsense_linear_slider</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.1 release</num>
        <commit>release-v2.1.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,msc,usb,file system,mass storage,sd,mtb-flow">
    <name>USB Mass Storage File System</name>
    <id>mtb-example-psoc6-usb-msc-filesystem-freertos</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-usb-msc-filesystem-freertos</uri>
    <description><![CDATA[This example demonstrates how to configure the USB block in a PSoC&#8482; 6 MCU device as a Mass Storage (MSC) device and run a file system (FatFs) through an external memory (microSD). This example uses FreeRTOS.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-usb-msc-filesystem-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led usb_device pdm switch sdhc</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,anycloud,wifi,mtb-flow,wifi-scan,wcm,scan filters" req_capabilities_v2="psoc6 wifi cyw43xxx led switch [flash_2048k, flash_1024k, flash_512k, cy8ckit_064b0s2_4343w]">
    <name>Wi-Fi Scan</name>
    <id>mtb-example-wifi-scan</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-wifi-scan</uri>
    <description><![CDATA[This code example demonstrates how to configure different scan filters provided in the Wi-Fi Connection Manager (WCM) middleware and scan for the available Wi-Fi networks.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-wifi-scan/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack and the Mbed TLS open-source TLS/SSL library which has cryptographic capabilities. Creating a project from this template will cause lwIP and Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the lwIP &amp; Mbed TLS licenses and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx led switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 4.X release</num>
        <commit>latest-v4.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>4.0.0 release</num>
        <commit>release-v4.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.3.0 release</num>
        <commit>release-v2.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,anycloud,wifi,mtb-flow,wcm,wps,enrollee,wps-pbc,wps-sta-pin" req_capabilities_v2="psoc6 wifi cyw43xxx led switch [flash_2048k, flash_1024k]">
    <name>WPS Enrollee</name>
    <id>mtb-example-anycloud-wps-enrollee</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-wps-enrollee</uri>
    <description><![CDATA[This code example demonstrates how to use the connection management and WPS Enrollee feature provided in the Wi-Fi Connection Manager (WCM) middleware.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-wps-enrollee/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack and the Mbed TLS open-source TLS/SSL library which has cryptographic capabilities. Creating a project from this template will cause lwIP and Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the lwIP &amp; Mbed TLS licenses and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx led switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,sgpio,target,mtb-flow,smartio,spi" req_capabilities_v2="psoc6 smart_io [cy8ckit_062_ble, cy8ckit_062_wifi_bt, cy8ckit_062s2_43012, cy8ckit_064b0s2_4343w, cy8cproto_062_4343w, cy8cproto_063_ble, cysbsyskit_01, cysbsyskit_dev_01]">
    <name>SGPIO Target Interface</name>
    <id>mtb-example-psoc6-smartio-sgpio-target</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-smartio-sgpio-target</uri>
    <description><![CDATA[This example uses a SPI resource and Smart I/O in PSoC&#8482; 6 MCU to implement the SGPIO Target interface.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-smartio-sgpio-target/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 smart_io</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.4.0 release</num>
        <commit>release-v1.4.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.3.0 release</num>
        <commit>release-v1.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.2.0 release</num>
        <commit>release-v1.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,capsense,slider,linear slider,csd,tuning,i2c,tuner" req_capabilities_v2="psoc4 capsense_linear_slider">
    <name>CAPSENSE CSD Slider Tuning</name>
    <id>mtb-example-psoc4-capsense-csd-slider-tuning</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-capsense-csd-slider-tuning</uri>
    <description><![CDATA[This code example demonstrates how to manually tune Self Capacitance (CSD) based slider widget in PSoC&#8482; 4 devices using CAPSENSE&#8482; Tuner GUI.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-capsense-csd-slider-tuning/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 capsense_linear_slider</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,mtb-flow,ble,bluetooth,anycloud,battery,4343w,43012" req_capabilities_v2="psoc6 bt led multi_core [cy8ceval_062_s2_lai_4373m2, cy8ckit_062s2_43012, cy8cproto_062_4343w, cy8ceval_062_mur_43439m2, cy8cproto_062s3_4343w]">
    <name>Bluetooth LE Battery Server</name>
    <id>mtb-example-anycloud-ble-battery-server</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-ble-battery-server</uri>
    <description><![CDATA[This code example demonstrates the implementation of a simple Bluetooth&#174; LE Battery Service. The Battery Service exposes the Battery Level of the device and comes with support for OTA update over Bluetooth&#174; LE.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-ble-battery-server/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 bt led multi_core</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 4.X release</num>
        <commit>latest-v4.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>4.0.0 release</num>
        <commit>release-v4.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>3.2.0 release</num>
        <commit>release-v3.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>3.1.0 release</num>
        <commit>release-v3.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,mtb-flow,ble,bluetooth,btstack,freertos,findme,4343w,43012" req_capabilities_v2="psoc6 bt led cyw43xxx [cy8cproto_062_4343w,cy8ckit_062_wifi_bt,cy8ckit_062s2_43012,cyw9p62s1_43012evb_01,cyw9p62s1_43438evb_01,cy8cproto_062s3_4343w,cysbsyskit_dev_01,cysbsyskit_01,cy8ceval_062_s2_lai_4373m2,cy8ceval_062_mur_43439m2]">
    <name>Bluetooth LE Findme</name>
    <id>mtb-example-btstack-freertos-findme</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/Infineon/mtb-example-btstack-freertos-findme</uri>
    <description><![CDATA[This design implements a Bluetooth&#174; Low Energy FMP(Find Me Profile) that consists of an IAS(Immediate Alert Service). FMP and IAS are Bluetooth&#174; Low Energy standard Profile and Service respectively, as defined by the Bluetooth&#174; SIG.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-btstack-freertos-findme/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 bt led cyw43xxx</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 4.X release</num>
        <commit>latest-v4.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>4.0.0 release</num>
        <commit>release-v4.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,led,capsense,button,slider,i2c,tuner,ble,bluetooth,anycloud,4343w,43012,43438,mtb-flow" req_capabilities_v2="psoc6 led bt capsense_button capsense_linear_slider cyw43xxx [flash_2048k, flash_1024k, flash_512k, cy8ckit_064b0s2_4343w]">
    <name>Bluetooth LE CAPSENSE Buttons and Slider</name>
    <id>mtb-example-anycloud-ble-capsense-buttons-slider</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-ble-capsense-buttons-slider</uri>
    <description><![CDATA[This code example features a 5-segment CAPSENSE&#8482; slider and two CAPSENSE&#8482; buttons with Bluetooth&#174; Low Energy custom service. Button 0 turns the LED on, Button 1 turns the LED off and the slider controls the brightness of the LED. The LED status is notified to the client via Bluetooth&#174; Low Energy GATT profile.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-ble-capsense-buttons-slider/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led bt capsense_button capsense_linear_slider cyw43xxx</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 4.X release</num>
        <commit>latest-v4.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>4.0.0 release</num>
        <commit>release-v4.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,lpa,anycloud,wifi,wlan,lowpower" req_capabilities_v2="psoc6 wifi cyw43xxx led low_power [flash_2048k, flash_1024k, flash_512k, cy8ckit_064b0s2_4343w]">
    <name>WLAN Low Power</name>
    <id>mtb-example-anycloud-wlan-lowpower</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-wlan-lowpower</uri>
    <description><![CDATA[This code example demonstrates the low-power operation of a host MCU and a WLAN device using the network activity handlers provided by the Low Power Assistant middleware for AIROC&#8482; Wi-Fi & Bluetooth&#174; combos.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-wlan-lowpower/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license. <br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx led low_power</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.3.0 release</num>
        <commit>release-v2.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,tester,anycloud,ble,tool,manufacturing">
    <name>Tester - Bluetooth MFG Tool</name>
    <id>mtb-anycloud-bluetooth-mfg-tester</id>
    <category>Manufacturing</category>
    <uri>https://github.com/Infineon/mtb-anycloud-bluetooth-mfg-tester</uri>
    <description><![CDATA[This application is used to validate the Bluetooth&#174; Firmware and RF performance for PSoC&#8482; 6 MCU with Bluetooth&#174; BR/EDR/LE devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-anycloud-bluetooth-mfg-tester/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 bt cyw43xxx anycloud</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.3.0 release</num>
        <commit>release-v1.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.2.0 release</num>
        <commit>release-v1.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,tester,anycloud,wifi,wlan,certification,cert,tool" req_capabilities_v2="psoc6 wifi cyw43xxx low_power anycloud">
    <name>Tester - Wi-Fi Cert Tool</name>
    <id>mtb-anycloud-wifi-cert-tester</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-anycloud-wifi-cert-tester</uri>
    <description><![CDATA[This Tester is a Wi-Fi Cert tool used for Wi-Fi 11n PSK/Enterprise Security certification for PSoC&#8482; 6 MCU with 2 MB flash and CYW43xxx connectivity devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-anycloud-wifi-cert-tester/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This tester application makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license. <br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx low_power anycloud</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 4.X release</num>
        <commit>latest-v4.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>4.0.0 release</num>
        <commit>release-v4.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.4.0 release</num>
        <commit>release-v3.4.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.3.0 release</num>
        <commit>release-v3.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>3.2.0 release</num>
        <commit>release-v3.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>3.1.0 release</num>
        <commit>release-v3.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,tester,anycloud,wifi,wlan,tool,manufacturing" req_capabilities_v2="[cat4, cy8ceval_062_mur_43439m2, cy8ceval_062_s2_lai_4373m2, cy8ckit_062s2_43012, cy8cproto_062_4343w] wifi low_power anycloud [flash_2048k, sram_2048k]">
    <name>Tester - Wi-Fi Bluetooth Console</name>
    <id>mtb-wifi-bluetooth-tester</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-wifi-bluetooth-tester</uri>
    <description><![CDATA[This application integrates command console library including Wi-Fi iPerf and Bluetooth&#174; Low Energy functionality. Using this application, the user can characterize the Wi-Fi/Bluetooth&#174; Low Energy functionality and performance.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-wifi-bluetooth-tester/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This tester application makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license. <br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>wifi low_power anycloud</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.4.0 release</num>
        <commit>release-v1.4.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.3.0 release</num>
        <commit>release-v1.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.2.1 release</num>
        <commit>release-v1.2.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.2.0 release</num>
        <commit>release-v1.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="1.0" req_capabilities_per_version="bsp_gen1">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,tester,anycloud,wifi,wlan,tool,manufacturing" req_capabilities_v2="psoc6 wifi cyw43xxx low_power anycloud">
    <name>Tester - Wi-Fi MFG Tool</name>
    <id>mtb-anycloud-wifi-mfg-tester</id>
    <category>Manufacturing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-anycloud-wifi-mfg-tester</uri>
    <description><![CDATA[This tester is a tool used for Wi-Fi manufacturing tests with PSoC&#8482; 6 MCU and CYW43xxx connectivity devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-anycloud-wifi-mfg-tester/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This tester application makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license. <br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx low_power anycloud</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 4.X release</num>
        <commit>latest-v4.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>4.0.0 release</num>
        <commit>release-v4.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.3.0 release</num>
        <commit>release-v3.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.2.0 release</num>
        <commit>release-v3.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>3.1.0 release</num>
        <commit>release-v3.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>3.0.1 release</num>
        <commit>release-v3.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,lpa,anycloud,wifi,wlan,offload,tcp-keepalive" req_capabilities_v2="psoc6 wifi cyw43xxx low_power [flash_2048k, flash_1024k, flash_512k]">
    <name>TCP Keepalive Offload</name>
    <id>mtb-example-anycloud-offload-tcp-keepalive</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-offload-tcp-keepalive</uri>
    <description><![CDATA[This code example demonstrates the TCP Keepalive Offload functionality offered by AIROC&#8482; Wi-Fi & Bluetooth&#174; combos using PSoC&#8482; 6 MCU. It employs Low Power Assistant (LPA) middleware library which helps in developing low power applications for the Infineon devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-offload-tcp-keepalive/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license. <br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx low_power</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.3.0 release</num>
        <commit>release-v2.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,qspi,fram,led" req_capabilities_v2="psoc6 led qspi fram">
    <name>QSPI F-RAM Access</name>
    <id>mtb-example-psoc6-qspi-fram-access</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-qspi-fram-access</uri>
    <description><![CDATA[This code example demonstrates interfacing PSoC&#8482; 6 MCU with an external QSPI F-RAM memory and access it in Single, Dual, or Quad SPI mode using the Serial Memory Interface (SMIF) block. This example uses the PSoC&#8482; 6 MCU standard QSPI HAL driver library to build the QSPI F-RAM access API.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-qspi-fram-access/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led qspi fram</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,i2c,i2c-slave,callback,pwm,mtb-flow" req_capabilities_v2="psoc4 led">
    <name>I2C Slave Using Callbacks</name>
    <id>mtb-example-psoc4-i2c-slave-callback</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-i2c-slave-callback</uri>
    <description><![CDATA[This example demonstrates the operation of the I2C block for PSoC&#8482; 4 in Slave mode using callbacks.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-i2c-slave-callback/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,tcpwm,interrupt" req_capabilities_v2="psoc4 led">
    <name>Periodic Interrupt Using TCPWM</name>
    <id>mtb-example-psoc4-tcpwm-interrupt</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-tcpwm-interrupt</uri>
    <description><![CDATA[This example uses the TCPWM Component in the Timer/Counter mode to generate a periodic interrupt. An LED toggles whenever the interrupt occurs.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-tcpwm-interrupt/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,uart,led,mtb-flow">
    <name>Hello World</name>
    <id>mtb-example-psoc4-hello-world</id>
    <category>Getting Started</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-hello-world</uri>
    <description><![CDATA[This code example demonstrates simple UART communication by printing a "Hello world" message on a terminal and blinks an LED using PSoC&#8482; 4 devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-hello-world/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,mtb-flow,gpio,interrupt,isr,led,deep sleep" req_capabilities_v2="psoc4 led">
    <name>GPIO Interrupt</name>
    <id>mtb-example-psoc4-gpio-interrupt</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-gpio-interrupt</uri>
    <description><![CDATA[This code example demonstrates the use of a GPIO configured as an input pin to generate interrupts on PSoC&#8482; 4. The GPIO signal interrupts the CPU and executes a user-defined Interrupt Service Routine (ISR). The GPIO interrupt acts as a wakeup source to wake the CPU from Deep Sleep.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-gpio-interrupt/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,capsense,csx,button,tuning,ezi2c,mtb-flow" req_capabilities_v2="psoc4 capsense_button">
    <name>CAPSENSE CSX Button Tuning</name>
    <id>mtb-example-psoc4-capsense-csx-button-tuning</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-capsense-csx-button-tuning</uri>
    <description><![CDATA[This code example demonstrates how to manually tune a mutual capacitance (CSX)-based button widget in PSoC&#8482; 4 devices using CAPSENSE&#8482; Tuner GUI.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-capsense-csx-button-tuning/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 capsense_button</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>Latest 4.X release</num>
        <commit>latest-v4.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>4.0.0 release</num>
        <commit>release-v4.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,i2c,i2c-master,ezi2c-slave,mtb-flow" req_capabilities_v2="psoc4 led">
    <name>I2C Master EzI2C Slave</name>
    <id>mtb-example-psoc4-i2c-master-slave</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-i2c-master-slave</uri>
    <description><![CDATA[This example demonstrates the operation of I2C resource for PSoC&#8482; 4 in Master mode with an EzI2C slave.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-i2c-master-slave/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,spi,master" req_capabilities_v2="psoc4">
    <name>SPI Master</name>
    <id>mtb-example-psoc4-spi-master</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-spi-master</uri>
    <description><![CDATA[This example demonstrates the use of a SPI resource for PSoC&#8482; 4 in master mode using high level APIs. The SPI master is configured to send command packets to control a user LED on the slave.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-spi-master/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,spi,slave" req_capabilities_v2="psoc4 led">
    <name>SPI Slave</name>
    <id>mtb-example-psoc4-spi-slave</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-spi-slave</uri>
    <description><![CDATA[This example demonstrates the use of a SPI Serial Communication Block (SCB) resource for PSoC&#8482; 4 in slave mode using high-level API. This example is intended to be used with PSoC&#8482; 4 SPI Master project
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-spi-slave/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,uart,dma" req_capabilities_v2="psoc4 dma">
    <name>SCB UART Transmit and Receive with DMA</name>
    <id>mtb-example-psoc4-uart-transmit-receive-dma</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-uart-transmit-receive-dma</uri>
    <description><![CDATA[This code example demonstrates the UART transmit and receive operation in PSoC&#8482; 4 using DMA. The application uses a serial terminal to read data and echoes what is received.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-uart-transmit-receive-dma/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 dma</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,led,pwm,tcpwm,dma,breathing" req_capabilities_v2="psoc4 led dma">
    <name>PWM Triggering a DMA Channel</name>
    <id>mtb-example-psoc4-pwm-trigger-dma</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-pwm-trigger-dma</uri>
    <description><![CDATA[This example demonstrates how to route trigger signals on a PSoC&#8482; 4 device.The trigger signal, in this code example, is routed from the PWM to the DMA, using Device Configurator.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-pwm-trigger-dma/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led dma</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,uart,transmit,receive" req_capabilities_v2="psoc4 led">
    <name>UART Transmit and Receive</name>
    <id>mtb-example-psoc4-uart-transmit-receive</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-uart-transmit-receive</uri>
    <description><![CDATA[This example demonstrates the UART transmit and receive operation in PSoC&#8482; 4 device. The application uses a serial terminal to read data and to echo back the received data.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-uart-transmit-receive/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,i2s,audio,mtb-flow,smartio,spi" req_capabilities_v2="psoc6 smart_io [cy8ckit_062_ble, cy8ckit_062_wifi_bt, cy8ckit_062s2_43012, cy8ckit_064b0s2_4343w, cy8cproto_062_4343w, cy8cproto_063_ble, cy8ckit_062s4]">
    <name>I2S Master using Smart IO and SPI</name>
    <id>mtb-example-psoc6-smartio-i2s</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-smartio-i2s</uri>
    <description><![CDATA[This example uses a SPI resource and Smart I/O in PSoC&#8482; 6 MCU to implement the I2S Master interface (TX only).
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-smartio-i2s/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 smart_io</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.3.0 release</num>
        <commit>release-v1.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.2.0 release</num>
        <commit>release-v1.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,pdm,pcm,i2s,mtb-flow,audio,microphone,codec" req_capabilities_v2="psoc6 pdm i2s">
    <name>PDM to I2S Audio</name>
    <id>mtb-example-psoc6-pdm-to-i2s</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-pdm-to-i2s</uri>
    <description><![CDATA[This example demonstrates how to route Pulse-Density Modulation (PDM) audio data to the Inter-IC Sound (I2S) Interface in PSoC&#8482; 6 MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-pdm-to-i2s/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 pdm i2s</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,usb,mtb-flow,audio,microphone,recorder">
    <name>USB Audio Recorder</name>
    <id>mtb-example-psoc6-usb-audio-recorder</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-usb-audio-recorder</uri>
    <description><![CDATA[This example demonstrates the use of PSoC&#8482; 6 MCU to implement an audio recorder using the USB Audio Device Class.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-usb-audio-recorder/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 usb_device pdm</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,usb,mtb-flow,hid,mouse">
    <name>USB HID Mouse</name>
    <id>mtb-example-psoc6-usb-hid-mouse</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-usb-hid-mouse</uri>
    <description><![CDATA[This example demonstrates how to configure the USB block in a PSoC&#8482; 6 MCU as a HID. The device enumerates as a 3-button mouse.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-usb-hid-mouse/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 usb_device pdm</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,usb,mtb-flow,hid,generic">
    <name>USB HID Generic</name>
    <id>mtb-example-psoc6-usb-hid-generic</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-usb-hid-generic</uri>
    <description><![CDATA[This example demonstrates how to configure the USB block in a PSoC&#8482; 6 MCU as a Human Interface Device (HID). The device enumerates as a Generic HID device.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-usb-hid-generic/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 usb_device pdm</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,wdt,interrupt,reset,deepsleep,mtb-flow" req_capabilities_v2="psoc4">
    <name>Watchdog timer interrupt and reset</name>
    <id>mtb-example-psoc4-wdt</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-wdt</uri>
    <description><![CDATA[This code example features the watchdog timer and its usage in interrupt mode, reset mode and how to wake up the device from deepsleep using watchdog interrupt.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-wdt/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,wdc,interrupt" req_capabilities_v2="psoc4 lptimer led">
    <name>Watchdog Counter Interrupts</name>
    <id>mtb-example-psoc4-wdc</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-wdc</uri>
    <description><![CDATA[This example demonstrates the use of PSoC&#8482; 4 Watchdog Counters in cascaded mode. The user LED is toggled every time the Counter2 interrupt occurs. The match values of all the counters are set to toggle the LED every 1 second.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-wdc/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 lptimer led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,gpio,pins" req_capabilities_v2="psoc4 led">
    <name>GPIO Pins</name>
    <id>mtb-example-psoc4-gpio</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-psoc4-gpio</uri>
    <description><![CDATA[This example demonstrates multiple methods of configuring, reading, writing, and generating interrupts with PSoC&#8482; 4 General Purpose Input/Output (GPIO) pins.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-gpio/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,gpio,interrupt,switch" req_capabilities_v2="hal led switch low_power [psoc6,xmc7000,t2gbh]">
    <name>GPIO Interrupt</name>
    <id>mtb-example-psoc6-gpio-interrupt</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-gpio-interrupt</uri>
    <description><![CDATA[This example demonstrates how to configure a GPIO to generate an interrupt.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-gpio-interrupt/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal led switch low_power</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,rtc" req_capabilities_v2="hal rtc [psoc6,xmc7000,t2gbh]">
    <name>RTC Basics</name>
    <id>mtb-example-psoc6-rtc-basics</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-rtc-basics</uri>
    <description><![CDATA[This example demonstrates the usage of the real-time clock (RTC).
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-rtc-basics/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal rtc</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.1 release</num>
        <commit>release-v2.1.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,adc,hal" req_capabilities_v2="psoc6">
    <name>ADC basic</name>
    <id>mtb-example-psoc6-adc-basic</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-adc-basic</uri>
    <description><![CDATA[This example demonstrates use of the ADC (Analog to Digital Converter) HAL driver to perform voltage measurements.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-adc-basic/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,led,power,sleep,mtb-flow" req_capabilities_v2="psoc6 led low_power">
    <name>Switching Power Modes</name>
    <id>mtb-example-psoc6-switching-power-modes</id>
    <category>Getting Started</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-switching-power-modes</uri>
    <description><![CDATA[This example demonstrates how to transition PSoC&#8482; 6 between the following power modes - Active, Sleep, Low Power Active, Low Power Sleep, and Deep Sleep.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-switching-power-modes/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led low_power</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow, psoc4, low power, uart, led" req_capabilities_v2="psoc4 led">
    <name>Power Modes</name>
    <id>mtb-example-psoc4-power-modes</id>
    <category>Getting Started</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-power-modes</uri>
    <description><![CDATA[This code example shows how to enter system Sleep and Deep Sleep modes. After entering Deep Sleep or Sleep mode, the example also shows how to wake up from these low-power modes and return to normal Active mode.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-power-modes/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,capsense,csd,button,tuning,ezi2c,mtb-flow" req_capabilities_v2="psoc4 led capsense_button">
    <name>CAPSENSE CSD Button Tuning</name>
    <id>mtb-example-psoc4-capsense-csd-button-tuning</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-capsense-csd-button-tuning</uri>
    <description><![CDATA[This code example demonstrates how to manually tune a self-capacitance (CSD) based button widget in PSoC&#8482; 4 devices using CAPSENSE&#8482; Tuner GUI.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-capsense-csd-button-tuning/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led capsense_button</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,msc,capsense,csd,button,tuning,mtb-flow" req_capabilities_v2="psoc4 led msc_button">
    <name>MSC CAPSENSE CSD Button Tuning</name>
    <id>mtb-example-psoc4-msc-capsense-csd-button-tuning</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-msc-capsense-csd-button-tuning</uri>
    <description><![CDATA[This code example demonstrates how to manually tune a self capacitance-based button widget in PSoC&#8482; 4 devices using the Multi Sense Converter (MSC) CSD-RM sensing technique and CAPSENSE&#8482; Tuner GUI.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-msc-capsense-csd-button-tuning/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led msc_button</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,msc,capsense,csx,button,tuning,mtb-flow" req_capabilities_v2="psoc4 led msc_button">
    <name>MSC CAPSENSE CSX Button Tuning</name>
    <id>mtb-example-psoc4-msc-capsense-csx-button-tuning</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-msc-capsense-csx-button-tuning</uri>
    <description><![CDATA[This code example demonstrates how to manually tune a mutual capacitance-based button widget in PSoC&#8482; 4 devices using the Multi Sense Converter (MSC) CSX-RM sensing technique and CAPSENSE&#8482; Tuner GUI.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-msc-capsense-csx-button-tuning/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led msc_button</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,starter,template,empty,blank,mtb-flow">
    <name>Empty XMC App</name>
    <id>mtb-example-xmc-empty-app</id>
    <category>Getting Started</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-empty-app</uri>
    <description><![CDATA[This empty application provides a template for creating applications using XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-empty-app/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 0.X release</num>
        <commit>latest-v0.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>0.5.0 release</num>
        <commit>release-v0.5.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,gpio,led,isr,toggle,systick,mtb-flow">
    <name>GPIO Toggle</name>
    <id>mtb-example-xmc-gpio-toggle</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-gpio-toggle</uri>
    <description><![CDATA[This code example demonstrates GPIO toggling by periodically blinking an LED using SysTick available in XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-gpio-toggle/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 0.X release</num>
        <commit>latest-v0.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>0.5.0 release</num>
        <commit>release-v0.5.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,gpio,led,freertos,mtb-flow">
    <name>FreeRTOS Blinky</name>
    <id>mtb-example-xmc-blinky-freertos</id>
    <category>Getting Started</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-blinky-freertos</uri>
    <description><![CDATA[This code example demonstrates blinking LED functionality implemented by FreeRTOS tasks running on the XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-blinky-freertos/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 0.X release</num>
        <commit>latest-v0.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>0.5.0 release</num>
        <commit>release-v0.5.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,ccu,ccu4,pwm,led,mtb-flow">
    <name>CCU4 PWM</name>
    <id>mtb-example-xmc-ccu4-pwm</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-ccu4-pwm</uri>
    <description><![CDATA[This code example demonstrates the use of CCU4 module in XMC MCU to create a PWM signal. The CCU4 slice is configured in monoshot mode and is restarted on an external start event.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-ccu4-pwm/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 0.X release</num>
        <commit>latest-v0.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>0.5.0 release</num>
        <commit>release-v0.5.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,ccu,ccu4,capture,mtb-flow">
    <name>CCU4 Capture</name>
    <id>mtb-example-xmc-ccu4-capture</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-ccu4-capture</uri>
    <description><![CDATA[This code example demonstrates the capture features of the Capture and Compare Unit 4 (CCU4) slices available in XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-ccu4-capture/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 0.X release</num>
        <commit>latest-v0.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>0.5.0 release</num>
        <commit>release-v0.5.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,ccu,ccu4,timer,concatenation,led,mtb-flow">
    <name>CCU4 Timer Concatenation</name>
    <id>mtb-example-xmc-ccu4-timer-concatenation</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-ccu4-timer-concatenation</uri>
    <description><![CDATA[This code example demonstrates the concatenation or linking feature of the Capture and Compare Unit 4 (CCU4) slices available in XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-ccu4-timer-concatenation/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 0.X release</num>
        <commit>latest-v0.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>0.5.0 release</num>
        <commit>release-v0.5.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,ccu,ccu4,timer,led,mtb-flow">
    <name>CCU4 Timer</name>
    <id>mtb-example-xmc-ccu4-timer</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-ccu4-timer</uri>
    <description><![CDATA[This code example demonstrates the usage of the Capture and Compare Unit 4 (CCU4) timer by blinking an LED using CCU4 timer period match interrupt available in XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-ccu4-timer/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 0.X release</num>
        <commit>latest-v0.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>0.5.0 release</num>
        <commit>release-v0.5.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,uart,printf,hello world,usic,mtb-flow">
    <name>UART Printf</name>
    <id>mtb-example-xmc-uart-printf</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-uart-printf</uri>
    <description><![CDATA[This example demonstrates how to use the printf function with a Universal Serial Interface Channel (USIC) based UART in XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-uart-printf/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 0.X release</num>
        <commit>latest-v0.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>0.5.0 release</num>
        <commit>release-v0.5.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,uart,printf,shell,console,usic,led,mtb-flow">
    <name>UART Shell</name>
    <id>mtb-example-xmc-uart-shell</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-uart-shell</uri>
    <description><![CDATA[This code example demonstrates implementation of a shell on the UART communication interface including commands to toggle a LED using XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-uart-shell/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 0.X release</num>
        <commit>latest-v0.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>0.5.0 release</num>
        <commit>release-v0.5.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,uart,dma,usic,mtb-flow">
    <name>UART DMA</name>
    <id>mtb-example-xmc-uart-dma</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-uart-dma</uri>
    <description><![CDATA[This example demonstrates how to stream data using DMA via UART based on Universal Serial Interface Channel (USIC) to an external terminal.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-uart-dma/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc dma</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 0.X release</num>
        <commit>latest-v0.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>0.5.0 release</num>
        <commit>release-v0.5.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,uart,dma,usic,mtb-flow">
    <name>DMA Ring Buffer</name>
    <id>mtb-example-xmc-dma-ring-buffer</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-dma-ring-buffer</uri>
    <description><![CDATA[This code example demonstrates how to receive data using DMA via a Universal Serial Interface Channel (USIC) and synchronize the processing with an OS task through a ring buffer. For simplicity, the OS task is emulated inside this example with a SysTick Timer interrupt.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-dma-ring-buffer/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc dma</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,i2c,master,slave,transmit,receive,usic,led,mtb-flow">
    <name>I2C Master and Slave</name>
    <id>mtb-example-xmc-i2c-master-slave</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-i2c-master-slave</uri>
    <description><![CDATA[This code example demonstrates the implementation of an I2C master and an I2C slave on the same device based on the Universal Serial Interface Channel (USIC). The I2C master sends commands to the I2C slave to toggle the LEDs present on the XMC development kit.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-i2c-master-slave/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc i2c led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,flash,program,sector,erase,led,mtb-flow">
    <name>Flash Program</name>
    <id>mtb-example-xmc-flash-program</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-flash-program</uri>
    <description><![CDATA[This code example demonstrates how to erase a sector of the flash, write data to the sector and check the data for correctness on the XMC MCU device.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-flash-program/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,ccu,ccu8,timer,led,mtb-flow">
    <name>CCU8 Timer</name>
    <id>mtb-example-xmc-ccu8-timer</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-ccu8-timer</uri>
    <description><![CDATA[This code example demonstrates the usage of Capture-Compare Unit 8 (CCU8) in the XMC MCU in timer mode. The CCU8 timer slice program blinks an LED when a timer period match interrupt occurs.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-ccu8-timer/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,adc,vadc,scan,continuous scan,led,mtb-flow">
    <name>VADC Scan</name>
    <id>mtb-example-xmc-vadc-scan</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-vadc-scan</uri>
    <description><![CDATA[This code example demonstrates working of the Versatile Analog to Digital Converter (VADC) in the XMC MCU in continuous scan mode for one channel.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-vadc-scan/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led adc</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.1 release</num>
        <commit>release-v2.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,rtc,alarm,led,mtb-flow">
    <name>RTC Alarm</name>
    <id>mtb-example-xmc-rtc-alarm</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-rtc-alarm</uri>
    <description><![CDATA[This code example demonstrates an RTC alarm interrupt of 1 minute to set a periodically blinking LED on the XMC MCU Evaluation kits.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-rtc-alarm/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc rtc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,ccu,ccu8,pwm,led,mtb-flow">
    <name>CCU8 PWM</name>
    <id>mtb-example-xmc-ccu8-pwm</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-ccu8-pwm</uri>
    <description><![CDATA[This code example demonstrates how to generate PWM signals using Capture and Compare unit (CCU8) slices available in XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-ccu8-pwm/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,ccu,ccu8,capture,led,mtb-flow">
    <name>CCU8 Capture</name>
    <id>mtb-example-xmc-ccu8-capture</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-ccu8-capture</uri>
    <description><![CDATA[This code example demonstrates the capture feature of Capture and Compare unit (CCU8) slices available in XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-ccu8-capture/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,ccu,ccu8,pwm,mtb-flow">
    <name>CCU8 PWM Complementary</name>
    <id>mtb-example-xmc-ccu8-pwm-complementary</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-ccu8-pwm-complementary</uri>
    <description><![CDATA[This code example demonstrates generating two complementary pulse width modulated (PWM) waves using the Capture and Compare Unit(CCU8 module) available in XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-ccu8-pwm-complementary/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,dac,sine,wave,analog,mtb-flow">
    <name>DAC Sine Wave</name>
    <id>mtb-example-xmc-dac-sine</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-dac-sine</uri>
    <description><![CDATA[This code example demonstrates the usage of DAC peripheral of the XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-dac-sine/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc dac</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,acmp,comparator,analog,led,mtb-flow">
    <name>Analog Comparator</name>
    <id>mtb-example-xmc-acmp-cmp</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-acmp-cmp</uri>
    <description><![CDATA[This code example demonstrates the usage of the Analog Comparator (ACMP) peripheral of XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-acmp-cmp/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc comp led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,flash,emulated,eeprom,mtb-flow">
    <name>Flash EEPROM</name>
    <id>mtb-example-xmc-flash-eeprom</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-flash-eeprom</uri>
    <description><![CDATA[This code example shows how to use a portion of the internal flash memory of XMC MCUs as emulated EEPROM memory, and provides necessary APIs to perform read and write operations to the emulated EEPROM.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-flash-eeprom/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.1 release</num>
        <commit>release-v1.0.1</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,can,receiver,led,mtb-flow">
    <name>CAN Receiver</name>
    <id>mtb-example-xmc-can-receiver</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-can-receiver</uri>
    <description><![CDATA[This example demonstrates how to receive CAN messages over the CAN bus using XMC MCU. This example can be used together with the <a href="https://github.com/Infineon/mtb-example-xmc-can-transmitter">CAN Transmitter</a> example running on another board.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-can-receiver/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc can led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,can,loopback,led,mtb-flow">
    <name>CAN Loopback</name>
    <id>mtb-example-xmc-can-loopback</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-can-loopback</uri>
    <description><![CDATA[This code example demonstrates the communication between two CAN nodes in loopback mode using XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-can-loopback/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc can led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,dma,fce,crc,led,mtb-flow">
    <name>DMA FCE</name>
    <id>mtb-example-xmc-dma-fce</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-dma-fce</uri>
    <description><![CDATA[This code example demonstrates how to use DMA to feed the Flexible CRC Engine (FCE) to calculate the CRC-32 on a fictitious frame of data in XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-dma-fce/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc dma led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,spi,dma,led,mtb-flow">
    <name>SPI DMA</name>
    <id>mtb-example-xmc-spi-dma</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-spi-dma</uri>
    <description><![CDATA[This code example demonstrates how to use DMA driver to transfer data from RAM to SPI freeing the CPU for other tasks.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-spi-dma/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc dma spi led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,fce,crc,led,mtb-flow">
    <name>FCE CRC</name>
    <id>mtb-example-xmc-fce-crc</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-fce-crc</uri>
    <description><![CDATA[This code example uses the Flexible CRC Engine (FCE) driver for kernel to demonstrate CRC-32, CRC-16, and CRC-8 checksum calculations.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-fce-crc/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led xmc4000</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,can,transmitter,led,mtb-flow">
    <name>CAN Transmitter</name>
    <id>mtb-example-xmc-can-transmitter</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-can-transmitter</uri>
    <description><![CDATA[This example demonstrates how to transmit CAN messages over the CAN bus using XMC MCU. This example can be used with the <a href="https://github.com/Infineon/mtb-example-xmc-can-receiver">CAN Receiver</a> example running on another board.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-can-transmitter/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc can led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,uart,transmit,hello world,led,mtb-flow">
    <name>UART Transmit</name>
    <id>mtb-example-xmc-uart-transmit</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-uart-transmit</uri>
    <description><![CDATA[This code example demonstrates simple UART communication by printing periodic "Hello World!!" message on a terminal and blinking an LED. The message can be seen on a PC terminal.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-uart-transmit/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,math,sqrt,square root,cordic,mtb-flow">
    <name>MATH SQRT</name>
    <id>mtb-example-xmc-math-sqrt</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-math-sqrt</uri>
    <description><![CDATA[This code example uses the MATH CORDIC block to perform the square root operation for the given input number.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-math-sqrt/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc xmc1000</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,eru,extint,interrupt,led,mtb-flow">
    <name>ERU EXTINT</name>
    <id>mtb-example-xmc-eru-extint</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-eru-extint</uri>
    <description><![CDATA[This code example demonstrates Event Request Unit (ERU) functionality with external interrupt on XMC MCU evaluation kits. In this example, an external signal, fed into the ERU unit using a GPIO pin, triggers a service request interrupt that toggles an LED.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-eru-extint/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,scu,sleep,led,mtb-flow">
    <name>SCU Sleep</name>
    <id>mtb-example-xmc-scu-sleep</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-scu-sleep</uri>
    <description><![CDATA[This code example demonstrates the System Control Unit (SCU) sleep mode on the XMC MCU evaluation kits. Wakeup is done by using an external interrupt via the Event Request Unit (ERU). An LED glows at every falling edge of the external signal inside the ERU interrupt. The MCU is put back to sleep mode again after servicing the interrupt.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-scu-sleep/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,watchdog,wdt,prewarning,led,mtb-flow">
    <name>WDT Prewarning</name>
    <id>mtb-example-xmc-wdt-prewarning</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-wdt-prewarning</uri>
    <description><![CDATA[This code example demonstrates the prewarning feature of the watchdog timer (WDT) on the XMC MCU evaluation kits.
    <br>A pre-warning alarm is triggered before a watchdog reset only if the watchdog timer is not serviced properly. When a prewarning condition occurs, the User LED1 blinks once. After a watchdog reset, the MCU checks the reason for the last reset; if it was caused by a watchdog reset, the User LED2 blinks at a faster rate.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-wdt-prewarning/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,ccu,ccu8,timer,concatenation,led,mtb-flow">
    <name>CCU8 Timer Concatenation</name>
    <id>mtb-example-xmc-ccu8-timer-concatenation</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-ccu8-timer-concatenation</uri>
    <description><![CDATA[This code example demonstrates the concatenation or linking feature of the Capture and Compare Unit 8 (CCU8) slices available in XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-ccu8-timer-concatenation/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,spi,master,transmit,led,mtb-flow">
    <name>SPI Master</name>
    <id>mtb-example-xmc-spi-master</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-spi-master</uri>
    <description><![CDATA[This code example demonstrates the transfer of 3 bytes of data using SPI Master in XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-spi-master/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led spi</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,dma,pwm,mtb-flow">
    <name>DMA PWM</name>
    <id>mtb-example-xmc-dma-pwm</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-dma-pwm</uri>
    <description><![CDATA[This code example demonstrates the use of DMA double buffering with the PWM block. DMA writes to the compare register of the PWM to obtain a varying duty cycle at the output. Two buffers are present to provide an increasing duty cycle in one and a decreasing duty cycle in the other.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-dma-pwm/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc dma</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,dma,gpio,led,mtb-flow">
    <name>DMA GPIO</name>
    <id>mtb-example-xmc-dma-gpio</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-dma-gpio</uri>
    <description><![CDATA[This code example demonstrates how to configure the GPIO registers using GPDMA.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-dma-gpio/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc dma led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,dma,m2m,led,mtb-flow">
    <name>DMA M2M</name>
    <id>mtb-example-xmc-dma-m2m</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-dma-m2m</uri>
    <description><![CDATA[This example demonstrates the transfer of data from the flash to the RAM using the GPDMA peripheral.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-dma-m2m/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc dma led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,mtb-flow,flash-protection,flash,protection">
    <name>Flash Protection</name>
    <id>mtb-example-xmc-flash-protection</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-flash-protection</uri>
    <description><![CDATA[This example demonstrates how flash protection can be configured in the XMC 4000 Series of devices.
    <br><br><b>Note:</b> This code example involves programming the User Configuration Blocks (UCB), which can only be programmed only a limited number of times. See the Design and Implementation section in the README before proceeding with this code example.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-flash-protection/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc xmc4000</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,uart,transmit,tx,receive,rx,fifo,interrupt,led,mtb-flow">
    <name>UART Transmit Receive FIFO Interrupts</name>
    <id>mtb-example-xmc-uart-transmit-receive-fifo-interrupts</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-uart-transmit-receive-fifo-interrupts</uri>
    <description><![CDATA[This code example demonstrates how to use the Tx and Rx FIFO limit interrupts and send data from the Tx buffer to the Rx buffer. If reception is successful, the on-board LED 1 glows; otherwise, the LED remains OFF.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-uart-transmit-receive-fifo-interrupts/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,tse,calc,temperature,dts,mtb-flow">
    <name>TSE Calc Temperature</name>
    <id>mtb-example-xmc-tse-calc-temperature</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-tse-calc-temperature</uri>
    <description><![CDATA[This code example demonstrates how to use TSE (on-chip temperature sensor). TSE calculates temperature readings from the sensor and sends them over UART periodically every 1 s. Correspondingly, the LED blinks every 1 s; the temperature readings can be observed on the terminal.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-tse-calc-temperature/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led xmc1000</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,ccu,ccu8,sync,start,timer,led,mtb-flow">
    <name>CCU8 Timer Synchronous Start</name>
    <id>mtb-example-xmc-ccu8-sync-start</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-ccu8-sync-start</uri>
    <description><![CDATA[This code example demonstrates the synchronous start of Capture-Compare Unit 8 (CCU80 and CCU81) in the XMC MCU upon receving a trigger from the Event Request Unit (ERU). The CCU8 timer slice program blinks the on-board user LEDs (CCU80 blinks User LED1 and CCU81 blinks User LED2) when a timer period match interrupt occurs.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-ccu8-sync-start/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,math,cordic,mtb-flow">
    <name>MATH CORDIC</name>
    <id>mtb-example-xmc-math-cordic</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-math-cordic</uri>
    <description><![CDATA[This code example uses the MATH CORDIC block to perform circular, hyperbolic, and logarithmic operations. The example demonstrates the blocking, non-blocking, and direct register write operations of the CORDIC block.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-math-cordic/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc xmc1000</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,posif,qd,led,mtb-flow">
    <name>POSIF QD</name>
    <id>mtb-example-xmc-posif-qd</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-posif-qd</uri>
    <description><![CDATA[This example demonstrates a Position Interface (POSIF) module in Quadrature Decoder (QD) mode and uses the CCU40 module to determine the speed of rotation of the encoder.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-posif-qd/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,adc,vadc,background,bg,led,mtb-flow">
    <name>VADC Background</name>
    <id>mtb-example-xmc-vadc-bg</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-vadc-bg</uri>
    <description><![CDATA[This example demonstrates how to convert a single channel using the background source in VADC. In this example, the background source continuously requests conversion. The ADC conversion result is read and displayed on the UART Terminal.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-vadc-bg/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led adc</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,watchdog,wdt,feed,led,mtb-flow">
    <name>WDT FEED</name>
    <id>mtb-example-xmc-wdt-feed</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-wdt-feed</uri>
    <description><![CDATA[This code example demonstrates a Watchdog Timer (WDT) on the XMC MCU.
    <br><br>The WDT needs to be fed every second for proper serving of the WDT. The SysTick timer is used to feed the WDT. When feeding occurs, the User LED blinks. If there is no feeding, the device goes into reset. After the reset, the MCU checks the reason for the last reset. If it is due to a failure to feed the WDT, the User LED blinks at a faster rate.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-wdt-feed/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,qspi-flash,flash,qspi,spi-qspi-flash,led,mtb-flow">
    <name>SPI QSPI Flash</name>
    <id>mtb-example-xmc-spi-qspi-flash</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-spi-qspi-flash</uri>
    <description><![CDATA[This example demonstrates how the communication between the XMC4700 (master) and the on-board QSPI flash chip N25Q03 (slave) takes place using the Quad SPI interface.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-spi-qspi-flash/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc spi led xmc4000</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,brownout,detection,power-supply,led,mtb-flow">
    <name>Brownout Detection</name>
    <id>mtb-example-xmc-scu-brownout-detection</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-scu-brownout-detection</uri>
    <description><![CDATA[This code example demonstrates brownout detection by reducing power supply voltage from 3.3 V to the defined voltage threshold using brownout detection available in XMC MCU devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-scu-brownout-detection/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,adc,vadc,queue,mtb-flow">
    <name>VADC Queue</name>
    <id>mtb-example-xmc-vadc-queue</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-vadc-queue</uri>
    <description><![CDATA[This example demonstrates how to convert multiple channels in a dedicated sequence using the queue source in VADC.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-vadc-queue/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc adc</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,mtb-flow,flash-bmi,flash,bmi,boot-mode-index">
    <name>Flash BMI</name>
    <id>mtb-example-xmc-flash-bmi</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-flash-bmi</uri>
    <description><![CDATA[This example demonstrates how Boot Mode Index (BMI) can be used to configure a customized boot sequence on XMC4700 device.
    <br><br><b>Note:</b> This code example involves programming the User Configuration Blocks (UCB), which can be programmed only a limited number of times. See the Design and Implementation section in the README before proceeding with this code example.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-flash-bmi/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc xmc4000</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,posif,hall,uart,led,mtb-flow">
    <name>POSIF Hall</name>
    <id>mtb-example-xmc-posif-hall</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-xmc-posif-hall</uri>
    <description><![CDATA[This code example demonstrates a position interface (POSIF) module in Hall sensor mode and uses the capture and compare unit 4 (CCU40) module to determine the speed of rotation of the motor.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-xmc-posif-hall/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b> Programming this code example requires installing <a href="https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack">SEGGER J-Link software</a>.]]></description>
    <req_capabilities>xmc</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,udp,client,wifi,led" req_capabilities_v2="psoc6 cyw43xxx wifi led [flash_2048k, flash_1024k, flash_512k, cy8ckit_064b0s2_4343w]">
    <name>WiFi UDP Client</name>
    <id>mtb-example-wifi-udp-client</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-wifi-udp-client</uri>
    <description><![CDATA[This code example demonstrates implementation of UDP Client using the Wi-Fi connectivity SDK. The UDP Client establishes a connection with a remote UDP server and based on the command received from the UDP server, turns the user LED ON or OFF using PSoC&#8482; 6 MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-wifi-udp-client/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license. <br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 cyw43xxx wifi led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 4.X release</num>
        <commit>latest-v4.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>4.0.0 release</num>
        <commit>release-v4.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.3.0 release</num>
        <commit>release-v2.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,udp,server,wifi,switch" req_capabilities_v2="psoc6 cyw43xxx wifi switch [flash_2048k,flash_1024k,flash_512k,cy8ckit_064b0s2_4343w]">
    <name>WiFi UDP Server</name>
    <id>mtb-example-wifi-udp-server</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-wifi-udp-server</uri>
    <description><![CDATA[This code example demonstrates implementation of UDP Server using the Wi-Fi connectivity SDK. The UDP Server allows the user to send LED ON/OFF command to the UDP client using PSoC&#8482; 6 MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-wifi-udp-server/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license. <br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 cyw43xxx wifi switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 4.X release</num>
        <commit>latest-v4.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>4.0.0 release</num>
        <commit>release-v4.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.3.0 release</num>
        <commit>release-v2.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,wifi,ota,http,https">
    <name>OTA Using HTTPS</name>
    <id>mtb-example-ota-https</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-ota-https</uri>
    <description><![CDATA[This code example demonstrates OTA update with PSoC&#8482; 6 MCU and AIROC&#8482; CYW43xxx Wi-Fi & Bluetooth&#174; combo chips. The device establishes a connection with the designated HTTPS server. It periodically checks the job document to see if a new update is available. When a new update is available, it is downloaded and written to the secondary slot. On the next reboot, MCUboot swaps the new image in the secondary slot with the primary slot image and runs the application. If the new image is not validated in runtime, on the next reboot, MCUboot reverts to the previously validated image.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-ota-https/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license. <br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 cyw43xxx wifi led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="bsp_gen4 [cy8ceval_062_s2_lai_4373m2, cy8ceval_062_mur_43439m2, cy8ckit_062s2_43012, cy8cproto_062_4343w, cy8cproto_062s3_4343w]">
        <num>Latest 5.X release</num>
        <commit>latest-v5.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="bsp_gen4 [cy8ceval_062_s2_lai_4373m2, cy8ceval_062_mur_43439m2, cy8ckit_062s2_43012, cy8cproto_062_4343w, cy8cproto_062s3_4343w]">
        <num>5.0.0 release</num>
        <commit>release-v5.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="bsp_gen3 [cy8ckit_062s2_43012, cy8cproto_062_4343w, cy8ceval_062_s2_lai_4373m2, cy8ceval_062_mur_43439m2]">
        <num>Latest 4.X release</num>
        <commit>latest-v4.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="bsp_gen3 [cy8ckit_062s2_43012, cy8cproto_062_4343w, cy8ceval_062_s2_lai_4373m2, cy8ceval_062_mur_43439m2]">
        <num>4.0.0 release</num>
        <commit>release-v4.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="bsp_gen3 [cy8ckit_062s2_43012, cy8cproto_062_4343w, cy8ceval_062_s2_lai_4373m2, cy8ceval_062_mur_43439m2]">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="bsp_gen3 [cy8ckit_062s2_43012, cy8cproto_062_4343w, cy8ceval_062_s2_lai_4373m2, cy8ceval_062_mur_43439m2]">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version_v2="bsp_gen2 [cy8ckit_062s2_43012, cy8cproto_062_4343w]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version_v2="bsp_gen2 [cy8ckit_062s2_43012, cy8cproto_062_4343w]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version_v2="bsp_gen2 [cy8ckit_062s2_43012, cy8cproto_062_4343w]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version_v2="bsp_gen2 [cy8ckit_062s2_43012, cy8cproto_062_4343w]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version_v2="bsp_gen2 [cy8ckit_062s2_43012, cy8cproto_062_4343w]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,uart,capsense,slider,ganged sensor,i2c,tuner,rtos,mtb-flow" req_capabilities_v2="psoc6 capsense_linear_slider low_power">
    <name>Low-power CAPSENSE FreeRTOS</name>
    <id>mtb-example-psoc6-low-power-capsense-freertos</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-low-power-capsense-freertos</uri>
    <description><![CDATA[This code example demonstrates how to create a low-power CAPSENSE&#8482; design using PSoC&#8482; 6 MCU. This example features a 5-segment CAPSENSE&#8482; slider and a Ganged Sensor, and displays the detected touch position over the serial terminal.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-low-power-capsense-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 capsense_linear_slider low_power</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.2.0 release</num>
        <commit>release-v1.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,wifi,ota,mqtt">
    <name>OTA Using MQTT</name>
    <id>mtb-example-ota-mqtt</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-ota-mqtt</uri>
    <description><![CDATA[This code example demonstrates OTA update with PSoC&#8482; 6 MCU and AIROC&#8482 CYW43xxx Wi-Fi & Bluetooth&#174; combo chips. The device establishes a connection with the designated MQTT broker (this example uses a local Mosquitto broker). It periodically checks the job document to see if a new update is available. When a new update is available, it is downloaded and written to the secondary slot. On the next reboot, MCUboot swaps the new image in the secondary slot with the primary slot image and runs the application. If the new image is not validated in runtime, on the next reboot MCUboot reverts to the previously validated image.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-ota-mqtt/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license. <br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 cyw43xxx wifi led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="bsp_gen4 [cy8ceval_062_s2_lai_4373m2, cy8ceval_062_mur_43439m2, cy8ckit_062s2_43012, cy8cproto_062_4343w, cy8cproto_062s3_4343w]">
        <num>Latest 6.X release</num>
        <commit>latest-v6.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="bsp_gen4 [cy8ceval_062_s2_lai_4373m2, cy8ceval_062_mur_43439m2, cy8ckit_062s2_43012, cy8cproto_062_4343w, cy8cproto_062s3_4343w]">
        <num>6.0.0 release</num>
        <commit>release-v6.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="bsp_gen3 [cy8ckit_062s2_43012, cy8cproto_062_4343w, cy8ceval_062_s2_lai_4373m2, cy8ceval_062_mur_43439m2]">
        <num>Latest 5.X release</num>
        <commit>latest-v5.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="bsp_gen3 [cy8ckit_062s2_43012, cy8cproto_062_4343w, cy8ceval_062_s2_lai_4373m2, cy8ceval_062_mur_43439m2]">
        <num>5.0.0 release</num>
        <commit>release-v5.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="bsp_gen3 [cy8ckit_062s2_43012, cy8cproto_062_4343w, cy8ceval_062_s2_lai_4373m2, cy8ceval_062_mur_43439m2]">
        <num>Latest 4.X release</num>
        <commit>latest-v4.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="bsp_gen3 [cy8ckit_062s2_43012, cy8cproto_062_4343w, cy8ceval_062_s2_lai_4373m2, cy8ceval_062_mur_43439m2]">
        <num>4.0.0 release</num>
        <commit>release-v4.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version_v2="bsp_gen2 [cy8ckit_062s2_43012, cy8cproto_062_4343w, cy8ceval_062_s2_lai_4373m2]">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version_v2="bsp_gen2 [cy8ckit_062s2_43012, cy8cproto_062_4343w, cy8ceval_062_s2_lai_4373m2]">
        <num>3.1.0 release</num>
        <commit>release-v3.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version_v2="bsp_gen2 [cy8ckit_062s2_43012, cy8cproto_062_4343w]">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version_v2="bsp_gen2 [cy8ckit_062s2_43012, cy8cproto_062_4343w]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version_v2="bsp_gen2 [cy8ckit_062s2_43012, cy8cproto_062_4343w]">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version_v2="bsp_gen2 [cy8ckit_062s2_43012, cy8cproto_062_4343w]">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version_v2="bsp_gen2 [cy8ckit_062s2_43012, cy8cproto_062_4343w]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,usb,suspend,resume,mtb-flow">
    <name>USB Suspend and Resume</name>
    <id>mtb-example-psoc6-usb-suspend</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-usb-suspend</uri>
    <description><![CDATA[This code example demonstrates how PSoC&#8482; 6 USB detects a suspend condition, enters a low-power state, and restores normal operation when USB activity is resumed.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-usb-suspend/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led usb_device</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.2.0 release</num>
        <commit>release-v1.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,button,led,ble,findme,FMP,GAP peripheral,mtb-flow">
    <name>Bluetooth LE Find Me</name>
    <id>mtb-example-psoc6-ble-findme</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-ble-findme</uri>
    <description><![CDATA[This code example demonstrates the implementation of a simple Bluetooth&#174; Low Energy Immediate Alert Service (IAS)-based Find Me Profile (FMP) using PSoC&#8482; 6 MCU with Bluetooth&#174; Low Energy Connectivity.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-ble-findme/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led switch ble</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,anycloud,http,https,server,wifi" req_capabilities_v2="psoc6 cyw43xxx led wifi [flash_2048k, flash_1024k, flash_512k]">
    <name>HTTPS Server</name>
    <id>mtb-example-anycloud-https-server</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-https-server</uri>
    <description><![CDATA[This code example demonstrates the implementation of an HTTPS server with PSoC&#8482; 6 MCU and CYW43xxx connectivity devices. It employs the HTTPS server middleware library, which takes care of all the underlying socket connections with the HTTPS client. This example establishes a secure connection with a HTTPS client through SSL handshake. Once the SSL handshake completes successfully, the HTTPS client can make GET, POST, and PUT requests with the server.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-https-server/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license.<br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 cyw43xxx led wifi</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,anycloud,http,softap,tft,server,wifi,AP+STA concurrent mode,web server" req_capabilities_v2="psoc6 cyw43xxx led capsense_button capsense_linear_slider wifi [flash_2048k, flash_1024k]">
    <name>Wi-Fi Web Server</name>
    <id>mtb-example-anycloud-wifi-web-server</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-anycloud-wifi-web-server</uri>
    <description><![CDATA[This code example demonstrates Wi-Fi provisioning via a SoftAP interface and setting up a web server using PSoC&#8482; 6 MCU with AIROC&#8482; CYW43xxx Wi-Fi & Bluetooth&#174; combo chips. In this example, the PSoC&#8482; 6 MCU device is configured in AP+STA concurrent mode. It starts an HTTP web server while in AP+STA concurrent mode and hosts an HTTP web page. The kit can be connected to the desired Wi-Fi network by entering the credentials via this web page. After connecting to the specified Wi-Fi network, the device is reconfigured to start a new HTTP web server. The new web server hosts a web page that displays the device data containing ambient light sensor (ALS) value and provides a button to change the brightness of an LED.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-wifi-web-server/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack and the Mbed TLS open-source TLS/SSL library which has cryptographic capabilities. Creating a project from this template will cause lwIP and Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the lwIP &amp; Mbed TLS licenses and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 cyw43xxx led capsense_button capsense_linear_slider wifi</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,tcp,secure,client,wifi" req_capabilities_v2="psoc6 wifi cyw43xxx led switch [flash_2048k,flash_1024k,flash_512k]">
    <name>WiFi Secure TCP client</name>
    <id>mtb-example-wifi-secure-tcp-client</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-wifi-secure-tcp-client</uri>
    <description><![CDATA[This code example demonstrates the implementation of a secure TCP client using PSoC&#8482; 6 MCU with AIROC&#8482; CYW43xxx Wi-Fi & Bluetooth&#174; combo chips.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-wifi-secure-tcp-client/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack and the Mbed TLS open-source TLS/SSL library which has cryptographic capabilities. Creating a project from this template will cause lwIP and Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the lwIP &amp; Mbed TLS licenses and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx led switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 4.X release</num>
        <commit>latest-v4.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>4.0.0 release</num>
        <commit>release-v4.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,tcp,secure,server,wifi" req_capabilities_v2="psoc6 wifi cyw43xxx led switch [flash_2048k, flash_1024k, flash_512k]">
    <name>WiFi Secure TCP server</name>
    <id>mtb-example-wifi-secure-tcp-server</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-wifi-secure-tcp-server</uri>
    <description><![CDATA[This code example demonstrates the implementation of a secure TCP server using PSoC&#8482; 6 MCU with AIROC&#8482; CYW43xxx Wi-Fi & Bluetooth&#174; combo chips.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-wifi-secure-tcp-server/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack and the Mbed TLS open-source TLS/SSL library which has cryptographic capabilities. Creating a project from this template will cause lwIP and Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the lwIP &amp; Mbed TLS licenses and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx led switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 4.X release</num>
        <commit>latest-v4.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>4.0.0 release</num>
        <commit>release-v4.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,tcp,client,wifi" req_capabilities_v2="psoc6 wifi cyw43xxx led switch [flash_2048k,flash_1024k]">
    <name>WiFi TCP Client</name>
    <id>mtb-example-wifi-tcp-client</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-wifi-tcp-client</uri>
    <description><![CDATA[This code example demonstrates implementation of TCP client with PSoC&#8482; 6 MCU and CYW43xxx connectivity devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-wifi-tcp-client/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license. <br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx led switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,tcp,server,wifi" req_capabilities_v2="psoc6 wifi cyw43xxx led switch [flash_2048k,flash_1024k]">
    <name>WiFi TCP Server</name>
    <id>mtb-example-wifi-tcp-server</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-wifi-tcp-server</uri>
    <description><![CDATA[This code example demonstrates implementation of a TCP server with PSoC&#8482; 6 MCU and CYW43xxx connectivity devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-wifi-tcp-server/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack and the Mbed TLS open-source TLS/SSL library which has cryptographic capabilities. Creating a project from this template will cause lwIP and Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the lwIP &amp; Mbed TLS licenses and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx led switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,mqtt,client,wifi,aws,mosquitto" req_capabilities_v2="psoc6 wifi cyw43xxx led switch [flash_2048k, flash_1024k, flash_512k]">
    <name>WiFi MQTT Client</name>
    <id>mtb-example-wifi-mqtt-client</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-wifi-mqtt-client</uri>
    <description><![CDATA[This code example demonstrates implementing an MQTT Client using the MQTT Client library. The library uses the AWS IoT device SDK Port library and implements the glue layer that is required for the library to work with Infineon&#8482; connectivity platforms. This example can be ported to CM0+ core using a make variable CORE from Makefile.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-wifi-mqtt-client/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license.<br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx led switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 5.X release</num>
        <commit>latest-v5.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>5.0.0 release</num>
        <commit>release-v5.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 4.X release</num>
        <commit>latest-v4.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>4.0.0 release</num>
        <commit>release-v4.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>3.1.0 release</num>
        <commit>release-v3.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,mqtt,azure-iot,azure,azure-sdk,wifi" req_capabilities_v2="psoc6 wifi cyw43xxx [cy8cproto_062_4343W, cy8ckit_062_wifi_bt, cy8ckit_064s0s2_4343w, cy8ckit_062s2_43012, cyw9p62s1_43438evb_01, cyw9p62s1_43012evb_01, cy8ceval_062s2_lai_4373m2, cy8ceval_062s2_mur_43439m2]">
    <name>Connecting to Azure IoT</name>
    <id>mtb-example-azure-iot</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-azure-iot</uri>
    <description><![CDATA[This code example demonstrates connecting to the Azure IoT services using the <a href="https://github.com/Azure/azure-sdk-for-c">Azure SDK for Embedded C</a> and Infineon's Wi-Fi connectivity SDK in ModusToolbox&#8482;. This code example demonstrates the features such as IoT hub - C2D (Cloud-to-Device messaging), Telemetry, Methods, Twin, Provisioning, and PnP (Plug and Play).
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-azure-iot/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license.<br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,usb,audio,freertos,mtb-flow" req_capabilities_v2="psoc6 usb_device capsense_button capsense_linear_slider i2s [cy8ceval_062s2, cy8ceval_062_s2_lai_4373m2, cy8ckit_062_wifi_bt, cy8ckit_062s2_43012, cy8cproto_062_4343w, cyw9p62s1_43012evb_01, cyw9p62s1_43438evb_01]">
    <name>USB Audio Device FreeRTOS</name>
    <id>mtb-example-psoc6-usb-audio-device-freertos</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-usb-audio-device-freertos</uri>
    <description><![CDATA[This example demonstrates how to use PSoC&#8482; 6 MCU to implement a USB Audio Device and HID Audio Playback Control that connects to the PC via the USB interface. The example also uses FreeRTOS.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-usb-audio-device-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 usb_device capsense_button capsense_linear_slider i2s</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cryptography,trng,mtb-flow" req_capabilities_v2="hal [psoc6,xmc7000,t2gbh]">
    <name>Cryptography TRNG Demonstration</name>
    <id>mtb-example-psoc6-crypto-trng</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-crypto-trng</uri>
    <description><![CDATA[This code example demonstrates generating a One-Time Password (OTP) using the True Random Number generation feature of MCU cryptography block.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-crypto-trng/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>hal</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,bmi160,motion,motion-sensor,bmi160,freertos,mtb-flow" req_capabilities_v2="psoc6">
    <name>BMI160 Motion Sensor over I2C FreeRTOS</name>
    <id>mtb-example-psoc6-bmi160-motion-sensor-freertos</id>
    <category>Sensing</category>
    <uri>https://github.com/Infineon/mtb-example-psoc6-bmi160-motion-sensor-freertos</uri>
    <description><![CDATA[This code example demonstrates interfacing of the BMI160 Motion Sensor with PSoC&#8482; 6 MCU over an I2C interface within a FreeRTOS task. This example reads the raw motion data and estimates the orientation of the board.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-bmi160-motion-sensor-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,cryptography,aes,mtb-flow" req_capabilities_v2="uart [psoc6]">
    <name>Cryptography AES Demonstration</name>
    <id>mtb-example-psoc6-crypto-aes</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-crypto-aes</uri>
    <description><![CDATA[This code example encrypts and decrypts user input data using the AES algorithm using a 128-bit key. The encrypted and decrypted data are displayed on a UART terminal emulator.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-crypto-aes/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>uart</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,protection units,pc,smpu,dual cpu,memory,console,mtb-flow" req_capabilities_v2="psoc6 multi_core [capsense, flash_2048k]">
    <name>Protection Units FreeRTOS</name>
    <id>mtb-example-psoc6-dual-cpu-protection-units-freertos</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-dual-cpu-protection-units-freertos</uri>
    <description><![CDATA[This example demonstrates how to use the protection units to isolate the CM0+ CPU memory from CM4.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-dual-cpu-protection-units-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 multi_core</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>1.2.0 release</num>
        <commit>release-v1.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,led,starter,hello world,mtb-flow">
    <name>Hello World</name>
    <id>mtb-example-pmg1-hello-world</id>
    <category>Getting Started</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-pmg1-hello-world</uri>
    <description><![CDATA[This code example demonstrates simple UART communication by printing a "Hello World" message on a terminal and blinking an LED using Power Delivery Microcontroller Generation 1 (PMG1) devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-hello-world/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,usbpd,mtb-flow">
    <name>USBPD Sink</name>
    <id>mtb-example-pmg1-usbpd-sink</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-pmg1-usbpd-sink</uri>
    <description><![CDATA[This code example demonstrates USB-C attach detection and USB Power Delivery contract negotiation using Power Delivery Microcontroller Generation 1 (PMG1) devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-usbpd-sink/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>usbpd pmg1 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,usbpd,mtb-flow" req_capabilities_v2="usbpd pmg1 led [pmg1_cy7113]">
    <name>USBPD DRP</name>
    <id>mtb-example-pmg1-usbpd-drp</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-usbpd-drp</uri>
    <description><![CDATA[This code example demonstrates USB-C attach detection and USB Power Delivery contract negotiation using Power Delivery Microcontroller Generation 1 (PMG1) devices in DRP role.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-usbpd-drp/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>usbpd pmg1 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,usbpd,capsense,mtb-flow">
    <name>USBPD Sink CAPSENSE</name>
    <id>mtb-example-pmg1-usbpd-sink-capsense</id>
    <category>Sensing</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-usbpd-sink-capsense</uri>
    <description><![CDATA[This code example demonstrates CAPSENSE&#8482; functionality using a 5-segment CAPSENSE&#8482; slider and two CAPSENSE&#8482; buttons along with USB-C attach detection and USB Power Delivery contract negotiation using Power Delivery Microcontroller Generation 1 (PMG1) devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-usbpd-sink-capsense/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>usbpd pmg1 capsense led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,usbpd,mtb-flow" req_capabilities_v2="usbpd pmg1 led [pmg1_cy7113]">
    <name>USBPD Sink using FreeRTOS</name>
    <id>mtb-example-pmg1-usbpd-sink-freertos</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-usbpd-sink-freertos</uri>
    <description><![CDATA[This code example demonstrates USB-C attach detection and USB Power Delivery contract negotiation using Power Delivery Microcontroller Generation 1 (PMG1) devices. This code example uses FreeRTOS.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-usbpd-sink-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>usbpd pmg1 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,usb,mtb-flow,hid,mouse">
    <name>USB HID Mouse</name>
    <id>mtb-example-pmg1-usb-hid-mouse</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-usb-hid-mouse</uri>
    <description><![CDATA[This code example demonstrates how to configure the USB block in a PMG1 MCU as a Human Interface Device (HID). The device enumerates as a 3-button mouse.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-usb-hid-mouse/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1 usb_device</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,mtb-flow" req_capabilities_v2="pmg1">
    <name>Basic Device Firmware Upgrade</name>
    <id>mtb-example-pmg1-dfu-basic</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-dfu-basic</uri>
    <description><![CDATA[This code example demonstrates Device Firmware Upgrade (DFU) with PMG1 MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-dfu-basic/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,led,switch,gpio-interrupt,mtb-flow">
    <name>LED Switch Interface</name>
    <id>mtb-example-pmg1-led-sw-interface</id>
    <category>Getting Started</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-led-sw-interface</uri>
    <description><![CDATA[This code example demonstrates simple Switch and LED interface on Power Delivery Microcontroller Generation 1 (PMG1) devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-led-sw-interface">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1 led switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,led,switch,gpio-interrupt,i2c,pwm,dps310,mtb-flow">
    <name>USBPD Sink DPS310 I2C Sensor</name>
    <id>mtb-example-pmg1-usbpd-sink-dps310-i2c-sensor</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-usbpd-sink-dps310-i2c-sensor</uri>
    <description><![CDATA[This code example demonstrates how the USB Type-C and Power delivery contract negotiation is achieved using PMG1 devices. It also shows how to integrate PMG1 with DPS310 external temperature and pressure sensor through an I2C interface.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-usbpd-sink-dps310-i2c-sensor/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1 usbpd i2c uart switch led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,led,starter,critical-section,mtb-flow">
    <name>Critical Section</name>
    <id>mtb-example-pmg1-critical-section</id>
    <category>Getting Started</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-critical-section</uri>
    <description><![CDATA[This code example demonstrates the usage of critical section in the EZ-PD&#8482; PMG1 MCU device. Upon entering the critical section, the CPU will disable all interrupts and will not service any interrupt requests received. Interrupt requests are queued until the CPU exits the critical section; interrupts are enabled and serviced only after exit from the critical section.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-critical-section/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1 switch led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,uart,starter,dma,mtb-flow" req_capabilities_v2="pmg1 dma uart [pmg1_cy7113]">
    <name>UART Transmit Receive DMA</name>
    <id>mtb-example-pmg1-uart-transmit-receive-dma</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-uart-transmit-receive-dma</uri>
    <description><![CDATA[This code example demonstrates the UART transmit and receive operation in PMG1 devices using DMA. The application uses a serial terminal to read data and echoes what is received. The UART is configured to do both transmit and receive operations.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-uart-transmit-receive-dma/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1 dma uart</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,counter,LED,mtb-flow">
    <name>Counter LED</name>
    <id>mtb-example-pmg1-counter-led</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-counter-led</uri>
    <description><![CDATA[This code example demonstrates how to toggle an LED whenever the timer/counter in a PMG1 device is triggered every 1 second.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-counter-led/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,pwm,led,mtb-flow">
    <name>PWM LED</name>
    <id>mtb-example-pmg1-pwm-led</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-pwm-led</uri>
    <description><![CDATA[This code example shows the usage of the PWM block in the PMG1 MCU and how it can be used to toggle an LED.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-pwm-led/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,powermodes,sleep,deepsleep">
    <name>Power Modes</name>
    <id>mtb-example-pmg1-power-modes</id>
    <category>Getting Started</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-power-modes</uri>
    <description><![CDATA[This code example shows how to enter system Sleep and Deep Sleep modes. After entering Deep Sleep or Sleep mode, the example also shows how to wake up from these low-power modes and return to the Active mode.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-power-modes/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1 uart led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,eeprom,i2c-master">
    <name>I2C EEPROM</name>
    <id>mtb-example-pmg1-i2c-eeprom</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-i2c-eeprom</uri>
    <description><![CDATA[This code example demonstrates the configuration and usage of serial communication block (SCB) as I2C master to write and read data to an I2C (slave) EEPROM (24LC128).
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-i2c-eeprom/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1 i2c led uart switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,dfu,bootloader,mtb-flow" req_capabilities_v2="psoc6 led switch std_crypto [cy8ceval_062s2, cy8ceval_062_s2_lai_4373m2, cy8ckit_062_ble, cy8ckit_062_wifi_bt, cy8ckit_062s2_43012, cy8cproto_062_4343w, cy8cproto_062s3_4343w, cy8cproto_063_ble, cy8ckit_062s4, cyw9p62s1_43012evb_01, cyw9p62s1_43438evb_01]">
    <name>Basic Device Firmware Upgrade</name>
    <id>mtb-example-psoc6-dfu-basic</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-dfu-basic</uri>
    <description><![CDATA[This example demonstrates Device Firmware Upgrade (DFU) with PSoC&#8482; 6 MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-dfu-basic/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led switch std_crypto</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.1" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>1.4.0 release</num>
        <commit>release-v1.4.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>1.3.0 release</num>
        <commit>release-v1.3.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>1.2.0 release</num>
        <commit>release-v1.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,emulated,eeprom,flash,mtb-flow" req_capabilities_v2="psoc6 led">
    <name>Emulated EEPROM</name>
    <id>mtb-example-psoc6-emulated-eeprom</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-emulated-eeprom</uri>
    <description><![CDATA[This code example demonstrates emulation of EEPROM behavior in flash memory of PSoC&#8482; 6 MCU using emeeprom middleware.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-emulated-eeprom/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.2.0 release</num>
        <commit>release-v2.2.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,mcuboot,bootloader,mtb-flow" req_capabilities_v2="psoc6 std_crypto led qspi nor_flash [cy8ceval_062s2, cy8ceval_062_s2_lai_4373m2, cy8ceval_062_mur_43439m2, cy8ckit_062_ble, cy8ckit_062_wifi_bt, cy8ckit_062s2_43012, cy8cproto_062_4343w, cy8cproto_062s3_4343w, cyw9p62s1_43012evb_01, cyw9p62s1_43438evb_01]">
    <name>MCUboot-Based Basic Bootloader</name>
    <id>mtb-example-psoc6-mcuboot-basic</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-mcuboot-basic</uri>
    <description><![CDATA[This code example demonstrates building a simple bootloader application for PSoC&#8482; 6 MCUs using the open-source library - MCUboot.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-mcuboot-basic/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 std_crypto led qspi nor_flash</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 5.X release</num>
        <commit>latest-v5.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>5.1.0 release</num>
        <commit>release-v5.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>5.0.0 release</num>
        <commit>release-v5.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen3">
        <num>Latest 4.X release</num>
        <commit>latest-v4.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen3">
        <num>4.0.0 release</num>
        <commit>release-v4.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,mtb-flow,ml,nn,profiler" req_capabilities_v2="psoc6 uart [flash_2048k, flash_1856k, flash_1024k, flash_832k, flash_512k]">
    <name>Machine Learning Neural Network Profiler</name>
    <id>mtb-example-ml-profiler</id>
    <category>Machine Learning</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-ml-profiler</uri>
    <description><![CDATA[This code example demonstrates how to run through the machine learning (ML) development flow with PSoC&#8482; 6 MCU, where the end user has a pre-trained Neural Network (NN) model, which can be profiled and validated at the PC and target device.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-ml-profiler/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 uart</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.3" tools_max_version="2.2.3" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,mtb-flow,littlefs,filesystem,file,system,nor-flash,sd-card">
    <name>Littlefs Filesystem</name>
    <id>mtb-example-psoc6-filesystem-littlefs-freertos</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-filesystem-littlefs-freertos</uri>
    <description><![CDATA[This example shows how to perform file I/O operations using the <a href="https://github.com/littlefs-project/littlefs">littlefs</a> filesystem API on storage devices such as SD card and NOR flash. This example uses the <a href="https://github.com/Infineon/mtb-littlefs">mtb-littlefs</a> library that implements the block device drivers for use with littlefs.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-filesystem-littlefs-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 qspi nor_flash switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,mtb-flow,segger,emfile,FAT,filesystem,file,system,nor-flash,sd-card">
    <name>emFile Filesystem</name>
    <id>mtb-example-psoc6-filesystem-emfile-freertos</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-filesystem-emfile-freertos</uri>
    <description><![CDATA[This example shows how to create a FAT filesystem on storage devices such as SD card and NOR flash using the SEGGER emFile library.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-filesystem-emfile-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 qspi nor_flash switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc64,led,freertos,mtb-flow" req_capabilities_v2="secure_boot">
    <name>Secure Blinky LED FreeRTOS</name>
    <id>mtb-example-psoc6-secure-blinkyled-freertos</id>
    <category>Getting Started</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-secure-blinkyled-freertos</uri>
    <description><![CDATA[This code example demonstrates the implementation of two tasks with FreeRTOS. One task blinks an LED and the other prints an incrementing counter value out to the UART.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-secure-blinkyled-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>secure_boot</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,msc,capsense,csd,touchpad,tuning,mtb-flow">
    <name>MSC CAPSENSE CSD Touchpad Tuning</name>
    <id>mtb-example-psoc4-msc-capsense-csd-touchpad-tuning</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-msc-capsense-csd-touchpad-tuning</uri>
    <description><![CDATA[This code example demonstrates how to manually tune a self capacitance-based touchpad widget in PSoC&#8482; 4 devices using the Multi Sense Converter (MSC) CSD-RM sensing technique and CAPSENSE&#8482; Tuner GUI.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-msc-capsense-csd-touchpad-tuning/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led msc_touchpad</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,msc,capsense,csx,touchpad,tuning,mtb-flow">
    <name>MSC Multi-Touch CSX Touchpad Tuning</name>
    <id>mtb-example-psoc4-msc-capsense-csx-touchpad-tuning</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-msc-capsense-csx-touchpad-tuning</uri>
    <description><![CDATA[This code example demonstrates how to manually tune a mutual capacitance-based touchpad widget in PSoC&#8482; 4 devices using the Multi Sense Converter (MSC) CSX-RM sensing technique and CAPSENSE&#8482; Tuner GUI.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-msc-capsense-csx-touchpad-tuning/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led msc_touchpad</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,machine-learning,ml,bmx160,gesture,motion sensor,mtb-flow">
    <name>Machine Learning Gesture Classification</name>
    <id>mtb-example-ml-gesture-classification</id>
    <category>Machine Learning</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-ml-gesture-classification</uri>
    <description><![CDATA[This code example demonstrates how to perform gesture classification based on motion sensor (accelerometer and gyroscope) data. The code example comes with a pre-trained model that classifies the following gestures: circle, square, and side-to-side.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-ml-gesture-classification/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 spi arduino cyw43xxx</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="btsdk,mesh,ble,sensors,sensor hub,als,ambient,light,temperature,thermistor,i2c,adc,mtb-flow">
    <name>Mesh SensorHub</name>
    <id>mtb-example-btsdk-mesh-sensorhub</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-btsdk-mesh-sensorhub</uri>
    <description><![CDATA[This example demonstrates the use of a Bluetooth&#174; Low Energy Mesh sensor model with Ambient Light and Temperature sensor interfaced with AIROC&#8482; CYW20835 Bluetooth&#174; LE system-on-chip using ModusToolbox&#8482; software.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-btsdk-mesh-sensorhub/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>mesh fw2 led2x ncu15wf104 button MAX44009EDT</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,emwin,display,tft,freertos,mtb-flow,appwizard" req_capabilities_v2="psoc6 arduino switch">
    <name>emWin TFT FreeRTOS</name>
    <id>mtb-example-psoc6-emwin-tft-freertos</id>
    <category>Graphics</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-emwin-tft-freertos</uri>
    <description><![CDATA[This example demonstrates displaying 2D graphics on a TFT display using the Segger emWin graphics library and the AppWizard GUI design tool in FreeRTOS. The application initializes the system peripherals and creates a task that cycles through demo images in response to button presses.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-emwin-tft-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 arduino switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="bsp_gen4 [cy8ckit_062_wifi_bt, cy8ckit_062_ble, cyw9p62s1_43438evb_01, cy8ckit_062s2_43012, cy8ceval_062_s2, cy8ceval_062_s2_lai_4373m2, cy8ceval_062_mur_43439m2]">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="bsp_gen4 [cy8ckit_062_wifi_bt, cy8ckit_062_ble, cyw9p62s1_43438evb_01, cy8ckit_062s2_43012, cy8ceval_062_s2, cy8ceval_062_s2_lai_4373m2, cy8ceval_062_mur_43439m2]">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" tools_max_version="2.4.1" req_capabilities_per_version_v2="bsp_gen3 [cy8ckit_062_wifi_bt, cy8ckit_062_ble, cyw9p62s1_43438evb_01, cy8ckit_062s2_43012, cy8ceval_062_s2, cy8ceval_062_s2_lai_4373m2, cy8ceval_062_mur_43439m2, cy8ckit_064s0s2_4343w, cy8ckit_064b0s2_4343w]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" tools_max_version="2.4.1" req_capabilities_per_version_v2="bsp_gen3 [cy8ckit_062_wifi_bt, cy8ckit_062_ble, cyw9p62s1_43438evb_01, cy8ckit_062s2_43012, cy8ceval_062_s2, cy8ceval_062_s2_lai_4373m2, cy8ceval_062_mur_43439m2, cy8ckit_064s0s2_4343w, cy8ckit_064b0s2_4343w]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.2.0" req_capabilities_per_version_v2="bsp_gen2 [cy8ckit_062_wifi_bt, cy8ckit_062_ble, cyw9p62s1_43438evb_01, cy8ckit_062s2_43012, cy8ckit_064b0s2_4343w]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.2.0" req_capabilities_per_version_v2="bsp_gen2 [cy8ckit_062_wifi_bt, cy8ckit_062_ble, cyw9p62s1_43438evb_01, cy8ckit_062s2_43012, cy8ckit_064b0s2_4343w]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,lin">
    <name>LIN Slave</name>
    <id>mtb-example-psoc4-lin-slave</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-psoc4-lin-slave</uri>
    <description><![CDATA[This code example shows how to implement a basic LIN 2.2 slave using the LIN Middleware in PSoC&#8482; 4. PSoC&#8482; 4 responds to an external LIN Master's commands to either turn on the corresponding color LED on PSoC&#8482; development kit or report the current LED color status.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-lin-slave/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 lin</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,qspi-flash,flash,qspi,spi-qspi-flash,led,mtb-flow" req_capabilities_v2="psoc6 led qspi nor_flash [cy8ceval_062s2, cy8ceval_062_s2_lai_4373m2, cy8ckit_062_ble, cy8ckit_062_wifi_bt, cy8ckit_062s2_43012,cy8cproto_062_4343w, cy8cproto_062s3_4343w, cyw9p62s1_43012evb_01, cyw9p62s1_43438evb_01, cy8ckit_062s4]">
    <name>QSPI XIP</name>
    <id>mtb-example-psoc6-qspi-xip</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-qspi-xip</uri>
    <description><![CDATA[This example demonstrates how to use the QSPI block of the PSoC&#8482; 6 MCU in execute-in-place (XIP) mode with an external flash memory device.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-qspi-xip/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led qspi nor_flash</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,qspi,spi,nor,flash,sfdp,smif,serial-flash,mtb-flow" req_capabilities_v2="psoc6 std_crypto led qspi nor_flash">
    <name>QSPI Flash Read Write Using SFDP</name>
    <id>mtb-example-psoc6-qspi-readwrite-sfdp</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-qspi-readwrite-sfdp</uri>
    <description><![CDATA[This example demonstrates interfacing with an external NOR flash memory in Quad-SPI mode using the Serial Memory Interface (SMIF) block in PSoC&#8482; 6 MCU. This example uses the Serial Flash Discoverable Parameters (SFDP) standard to auto-discover the flash parameters and the commands for read, program, and erase operations.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-qspi-readwrite-sfdp/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 std_crypto led qspi nor_flash</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,qspi,spi,nor,flash,smif,serial-flash,mtb-flow" req_capabilities_v2="psoc6 std_crypto led qspi nor_flash">
    <name>QSPI Flash Read Write</name>
    <id>mtb-example-psoc6-qspi-readwrite</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-qspi-readwrite</uri>
    <description><![CDATA[This example demonstrates interfacing with an external NOR flash memory in Quad SPI (QSPI) mode using the serial memory interface (SMIF) block in PSoC&#8482;&trade; 6 MCU.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-qspi-readwrite/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 std_crypto led qspi nor_flash</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,psoc6,canfd,mtb-flow" req_capabilities_v2="led can [psoc4,psoc6] [cy8ckit_041s_max,cy8ckit_062s4,cy8cproto_062s3_4343w]">
    <name>CAN FD</name>
    <id>mtb-example-canfd</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-canfd</uri>
    <description><![CDATA[This example demonstrates how to use CAN FD in Infineon's PSoC&#8482; 6 and PSoC&#8482; 4 MCU devices. In this example, the CANFD Node-1 sends a CAN FD frame to CANFD-Node-2 on pressing the user button and vice versa. Both the CAN FD nodes log the received data over UART serial terminal. Each time a CAN FD Frame is received, the user LED toggles.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-canfd/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>led can</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,msc,capsense,csd,slider,tuning,mtb-flow">
    <name>MSC CAPSENSE CSD Slider Tuning</name>
    <id>mtb-example-psoc4-msc-capsense-csd-slider-tuning</id>
    <category>Sensing</category>
    <uri>https://github.com/Infineon/mtb-example-psoc4-msc-capsense-csd-slider-tuning</uri>
    <description><![CDATA[This code example demonstrates how to manually tune a self capacitance-based slider widget in PSoC&#8482; 4 devices using the Multi Sense Converter (MSC) CSD-RM sensing technique and CAPSENSE&#8482; Tuner GUI.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-msc-capsense-csd-slider-tuning/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led msc_slider</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="measurement,ble,client,server,throughput,btsdk,mtb-flow">
    <name>LE Throughput</name>
    <id>mtb-example-btsdk-ble-throughput</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-btsdk-ble-throughput</uri>
    <description><![CDATA[This code example demonstrates the maximum Bluetooth&#174; LE throughput (using GATT layer notifications and write command) that can be obtained with Infineon AIROC&#8482; CYW20xxx Bluetooth&#174; devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-btsdk-ble-throughput/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>fw2 btsdk led2x button</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="optiga,security,crypto,ecc,rsa,ecdsa,ecdh,mtb-flow">
    <name>OPTIGA Cryptography</name>
    <id>mtb-example-optiga-crypto</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-optiga-crypto</uri>
    <description><![CDATA[This example uses an Infineon OPTIGA&#8482; Trust Security Solution on a PSoC&#8482; 6 MCU to execute example code to perform available crypto operations on the Secure Element.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-optiga-crypto/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>optiga_trust_m</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="optiga,power-management,hibernation,mtb-flow">
    <name>OPTIGA Power management</name>
    <id>mtb-example-optiga-power-management</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-optiga-power-management</uri>
    <description><![CDATA[This example uses an Infineon OPTIGA&#8482; Trust Security Solution on a PSoC&#8482; 6 MCU to execute example code to control the hibernation feature on the security solution.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-optiga-power-management/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>optiga_trust_m</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="optiga,security,crypto,ecc,mbedtls,ecdsa,ecdh,mqtt,aws,mtb-flow">
    <name>OPTIGA MQTT Client</name>
    <id>mtb-example-optiga-mqtt-client</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-optiga-mqtt-client</uri>
    <description><![CDATA[This example uses an Infineon OPTIGA&#8482; Trust Security Solution on a PSoC&#8482; 6 MCU to execute example code to perform an MQTT connection to the AWS IoT Cloud.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-optiga-mqtt-client/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>optiga_trust_m wifi</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="optiga,security,management,python,crypto,ecc,rsa,ecdsa,ecdh,mtb-flow">
    <name>OPTIGA Trust M Data and certificates management</name>
    <id>mtb-example-optiga-data-management</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-optiga-data-management</uri>
    <description><![CDATA[This example uses an Infineon OPTIGA&#8482; Trust Security Solution on a PSoC&#8482; 6 MCU to execute example code to manage internal aata or key Objects including its Update.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-optiga-data-management/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>optiga_trust_m</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="btsdk keyboard scanner cyw208xx row column">
    <name>HAL Keyboard Scanner</name>
    <id>mtb-example-btsdk-cyw208xx-keyboard-scanner</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-btsdk-cyw208xx-keyboard-scanner</uri>
    <description><![CDATA[This code example demonstrates the dedicated keyscan hardware, which processes key press events from proprietary GPIOs (LHL GPIOs) without interrupting the CPU core. This code example also demonstrates low power entry when the system is idle (no activity or keypress) and wake up when there is key press.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-btsdk-cyw208xx-keyboard-scanner/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>fw2 btsdk CYW208XX_62fbga</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,wifi,anycloud,ota,mqtt,mcuboot,bootloader" req_capabilities_v2="psoc6 wifi cyw43xxx led std_crypto qspi nor_flash flash_2048k [cy8ckit_062s2_43012, cy8cproto_062_4343w]">
    <name>MCUboot-Based Bootloader with Rollback</name>
    <id>mtb-example-anycloud-mcuboot-rollback</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-mcuboot-rollback</uri>
    <description><![CDATA[This code example implements a bootloader based on MCUboot to demonstrate &#8216;Rollback&#8217; to a known good image ('factory_app_cm4') in case of unrecoverable error conditions in the current application. The bootloader can load the factory app from a known location in the external memory by directly copying it into the primary slot in the internal flash, based on user inputs during boot. The factory app can then perform the OTA to download an image over Wi-Fi and place it to the secondary slot of MCUboot.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-mcuboot-rollback/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license. <br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx led std_crypto qspi nor_flash flash_2048k</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.1" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,emulated,eeprom,flash,mtb-flow">
    <name>Emulated EEPROM</name>
    <id>mtb-example-psoc4-emulated-eeprom</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-psoc4-emulated-eeprom</uri>
    <description><![CDATA[This example demonstrates how to use the Em_EEPROM middleware in PSoC&#8482; 4 MCU devices. In this example, a counter is read from the Emulated EEPROM (Em_EEPROM), incremented, written back to the Em_EEPROM and printed on a serial terminal. This occurs on every device reset or power cycle. As a result, an incrementing value is printed on every reset.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-emulated-eeprom/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,sar,adc,die temperature,opamp" req_capabilities_v2="psoc4 adc opamp">
    <name>SAR ADC BASIC</name>
    <id>mtb-example-psoc4-sar-adc</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-psoc4-sar-adc</uri>
    <description><![CDATA[This example demonstrates how to use the SAR ADC in PSoC&#8482; 4 MCU devices. In this example, the ADC is configured to measure inputs from different sources and display results through a uart terminal.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc4-sar-adc/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 adc opamp</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version_v2="[bsp_gen4]">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version_v2="[bsp_gen3]">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,btstack,freertos,cts,server,bluetooth" req_capabilities_v2="psoc6 bt led cyw43xxx [flash_2048k, flash_1024k, flash_512k, cy8ckit_064b0s2_4343w]">
    <name>Bluetooth LE CTS Server</name>
    <id>mtb-example-btstack-freertos-cts-server</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/Infineon/mtb-example-btstack-freertos-cts-server</uri>
    <description><![CDATA[This code example demonstrates the implementation of a simple AIROC&#8482; Bluetooth&#174; LE GAP central - GATT server with Current time service (CTS) using the AIROC&#8482; Wi-Fi & Bluetooth&#174; combos and ModusToolbox&#8482; Software Environment.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-btstack-freertos-cts-server/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 bt led cyw43xxx</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 4.X release</num>
        <commit>latest-v4.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>4.0.0 release</num>
        <commit>release-v4.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,btstack,freertos,cts,client,bluetooth" req_capabilities_v2="psoc6 bt led cyw43xxx [flash_2048k, flash_1024k, flash_512k, cy8ckit_064b0s2_4343w]">
    <name>Bluetooth LE CTS Client</name>
    <id>mtb-example-btstack-freertos-cts-client</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/Infineon/mtb-example-btstack-freertos-cts-client</uri>
    <description><![CDATA[This code example demonstrates the implementation of a simple AIROC&#8482; Bluetooth&#174; LE GAP peripheral - GATT client with Current time service (CTS) using the AIROC&#8482; Wi-Fi & Bluetooth&#174; combos and ModusToolbox&#8482; Software Environment.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-btstack-freertos-cts-client/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 bt led cyw43xxx</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 4.X release</num>
        <commit>latest-v4.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>4.0.0 release</num>
        <commit>release-v4.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.1" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,sensor,xensiv,radar,presence,csk">
    <name>Radar Presence Application</name>
    <id>mtb-example-sensors-radar-presence</id>
    <category>Sensing</category>
    <uri>https://github.com/Infineon/mtb-example-sensors-radar-presence</uri>
    <description><![CDATA[This application demonstrates the use of the radar presence application on the feather board.<br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-sensors-radar-presence/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cysbsyskit_dev_01</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,sensor,xensiv,radar,entrance counter,csk">
    <name>Radar Entrance Counter Application</name>
    <id>mtb-example-sensors-radar-entrancecounter</id>
    <category>Sensing</category>
    <uri>https://github.com/Infineon/mtb-example-sensors-radar-entrancecounter</uri>
    <description><![CDATA[This application demonstrates the use of the radar entrance counter application on the feather board.<br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-sensors-radar-entrancecounter/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cysbsyskit_dev_01</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,sensor,xensiv,co2,pasco2,dps,dps3xx,csk">
    <name>PAS CO2 Application</name>
    <id>mtb-example-sensors-pasco2</id>
    <category>Sensing</category>
    <uri>https://github.com/Infineon/mtb-example-sensors-pasco2</uri>
    <description><![CDATA[This application demonstrates the use of the pas co2 pressure sensor on the feather board.<br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-sensors-pasco2/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cysbsyskit_dev_01</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,sensor,xensiv,anycloud,radar,presence,counter,entrance counter,csk">
    <name>Radar Sensor MQTT Client</name>
    <id>mtb-example-sensors-radar-anycloud-mqtt-client</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-sensors-radar-anycloud-mqtt-client</uri>
    <description><![CDATA[This application demonstrates how to implement an MQTT client for publishing presence or entrance counter events to the cloud.<br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-sensors-radar-anycloud-mqtt-client/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cysbsyskit_dev_01</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,sensor,xensiv,anycloud,co2,pasco2,csk">
    <name>PAS CO2 Sensor MQTT Client</name>
    <id>mtb-example-sensors-pasco2-anycloud-mqtt-client</id>
    <category>Sensing</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-sensors-pasco2-anycloud-mqtt-client</uri>
    <description><![CDATA[This application demonstrates how to implement an MQTT client for publishing the current PPM level to the cloud.<br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-sensors-pasco2-anycloud-mqtt-client/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cysbsyskit_dev_01</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cyw43907,uart,mtb-flow">
    <name>UART Transmit and Receive</name>
    <id>mtb-example-cyw43907-uart-tx-rx</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-cyw43907-uart-tx-rx</uri>
    <description><![CDATA[This code example demonstrates the UART (HAL) transmit and receive operation in CYW43907. The application uses a serial terminal to read data and to echo back the received data. The UART resource is configured to do both transmit and receive operations.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-cyw43907-uart-tx-rx/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cat4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cyw43907, hello world, led, timer, mtb-flow">
    <name>Hello World</name>
    <id>mtb-example-cyw43907-hello-world</id>
    <category>Getting Started</category>
    <uri>https://github.com/Infineon/mtb-example-cyw43907-hello-world</uri>
    <description><![CDATA[This code example demonstrates the simple UART communication by printing a "Hello World" message on a terminal and blinks an LED using a Timer resource using CYW43907.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-cyw43907-hello-world/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cat4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cyw43907, watchdog timer, mtb-flow">
    <name>Watchdog Timer</name>
    <id>mtb-example-cyw43907-wdt</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-cyw43907-wdt</uri>
    <description><![CDATA[This code example explains how to set up a Watchdog Timer using the WDT HAL resource. The WDT resets the device if it is not serviced or "kicked" within the configured timeout interval. This helps in recovering the program from an unintended lock up.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-cyw43907-wdt/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cat4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cyw43907, gpio, mtb-flow">
    <name>GPIO</name>
    <id>mtb-example-cyw43907-gpio</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-cyw43907-gpio</uri>
    <description><![CDATA[This code example demonstrates the use of a GPIO configured as an input pin to generate interrupts on CYW43907. The GPIO signal interrupts the CPU and executes a user-defined Interrupt Service Routine (ISR).
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-cyw43907-gpio/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cat4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cyw43907, pwm, mtb-flow">
    <name>PWM Square Wave</name>
    <id>mtb-example-cyw43907-pwm</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-cyw43907-pwm</uri>
    <description><![CDATA[This code example generates a square wave using the PWM driver. An LED connected to the PWM output pin blinks at 1000 Hz with Variable Duty Cycle.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-cyw43907-pwm/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cat4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cyw43907,tcp,client,wifi,mtb-flow">
    <name>TCP Client</name>
    <id>mtb-example-cyw43907-tcp-client</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-cyw43907-tcp-client</uri>
    <description><![CDATA[This code example demonstrates the implementation of a TCP client.
    The example establishes a connection with a remote TCP server and based on the command received from the TCP server,
    turns the user LED ON or OFF.
    Additionally, this code example can be configured to bring up the Wi-Fi device either in STA interface or in Soft AP interface mode.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-cyw43907-tcp-client/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cat4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cyw43907,tcp,server,wifi,mtb-flow">
    <name>TCP Server</name>
    <id>mtb-example-cyw43907-tcp-server</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-cyw43907-tcp-server</uri>
    <description><![CDATA[This code example demonstrates the implementation of a TCP server.
    In this example, the TCP server establishes a connection with a TCP client. Once the connection completes successfully, the  server allows the user to send LED ON/OFF command to the TCP client and the client responds by sending an acknowledgement message to the server. Additionally, this code example can be configured to bring up the Wi-Fi device either in STA interface or in Soft AP interface mode.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-cyw43907-tcp-server/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cat4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cyw43907,secure,tcp,client,wifi,mtb-flow">
    <name>Secure TCP Client</name>
    <id>mtb-example-cyw43907-secure-tcp-client</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-cyw43907-secure-tcp-client</uri>
    <description><![CDATA[This code example demonstrates the implementation of a secure TCP client.
    In this example, a TCP client establishes a secure connection with a TCP server through a SSL handshake.
    Once the SSL handshake completes successfully, the TCP client turns ON or OFF the user LED based on the command received    from the TCP server. The Wi-Fi device can be brought up in either STA or Soft AP interface mode.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-cyw43907-secure-tcp-client/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cat4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cyw43907,secure,tcp,server,wifi,mtb-flow">
    <name>Secure TCP Server</name>
    <id>mtb-example-cyw43907-secure-tcp-server</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-cyw43907-secure-tcp-server</uri>
    <description><![CDATA[This code example demonstrates the implementation of a secure TCP server.
    In this example, the TCP server establishes a secure connection with a TCP client through SSL handshake.
    Once the SSL handshake completes successfully, the server allows the user to send LED ON/OFF command to the TCP client;
    the client responds by sending an acknowledgement message to the server.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-cyw43907-secure-tcp-server/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cat4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cyw43907,scan,wifi,mtb-flow">
    <name>Wi-Fi Scan</name>
    <id>mtb-example-cyw43907-wifi-scan</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-cyw43907-wifi-scan</uri>
    <description><![CDATA[This example demonstrates how to configure different scan filters provided in the Wi-Fi connection manager (WCM) middleware and
    scan for the available Wi-Fi networks. The example initializes the Wi-Fi device, starts a Wi-Fi scan without any filter, and prints the results on the serial terminal.
    The example starts a scan every three seconds after the previous scan completes.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-cyw43907-wifi-scan/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cat4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cyw43907,i2c,mtb-flow">
    <name>I2C Master</name>
    <id>mtb-example-cyw43907-i2c</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-cyw43907-i2c</uri>
    <description><![CDATA[This code example demonstrates the I2C (HAL) operation in CYW43907 MCU. The application uses I2C to read data from CY8CKIT-032 PSoC&#8482; Analog Front End (AFE) Arduino Shield and
    display the result in the UART serial Terminal every time the user presses the button.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-cyw43907-i2c/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cat4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cyw43907,mqtt,client,wifi,mtb-flow">
    <name>MQTT Client</name>
    <id>mtb-example-cyw43907-mqtt-client</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-cyw43907-mqtt-client</uri>
    <description><![CDATA[This code example demonstrates implementing an MQTT client using the MQTT client library. The library uses the AWS IoT device SDK MQTT client library that includes an MQTT 3.1.1 client.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-cyw43907-mqtt-client/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cat4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cyw43907,https,wifi,server,secure,mtb-flow">
    <name>Secure HTTP Server</name>
    <id>mtb-example-cyw43907-secure-http-server</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-cyw43907-secure-http-server</uri>
    <description><![CDATA[This code example demonstrates the implementation of an HTTPS server with AIROC&#8482; CYW43907 MCU.It employs the HTTPS server middleware library,
    which takes care of all the underlying socket connections with the HTTPS client.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-cyw43907-secure-http-server/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cat4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cyw43907,udp,client,wifi,mtb-flow">
    <name>UDP Client</name>
    <id>mtb-example-cyw43907-udp-client</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-cyw43907-udp-client</uri>
    <description><![CDATA[This code example demonstrates the implementation of a UDP client with CYW43907 connectivity device.
    The example establishes a connection with a remote UDP server, and based on the command received from the UDP server,
    turns the user LED ON or OFF.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-cyw43907-udp-client/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cat4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="cyw43907,udp,server,wifi,mtb-flow">
    <name>UDP Server</name>
    <id>mtb-example-cyw43907-udp-server</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-cyw43907-udp-server</uri>
    <description><![CDATA[In this code example, the UDP server waits for the UDP client to establish connection.
    Once the connection is established, the server allows the user to send the LED ON/OFF command to the UDP client through a button press;
    the client responds by sending an acknowledgement message to the server.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-cyw43907-udp-server/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>cat4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,usb,cdc,echo,mtb-flow" req_capabilities_v2="psoc6 usb_device">
    <name>USB CDC echo</name>
    <id>mtb-example-psoc6-usb-cdc-echo</id>
    <category>Peripherals</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-usb-cdc-echo</uri>
    <description><![CDATA[This example demonstrates how to configure the USB block in a PSoC&#8482;&trade; 6 MCU for communication device class (CDC). When configured for a CDC, the PSoC&#8482;&trade; 6 MCU device enumerates a virtual COM port, which can be read and written by a terminal emulator program on a PC.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-usb-cdc-echo/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 usb_device</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="privacy,bonding,mtb-flow,btstack,freertos,bluetooth" req_capabilities_v2="psoc6 bt led [cyw9p62s1_43012evb_01,cyw9p62s1_43438evb_01,cy8ckit_062_wifi_bt,cy8ckit_062s2_43012,cy8cproto_062_4343w,cy8ceval_062_mur_43439m2,cy8ceval_062_s2_lai_4373m2]">
    <name>Bluetooth LE Peripheral Privacy</name>
    <id>mtb-example-btstack-freertos-peripheral-privacy</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/Infineon/mtb-example-btstack-freertos-peripheral-privacy</uri>
    <description><![CDATA[This code example demonstrates the privacy features available to users in Bluetooth&#174; Low Energy 5.0 and above using ModusToolbox&#8482; software.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-btstack-freertos-peripheral-privacy/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 bt led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,anycloud,bluetooth,mqtt,client,wifi,aws,iot,mosquitto" req_capabilities_v2="psoc6 wifi bt cyw43xxx led switch anycloud [cy8ceval_062_mur_43439m2, cy8ckit_062s2_43012]">
    <name>Bluetooth LE IoT Gateway</name>
    <id>mtb-example-anycloud-ble-wifi-gateway</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-ble-wifi-gateway</uri>
    <description><![CDATA[This code example demonstrates implementing a Bluetooth&#174; IoT gateway using the MQTT client library and Bluetooth&#174; LE host stack for Infineon connectivity devices. The MQTT client library uses the AWS IoT device SDK that includes an MQTT 3.1.1 client as well as libraries specific to AWS IoT such as Thing Shadows. The Bluetooth&#174; Mesh stack runs with FreeRTOS in the server and client model.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-anycloud-ble-wifi-gateway/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license.<br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi bt cyw43xxx led switch anycloud</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,audio,ml, machine-learning,sensiml,inference engine,demo">
    <name>SensiML Template Firmware</name>
    <category>Machine Learning</category>
    <id>psoc6-template-fw</id>
    <uri>https://github.com/sensiml/psoc6-template-fw</uri>
    <description><![CDATA[This package contains a demo project for the CY8CKIT-062S2-43012 and CY8CKIT-028-SENSE kit using SensiML. This application is to collect data allowing models to be generated using the SensiML plaform and deployed to the device.
    <br><br>For more details, see the <a href="https://github.com/sensiml/psoc6-template-fw/blob/main/README.md">README on GitHub</a>.<br><br><a href="https://sensiml.com/">SensiML</a> SensiML, a subsidiary of QuickLogic, offers cutting-edge AutoML software tools empowering application developers to rapidly build smart IoT devices, transforming raw sensor data into autonomous meaningful insight.<br> > <a href="https://sensiml.com/documentation/firmware/infineon-psoc6/infineon-psoc6-cy8ckit-062s2-43012.html">Get Started</a><br> > <a href="https://sensiml.com/plans/">SensiML Subscription Plans</a>]]></description>
    <req_capabilities>psoc6 pdm rgb_led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,temp,sensor,adc,8-bit,temperature,mtb-flow" req_capabilities_v2="pmg1 usbpd uart led switch [pmg1_cy7110, pmg1_cy7111, pmg1_cy7112]">
    <name>On Chip Temp Sensor 8 bit SAR ADC</name>
    <id>mtb-example-pmg1-on-chip-temp-sensor-8-bit-saradc</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-on-chip-temp-sensor-8-bit-saradc</uri>
    <description><![CDATA[This code example demonstrates the method of reading internal temperature through a BJT based on-chip temperature sensor provided on Power Delivery Microcontroller Generation 1 (PMG1) devices, using the 8-bit SAR ADC in USB PD block and to display the temperature value on a UART terminal on switch press.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-on-chip-temp-sensor-8-bit-saradc/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1 usbpd uart led switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,temp,sensor,adc,12-bit,temperature,mtb-flow" req_capabilities_v2="pmg1 adc uart led switch [pmg1_cy7113]">
    <name>On Chip Temp Sensor 12 bit SAR ADC</name>
    <id>mtb-example-pmg1-on-chip-temp-sensor-12-bit-saradc</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-on-chip-temp-sensor-12-bit-saradc</uri>
    <description><![CDATA[This code example demonstrates the method of reading internal temperature through BJT based on-chip temperature sensor provided on PMG1-S3 devices, using the programmable 12-bit SAR ADC and to display the temperature value on a UART terminal on switch press. This example also explains the steps for configuration of internal temperature sensor and analog signal routing using Device Configurator tool.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-on-chip-temp-sensor-12-bit-saradc/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1 adc uart led switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,uart">
    <name>UART echo</name>
    <id>mtb-example-pmg1-uart-echo</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-uart-echo</uri>
    <description><![CDATA[This code example demonstrates the UART transmit and receive operation in PMG1 devices. The application uses a serial terminal to write data and echoes what is received. The UART is configured to do both transmit and receive operations.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-uart-echo/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1 uart</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pairing,mtb-flow,bluetooth,button" req_capabilities_v2="bt led [cyw920829m2evb_01, cy8ckit_062_ble, cy8cproto_063_ble, cyble_416045_eval]">
    <name>Bluetooth LE Hello Sensor</name>
    <id>mtb-example-btstack-freertos-hello-sensor</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/Infineon/mtb-example-btstack-freertos-hello-sensor</uri>
    <description><![CDATA[This code example demonstrates the implementation of Bluetooth&#174; LE custom service with Bluetooth&#174; security using AIROC&#8482; CYW20829, PSoC&#8482; 6 , and ModusToolbox&#8482; software.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-btstack-freertos-hello-sensor/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>bt led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 3.X release</num>
        <commit>latest-v3.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>3.0.0 release</num>
        <commit>release-v3.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,spi">
    <name>SPI Slave</name>
    <id>mtb-example-pmg1-spi-slave</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-spi-slave</uri>
    <description><![CDATA[This code example demonstrates the SPI Slave in PMG1. The slave device's LED is toggled depending on the master's command. The master's LED is toggled depending on the slave's status reported.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-spi-slave/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1 spi</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,spi">
    <name>SPI Master</name>
    <id>mtb-example-pmg1-spi-master</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-spi-master</uri>
    <description><![CDATA[This code example demonstrates the SPI Master in PMG1. The slave device's LED is toggled depending on the SPI master's command. The master's LED is toggled depending on the slave's status reported.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-spi-master/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1 spi</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,analog,ctbm,ctb,opamp,comparator,mtb-flow" req_capabilities_v2="pmg1 opamp [pmg1_cy7113]">
    <name>CTBm OpAmp comparator</name>
    <id>mtb-example-pmg1-ctbm-opamp-comparator</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-ctbm-opamp-comparator</uri>
    <description><![CDATA[This code example demonstrates the method of using opamps in the Continuous Time Block mini (CTBm) resource on PMG1-S3 MCU devices for processing continuous-time signals. This includes the CTBm configuration as an opamp comparator and analog routing of inputs and the output. The output of the comparator is monitored by observing the state of an on-board LED.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-ctbm-opamp-comparator/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1 opamp</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,adc,sar,12-bit,analog,pass,mtb-flow" req_capabilities_v2="pmg1 adc uart led [pmg1_cy7113]">
    <name>12 bit SAR ADC</name>
    <id>mtb-example-pmg1-12-bit-saradc-basic</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-12-bit-saradc-basic</uri>
    <description><![CDATA[This code example demonstrates the method of using the 12-bit SAR ADC on PMG1-S3 MCU to read the input voltage applied in both differential and single-ended modes and to display the measured voltage and corresponding output codes in signed/unsigned format. It also explains the configuration of PASS 0 12-bit SAR ADC 0 using the Device Configurator tool.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-12-bit-saradc-basic/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1 adc uart led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,adc,sar,8-bit,analog,mtb-flow">
    <name>8 bit SAR ADC</name>
    <id>mtb-example-pmg1-8-bit-saradc-basic</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-8-bit-saradc-basic</uri>
    <description><![CDATA[This code example demonstrates the method of using the 8-bit SAR ADC in the USBPD block on PMG1 MCU to measure the external input voltage. The measured voltage values and the corresponding ADC results are displayed on a UART terminal.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-8-bit-saradc-basic/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1 usbpd uart led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,uart,flash">
    <name>Flash write</name>
    <id>mtb-example-pmg1-flash-write</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-flash-write</uri>
    <description><![CDATA[This code example demonstrates writing to the flash and displaying the status through a UART terminal in PMG1 devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-flash-write/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1 uart</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,usb,mtb-flow,cdc,echo">
    <name>USBFS CDC echo</name>
    <id>mtb-example-pmg1-usbfs-cdc</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-usbfs-cdc</uri>
    <description><![CDATA[This code example demonstrates how to configure the USB block on PMG1 MCU as a Communication Device Class (CDC). When configured for CDC, the PMG1 MCU device enumerates as virtual COM port, which can be read and written using a terminal emulator program on a PC.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-usbfs-cdc/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1 usb_device</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.3.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,usb,mtb-flow,msc,mass storage, file system">
    <name>USBFS MSC File System in SRAM</name>
    <id>mtb-example-pmg1-usbfs-msc-fs-sram</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-usbfs-msc-fs-sram</uri>
    <description><![CDATA[This code example demonstrates how to configure the USB block on EZ-PD&#8482; PMG1 MCU as a mass storage class (MSC) device and will emulate a file system in the SRAM memory.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-usbfs-msc-fs-sram/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1 usb_device switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,i2c,slave,led">
    <name>I2C Slave LED</name>
    <id>mtb-example-pmg1-i2c-slave-led</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-i2c-slave-led</uri>
    <description><![CDATA[This code example demonstrates how the I2C block in the EZ-PD PMG1 MCU device can be used as a slave. An external I2C master sends commands, which are used to turn ON or OFF the user LED.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-i2c-slave-led/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1 i2c</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,crypto,trng,cryptolite,otp" req_capabilities_v2="pmg1 [pmg1_cy7113]">
    <name>Cryptography TRNG</name>
    <id>mtb-example-pmg1-crypto-trng</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-crypto-trng</uri>
    <description><![CDATA[This code example demonstrates how to generate a 4-byte one-time password (OTP) with the true random number generation feature using the Cryptographic hardware block in PMG1 MCU.
      <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-crypto-trng/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="beacon,mtb-flow,bluetooth,ble">
    <name>Bluetooth LE Extended Advertisement Beacon</name>
    <id>mtb-example-btstack-freertos-extadv-beacon</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/Infineon/mtb-example-btstack-freertos-extadv-beacon</uri>
    <description><![CDATA[This code example demonstrates the implementation of Bluetooth&#174; Low Energy extended advertisements and use of beacon library using ModusToolbox&#8482; software.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-btstack-freertos-extadv-beacon/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>ble cyw920829m2evb_01</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pairing,mtb-flow,bluetooth,button" req_capabilities_v2="bt cyw20829 [cyw920829_vr]">
    <name>AIROC LE CYW20829 Voice Remote</name>
    <id>mtb-example-btstack-freertos-cyw20829-voice-remote</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/Infineon/mtb-example-btstack-freertos-cyw20829-voice-remote</uri>
    <description><![CDATA[This solution demonstrates the basic features of HID (Human Interface Device) Profile from Bluetooth&#174; Low Energy  with Android TV.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-btstack-freertos-cyw20829-voice-remote/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>bt cyw20829</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,usb,i2c,multi,master,multi-master">
    <name>I2C multi-master</name>
    <id>mtb-example-pmg1-i2c-multi-master</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-i2c-multi-master</uri>
    <description><![CDATA[This code example demonstrates how to use the SCB I2C component in master-slave configuration to send and receive I2C data to toggle the state of the onboard LEDs using PMG1 MCU devices.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-i2c-multi-master/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1 i2c</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,watchdog,wdt,timer,reset,interrupt,mtb-flow">
    <name>Watchdog Timer</name>
    <id>mtb-example-pmg1-watchdog-timer</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-watchdog-timer</uri>
    <description><![CDATA[This code example demonstrates the method of using the watchdog timer (WDT) on PMG1 devices to automatically reset the device in the event of an unexpected firmware execution path that compromises the CPU functionality. It also explains the configuration of the watchdog timer as an interrupt source to generate a periodic interrupt that can be used to execute specific tasks..
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-watchdog-timer/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1 led switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,usb,mtb-flow,vendor interface,Bulkloop">
    <name>USB FS vendor interface</name>
    <id>mtb-example-pmg1-usbfs-vendor-interface</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-usbfs-vendor-interface</uri>
    <description><![CDATA[This code example demonstrates how to configure the USB block on EZ-PD&#8482; PMG1 MCU as a vendor interface. When configured for vendor interface, the EZ-PD&#8482; PMG1 MCU device enumerates as Cypress FX3 USB BulkloopExample Device, which can be read and written using a USB Control Center on a PC...
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-usbfs-vendor-interface/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1 usb_device</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,wifi,aws,iot,ota,mqtt" req_capabilities_v2="psoc6 cyw43xxx wifi led [flash_2048k, flash_1856k]">
    <name>AWS IoT OTA Using MQTT</name>
    <id>mtb-example-aws-iot-ota-mqtt</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-aws-iot-ota-mqtt</uri>
    <description><![CDATA[This code example demonstrates an OTA update with PSoC&#8482; 6 MCU and AIROC&#8482; CYW43xxx Wi-Fi & Bluetooth combo chips. The example uses the "AWS SDK for Embedded C" and "AWS IoT device sdk port" to connect and communicate with the AWS IoT MQTT core.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-aws-iot-ota-mqtt/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license. <br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 cyw43xxx wifi led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pmg1,usb,mtb-flow,billboard">
    <name>USBFS Billboard</name>
    <id>mtb-example-pmg1-usbfs-billboard</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-pmg1-usbfs-billboard</uri>
    <description><![CDATA[This code example demonstrates how to configure the USB block on PMG1 MCU as a Billboard device.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-pmg1-usbfs-billboard/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>pmg1 usb_device</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,csdidac,mtb-flow,capsense,csd,dac" req_capabilities_v2="psoc6 capsense [flash_2048k,flash_1024k,flash_512k]">
    <name>CSD Current DAC</name>
    <id>mtb-example-psoc6-csdidac</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-psoc6-csdidac</uri>
    <description><![CDATA[This code example demonstrates the usage of CAPSENSE&#8482; Sigma Delta (CSD) current digital-to-analog converter (IDAC) in PSoC&#8482; 6 MCU. It loops through the configured current settings and then drives the external pin as per the setting which can be verified through an external load resistor. The configured current setting is also displayed in the terminal application.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-csdidac/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 capsense</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,led,capsense,button,slider,i2c,tuner,mtb-flow,capsense-on-cm0+,dual-cpu-example" req_capabilities_v2="psoc6 led capsense_button capsense_linear_slider [flash_2048k,flash_1024k,flash_512k,flash_256k]">
    <name>CAPSENSE on CM0p</name>
    <id>mtb-example-psoc6-capsense-cm0p</id>
    <category>Sensing</category>
    <uri>https://github.com/Infineon/mtb-example-psoc6-capsense-cm0p</uri>
    <description><![CDATA[This code example demonstrates how to create a CAPSENSE#8482; design using CM0+ CPU of PSoC#8482; 6 MCU, without utilizing CM4 CPU. The code example features CAPSENSE#8482; buttons, button 0 turns the LED ON while the button 1 turns the LED OFF and the slider controls the brightness of the LED using the CAPSENSE#8482; Middleware Library. The code example also demonstrates interfacing with Tuner GUI using I2C interface.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-capsense-cm0p/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led capsense_button capsense_linear_slider</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="3.0.0" req_capabilities_per_version="bsp_gen4">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,smpu,ppu,ipc,mtb-flow,security" req_capabilities_v2="psoc6 [cy8ckit_062_ble, cy8ckit_062_wifi_bt, cy8ckit_062s2_43012, cy8cproto_062_4343w, cy8cproto_062s3_4343w, cy8cproto_063_ble]">
    <name>Security App</name>
    <id>mtb-example-psoc6-security</id>
    <category>Getting Started</category>
    <uri>https://github.com/Infineon/mtb-example-psoc6-security</uri>
    <description><![CDATA[This code example is a minimal starter dual-CPU security application template for PSoC&trade; 62/63 MCU devices that demonstrates secure boot, memory protection, protected storage, device firmware update and signing your application.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-psoc6-security/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="pairing,mtb-flow,bluetooth,button,le-lr" req_capabilities_v2="bt led [cyw920829m2evb_01]">
    <name>Bluetooth LE Long Range</name>
    <id>mtb-example-btstack-freertos-le-lr</id>
    <category>Bluetooth&#174;</category>
    <uri>https://github.com/Infineon/mtb-example-btstack-freertos-le-lr</uri>
    <description><![CDATA[This code example demonstrates the use of LE Long Range PHY with Infineon AIROC&#8482; CYW20829 Bluetooth&#174; devices using ModusToolbox&#8482; software.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-btstack-freertos-le-lr/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>bt led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen3">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" tools_max_version="2.4.1" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,CCM,helloworld" req_capabilities_v2="psoc6">
    <name>CCM hello world</name>
    <id>mtb-example-ccm-mqtt-helloworld</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-ccm-mqtt-helloworld</uri>
    <description><![CDATA[This code example demonstrates publishing MQTT messages to the AWS IoT Core with the help of the Cloud Connectivity Manager (CCM) evaluation kit.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-ccm-mqtt-helloworld/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,CCM,capsense" req_capabilities_v2="psoc6 capsense_linear_slider">
    <name>CCM CAPSENSE Publish</name>
    <id>mtb-example-ccm-mqtt-publish-capsense-slider</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-ccm-mqtt-publish-capsense-slider</uri>
    <description><![CDATA[This code example demonstrates publishing MQTT messages to AWS IoT Core with the help of Cloud Connectivity Manager (CCM) evaluation kit.
    This code example features a 5-segment CAPSENSE&#8482; slider. The brightness of the LED is calculated based on the position in linear slider and
    the brightness is published to the topic "MySubTopic" in AWS IoT core.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-ccm-mqtt-publish-capsense-slider/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 capsense_linear_slider</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,CCM,OTA,subscribe" req_capabilities_v2="psoc6 capsense_linear_slider">
    <name>CCM Subscribe OTA</name>
    <id>mtb-example-ccm-mqtt-ota-subscribe</id>
    <category>Wi-Fi</category>
    <uri>https://github.com/Infineon/mtb-example-ccm-mqtt-ota-subscribe</uri>
    <description><![CDATA[This code example demonstrates MQTT Subscribe and OTA from AWS IoT Core with the help of the Cloud Connectivity Manager (CCM) evaluation kit.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-ccm-mqtt-ota-subscribe/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 capsense_linear_slider</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="wlc1,usbpd,mtb-flow">
    <name>WLC1 EPP Power Transmitter</name>
    <id>mtb-example-wlc1-ptx-epp</id>
    <category>Peripherals</category>
    <uri>https://github.com/Infineon/mtb-example-wlc1-ptx-epp</uri>
    <description><![CDATA[This code example demonstrates the wireless charging power transmitter EPP function with USB-PD sink as the power input.
    <br><br>For more details, see the <a href="https://github.com/Infineon/mtb-example-wlc1-ptx-epp/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>usbpd wlc1</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.4.0" req_capabilities_per_version="bsp_gen3">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
</apps>
