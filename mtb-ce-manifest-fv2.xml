<apps version="2.0">
  <app keywords="psoc6,starter,template,empty,blank,mtb-flow">
    <name>Empty PSoC6 App</name>
    <id>mtb-example-psoc6-empty-app</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-empty-app</uri>
    <description><![CDATA[This empty application provides a template for creating applications using PSoC 6 devices.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-empty-app/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,led,starter,hello world,mtb-flow">
    <name>Hello World</name>
    <id>mtb-example-psoc6-hello-world</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-hello-world</uri>
    <description><![CDATA[This code example demonstrates simple UART communication by printing a "Hello World" message on a terminal and blinks an LED using a Timer resource using PSoC 6 MCU.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-hello-world/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.1 release</num>
        <commit>release-v2.0.1</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,mtb-flow,led,pwm,square wave,frequency,duty cycle,blinky,blinking">
    <name>PWM Square Wave</name>
    <id>mtb-example-psoc6-pwm-square-wave</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-pwm-square-wave</uri>
    <description><![CDATA[This code example generates a square wave using the PWM driver. An LED connected to the PWM output pin blinks at 2 Hz.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-pwm-square-wave/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,led,capsense,button,slider,i2c,tuner,mtb-flow">
    <name>CapSense Buttons and Slider</name>
    <id>mtb-example-psoc6-capsense-buttons-slider</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-capsense-buttons-slider</uri>
    <description><![CDATA[This code example features a 5-segment CapSense slider and two CapSense buttons. Button 0 turns the LED on, Button 1 turns the LED off and the slider controls the brightness of the LED. The code example also demonstrates interfacing with Tuner GUI using I2C interface.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-capsense-buttons-slider/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led capsense_button capsense_linear_slider</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,led,capsense,button,slider,i2c,tuner,rtos,mtb-flow">
    <name>CapSense Buttons and Slider FreeRTOS</name>
    <id>mtb-example-psoc6-capsense-buttons-slider-freertos</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-capsense-buttons-slider-freertos</uri>
    <description><![CDATA[This code example features a 5-segment CapSense slider and two CapSense buttons. Button 0 turns the LED on, Button 1 turns the LED off and the slider controls the brightness of the LED. The code example also demonstrates interfacing with Tuner GUI using I2C interface.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-capsense-buttons-slider-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led capsense_button capsense_linear_slider</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,uart,transmit,receive,mtb-flow">
    <name>UART Transmit and Receive</name>
    <id>mtb-example-psoc6-uart-transmit-receive</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-uart-transmit-receive</uri>
    <description><![CDATA[This example demonstrates the UART (HAL) transmit and receive operation in PSoC 6 MCU.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-uart-transmit-receive/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,uart,transmit,receive,dma,mtb-flow">
    <name>SCB UART Transmit and Receive using DMA</name>
    <id>mtb-example-psoc6-uart-transmit-receive-dma</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-uart-transmit-receive-dma</uri>
    <description><![CDATA[This example demonstrates the UART transmit and receive operation using DMA in PSoC 6 MCU.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-uart-transmit-receive-dma/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,i2c,master,slave,mtb-flow">
    <name>I2C Master</name>
    <id>mtb-example-psoc6-i2c-master</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-i2c-master</uri>
    <description><![CDATA[This example demonstrates the use of I2C (HAL) resource for PSoC 6 MCU in Master mode.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-i2c-master/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,i2c,ezi2c,master,slave,mtb-flow">
    <name>I2C Master EzI2C Slave</name>
    <id>mtb-example-psoc6-i2c-master-ezi2c-slave</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-i2c-master-ezi2c-slave</uri>
    <description><![CDATA[This example demonstrates the use of I2C (HAL) resource for PSoC 6 MCU in Master mode with an EzI2C slave.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-i2c-master-ezi2c-slave/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,i2c,slave,mtb-flow">
    <name>I2C Slave Using Callbacks</name>
    <id>mtb-example-psoc6-i2c-slave-callback</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-i2c-slave-callback</uri>
    <description><![CDATA[This example demonstrates the operation of the I2C (HAL) resource for PSoC 6 MCU in Slave mode using callbacks.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-i2c-slave-callback/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,spi,master,slave,mtb-flow">
    <name>SPI Master</name>
    <id>mtb-example-psoc6-spi-master</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-spi-master</uri>
    <description><![CDATA[This example demonstrates the use of SPI (HAL) resource for PSoC 6 MCU in Master mode.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-spi-master/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,spi,master,slave,dma,mtb-flow">
    <name>SCB SPI Master DMA</name>
    <id>mtb-example-psoc6-spi-master-dma</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-spi-master-dma</uri>
    <description><![CDATA[This example demonstrates the use of PSoC 6 MCU Serial Communication Block (SCB) resource in SPI Master mode using DMA.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-spi-master-dma/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,led,smartio,smart io,pwm,mtb-flow">
    <name>Ramping LED using Smart IO</name>
    <id>mtb-example-psoc6-smartio-ramping-led</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-smartio-ramping-led</uri>
    <description><![CDATA[This example uses a PWM resource and Smart I/O in PSoC 6 MCU to implement a ramping LED, where an LED gradually cycles through increasing and decreasing brightness levels. There is no CPU usage except for the initialization of PWM and Smart I/O.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-smartio-ramping-led/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led smart_io</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,eink,emwin,freertos,display,mtb-flow">
    <name>emWin E-Ink FreeRTOS</name>
    <id>mtb-example-psoc6-emwin-eink-freertos</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-emwin-eink-freertos</uri>
    <description><![CDATA[This code example demonstrates displaying 2D graphics on an E-Ink display using EmWin graphics library in FreeRTOS.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-emwin-eink-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led arduino switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,oled,emwin,freertos,display,mtb-flow">
    <name>emWin OLED FreeRTOS</name>
    <id>mtb-example-psoc6-emwin-oled-freertos</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-emwin-oled-freertos</uri>
    <description><![CDATA[This code example demonstrates displaying 2D graphics on an OLED display using EmWin graphics library in FreeRTOS.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-emwin-oled-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 arduino switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,pwm,tcpwm,asymmetric,mtb-flow">
    <name>Asymmetric PWM Generation</name>
    <id>mtb-example-psoc6-pwm-dual-compare-capture</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-pwm-dual-compare-capture</uri>
    <description><![CDATA[This code example demonstrates the generation of asymmetric PWM signals using two compare/capture registers available in the TCPWM block of the PSoC 6 MCU devices.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-pwm-dual-compare-capture/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 cy8ckit_062s4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,cryptography,sha2,message digest,hash,mtb-flow">
    <name>Cryptography SHA Demonstration</name>
    <id>mtb-example-psoc6-crypto-sha</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-crypto-sha</uri>
    <description><![CDATA[This code example shows how to generate a 32-byte hash value or message digest for an arbitrary user input message with the SHA2 algorithm using the Cryptographic hardware block in PSoC 6 MCU.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-crypto-sha/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 std_crypto</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,csdadc,mtb-flow">
    <name>CSDADC</name>
    <id>mtb-example-psoc6-csdadc</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-csdadc</uri>
    <description><![CDATA[This example demonstrates the usage of CSD analog-to-digital converter (ADC) in PSoC 6 MCU. CSDADC measures the external voltage and displays the conversion result the terminal application.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-csdadc/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 capsense</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,dual cpu,starter,template,empty,blank,mtb-flow">
    <name>Dual-CPU Empty PSoC6 App</name>
    <id>mtb-example-psoc6-dual-cpu-empty-app</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-dual-cpu-empty-app</uri>
    <description><![CDATA[This empty application provides a template for creating dual-CPU applications using PSoC 6 devices.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-dual-cpu-empty-app/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 std_crypto</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,pdm,pcm,mtb-flow,audio,microphone">
    <name>PDM PCM Audio</name>
    <id>mtb-example-psoc6-pdm-pcm</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-pdm-pcm</uri>
    <description><![CDATA[This example demonstrates how to use the pulse-density modulation/pulse-code modulation (PDM/PCM) hardware block in PSoC 6 MCU with a digital microphone.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-pdm-pcm/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 pdm</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,i2s,mtb-flow,audio,codec">
    <name>I2S Audio</name>
    <id>mtb-example-psoc6-i2s</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-i2s</uri>
    <description><![CDATA[This example demonstrates how to use the I2S hardware block in PSoC 6 MCU to interface with an audio codec.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-i2s/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 i2s</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,ipc,mtb-flow,pipes">
    <name>Dual-CPU IPC Pipes</name>
    <id>mtb-example-psoc6-dual-cpu-ipc-pipes</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-dual-cpu-ipc-pipes</uri>
    <description><![CDATA[This example demonstrates how to use the inter-processor communication (IPC) driver to implement a message pipe in PSoC 6 MCU. The pipe is used to send messages between CPUs.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-dual-cpu-ipc-pipes/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 std_crypto switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,ipc,mtb-flow,semaphore">
    <name>Dual-CPU IPC Semaphore</name>
    <id>mtb-example-psoc6-dual-cpu-ipc-sema</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-dual-cpu-ipc-sema</uri>
    <description><![CDATA[This example demonstrates how to use the inter-processor communication (IPC) driver to implement a semaphore in PSoC 6 MCU. The semaphore is used as a lock to control access to a resource shared by the CPUs and synchronize the initialization instructions.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-dual-cpu-ipc-sema/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 std_crypto led switch</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,mtb-flow,ble,bluetooth,anycloud,beacon,eddystone,multi-adv,4343w,43012">
    <name>AnyCloud BLE Multi Beacon</name>
    <id>mtb-example-anycloud-ble-multi-beacon</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-ble-multi-beacon</uri>
    <description><![CDATA[This code example demonstrates the implementation of a beacon which advertises multiple Eddystone ADV data.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-anycloud-ble-multi-beacon/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 bt</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,mtb-flow,ble,bluetooth,anycloud,onboarding,4343w,43012">
    <name>AnyCloud Wi-Fi Onboarding Using BLE</name>
    <id>mtb-example-anycloud-ble-wifi-onboarding</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-ble-wifi-onboarding</uri>
    <description><![CDATA[This code example demonstrates WiFi Onboarding using BLE.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-anycloud-ble-wifi-onboarding/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 wifi bt anycloud</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,sar,adc,op amp,mtb-flow">
    <name>Low-Power Analog Front End using OpAmp and SAR ADC</name>
    <id>mtb-example-psoc6-low-power-analog-front-end</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-low-power-analog-front-end</uri>
    <description><![CDATA[This example demonstrates the low-power analog features of PSoC 6 MCU using an OpAmp and SAR ADC. PDL is used for the application firmware. This example is supported only for the devices like CY8C62x4 which have an OpAmp and SAR ADC capable of operating in System Deep Sleep mode.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-low-power-analog-front-end/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 cy8ckit_062s4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,sar,analog,sensor,mtb-flow">
    <name>SAR ADC Low Power Sensing - Thermistor and ALS</name>
    <id>mtb-example-psoc6-low-power-sar-adc-thermistor-als</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-low-power-sar-adc-thermistor-als</uri>
    <description><![CDATA[This example demonstrates low-power sensing of a thermistor and ambient light sensor (ALS) using the SAR ADC of PSoC 6 MCU. PDL is used for the application firmware. This example is supported only for the devices like CY8C62x4 which have a SAR ADC capable of operating in System Deep Sleep mode.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-low-power-sar-adc-thermistor-als/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 cy8ckit_062s4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,capsense,tuner,ble,server,tuning,mtb-flow">
    <name>CapSense Tuning Over BLE - Server</name>
    <id>mtb-example-psoc6-ble-capsense-tuner-server</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-ble-capsense-tuner-server</uri>
    <description><![CDATA[This code example demonstrates how to monitor the CapSense data and tune the CapSense sensors over BLE communication with CapSense Tuner GUI using PSoC 6 BLE MCU. This is intended to be used with the CapSense Tuning Over BLE - Client example.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-ble-capsense-tuner-server/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led ble capsense_button capsense_linear_slider</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,capsense,tuner,ble,client,tuning,ezi2c,mtb-flow">
    <name>CapSense Tuning Over BLE - Client</name>
    <id>mtb-example-psoc6-ble-capsense-tuner-client</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-ble-capsense-tuner-client</uri>
    <description><![CDATA[This code example demonstrates how to monitor the CapSense data and tune the CapSense sensors over BLE communication with CapSense Tuner GUI using PSoC 6 BLE MCU. This is intended to be used with the CapSense Tuning Over BLE - Server example.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-ble-capsense-tuner-client/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led ble</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,sar,adc,simultaneous sampling,mtb-flow">
    <name>SAR ADC Simultaneous Sampling</name>
    <id>mtb-example-psoc6-sar-adc-simultaneous-sampling</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-sar-adc-simultaneous-sampling</uri>
    <description><![CDATA[This code example demonstrates simultaneous sampling of two SAR ADCs. The simultaneouly sampled input voltages by SAR ADCs are displayed on UART. PDL is used for the application firmware. This example is supported only for the devices like CY8C62x4 which have two SAR ADCs.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-sar-adc-simultaneous-sampling/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 cy8ckit_062s4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="btsdk,spi,cyw208xx,data-logger,mtb-flow">
    <name>CYW208xx Data logger</name>
    <id>mtb-example-btsdk-cyw208xx-data-logger</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-btsdk-cyw208xx-data-logger</uri>
    <description><![CDATA[This code example includes two applications that demonstrate the operation of multiple Serial Peripheral Interface (SPI) interfaces using the CYW208xx Bluetooth SoC.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-btsdk-cyw208xx-data-logger/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>CYW208XX ncu15wf104</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="btsdk,privacy,bonding,mtb-flow">
    <name>BLE Peripheral Privacy</name>
    <id>mtb-example-btsdk-peripheral-privacy</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-btsdk-peripheral-privacy</uri>
    <description><![CDATA[This code example demonstrates the privacy features available to users in Bluetooth 5.0 and above.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-btsdk-peripheral-privacy/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>button fw2 btsdk</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="btsdk,spi,cyw20719b2,mtb-flow">
    <name>CYW20719B2 SPI</name>
    <id>mtb-example-btsdk-cyw20719b2-spi</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-btsdk-cyw20719b2-spi</uri>
    <description><![CDATA[This code example demonstrates the SPI interface using CYW20719B2 boards.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-btsdk-cyw20719b2-spi/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>ncu15wf104 CYW920719B2Q40EVB_01 fw2 btsdk</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="btsdk,sensors,sensor hub,motion,accelerometer,gyro,compass,temperature,thermistor,magnetic,3d magnetic,i2c,adc,mtb-flow">
    <name>Sensor Hub</name>
    <id>mtb-example-btsdk-sensorhub</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-btsdk-sensorhub</uri>
    <description><![CDATA[This code example demonstrates the interfacing of Multiple sensors, Motion, Temperature, and 3D magnetic sensor and sends the data over GATT custom service.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-btsdk-sensorhub/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>lsm9ds1 ncu15wf104 fw2 btsdk</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="GPIO,PWM,btsdk,mtb-flow">
    <name>PWM GPIO</name>
    <id>mtb-example-btsdk-pwm-gpio</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-btsdk-pwm-gpio</uri>
    <description><![CDATA[This example demonstrates the configuration of PWM (pulse width modulation) to control the brightness of an LED, and configuration of GPIO to toggle an LED ON and OFF.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-btsdk-pwm-gpio/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>fw2 btsdk led2x</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,starter,template,empty,blank,mtb-flow">
    <name>Empty PSoC4 App</name>
    <id>mtb-example-psoc4-empty-app</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-empty-app</uri>
    <description><![CDATA[This empty application provides a template for creating applications using PSoC 4 devices.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-empty-app/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,led,capsense,custom scan,mtb-flow">
    <name>CapSense Custom Scan</name>
    <id>mtb-example-psoc6-capsense-custom-scan</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-capsense-custom-scan</uri>
    <description><![CDATA[This code example demonstrates CapSense custom scanning through CapSense Middleware's callback functions that allow altering the sensor parameters during runtime or synchronizing the CapSense scan with non-CapSense operations. In this code example, the callback function is used to change the inactive sensor state to either shield or ground depending on the sensor being scanned.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-capsense-custom-scan/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led capsense_linear_slider</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,msc,usb,file system,mass storage,sd,mtb-flow">
    <name>USB Mass Storage File System</name>
    <id>mtb-example-psoc6-usb-msc-file-system</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-usb-msc-file-system</uri>
    <description>This example demonstrates how to configure the USB block in a PSoC 6 MCU device as a Mass Storage (MSC) device and run a file system (FatFs) through an external memory (microSD). This example uses FreeRTOS.</description>
    <req_capabilities>psoc6 led usb_device pdm switch sdhc</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,anycloud,wifi,mtb-flow,wifi-scan,wcm,scan filters">
    <name>AnyCloud Wi-Fi Scan</name>
    <id>mtb-example-anycloud-wifi-scan</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-wifi-scan</uri>
    <description><![CDATA[This code example demonstrates how to configure different scan filters provided in the Wi-Fi Connection Manager (WCM) middleware and scan for the available Wi-Fi networks.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-anycloud-wifi-scan/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack and the Mbed TLS open-source TLS/SSL library which has cryptographic capabilities. Creating a project from this template will cause lwIP and Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the lwIP &amp; Mbed TLS licenses and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx led switch anycloud</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,anycloud,wifi,mtb-flow,wcm,wps,enrollee,wps-pbc,wps-sta-pin">
    <name>AnyCloud WPS Enrollee</name>
    <id>mtb-example-anycloud-wps-enrollee</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-wps-enrollee</uri>
    <description><![CDATA[This code example demonstrates how to use the connection management and WPS Enrollee feature provided in the Wi-Fi Connection Manager (WCM) middleware.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-anycloud-wps-enrollee/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack and the Mbed TLS open-source TLS/SSL library which has cryptographic capabilities. Creating a project from this template will cause lwIP and Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the lwIP &amp; Mbed TLS licenses and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx led switch anycloud</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,sgpio,target,mtb-flow,smartio,spi">
    <name>SGPIO Target Interface</name>
    <id>mtb-example-psoc6-smartio-sgpio-target</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-smartio-sgpio-target</uri>
    <description><![CDATA[This example uses a SPI resource and Smart I/O in PSoC 6 MCU to implement the SGPIO Target interface.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-smartio-sgpio-target/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 smart_io</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.1.0 release</num>
        <commit>release-v1.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,capsense,slider,linear slider,csd,tuning,i2c,tuner">
    <name>CapSense CSD Slider Tuning</name>
    <id>mtb-example-psoc4-capsense-csd-slider-tuning</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-capsense-csd-slider-tuning</uri>
    <description><![CDATA[This code example demonstrates how to manually tune Self Capacitance (CSD) based slider widget in PSoC 4 devices using CapSense Tuner GUI.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-capsense-csd-slider-tuning/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 capsense_linear_slider</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,mtb-flow,ble,bluetooth,anycloud,battery,4343w,43012">
    <name>AnyCloud BLE Battery Server</name>
    <id>mtb-example-anycloud-ble-battery-server</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-ble-battery-server</uri>
    <description><![CDATA[This code example demonstrates the implementation of a simple BLE Battery Service.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-anycloud-ble-battery-server/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 bt led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,mtb-flow,ble,bluetooth,anycloud,findme,4343w,43012">
    <name>AnyCloud BLE Findme</name>
    <id>mtb-example-anycloud-ble-findme</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-ble-findme</uri>
    <description><![CDATA[This design implements a BLE FMP(Find Me Profile) that consists of an IAS(Immediate Alert Service). FMP and IAS are BLE standard Profile and Service respectively, as defined by the Bluetooth SIG.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-anycloud-ble-findme/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 bt led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,led,capsense,button,slider,i2c,tuner,ble,bluetooth,anycloud,4343w,43012,43438,mtb-flow">
    <name>Anycloud BLE CapSense Buttons and Slider</name>
    <id>mtb-example-anycloud-ble-capsense-buttons-slider</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-ble-capsense-buttons-slider</uri>
    <description><![CDATA[This code example features a 5-segment CapSense slider and two CapSense buttons with BLE custom service. Button 0 turns the LED on, Button 1 turns the LED off and the slider controls the brightness of the LED. The LED status is notified to the client via BLE GATT profile.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-anycloud-ble-capsense-buttons-slider/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led bt capsense_button capsense_linear_slider</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,lpa,anycloud,wifi,wlan,lowpower">
    <name>AnyCloud WLAN Low Power</name>
    <id>mtb-example-anycloud-wlan-lowpower</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-wlan-lowpower</uri>
    <description><![CDATA[This code example demonstrates the low-power operation of a host MCU and a WLAN device using the network activity handlers provided by the Low Power Assistant middleware for Cypress connectivity devices.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-anycloud-wlan-lowpower/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license. <br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx led low_power anycloud</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,lpa,anycloud,wifi,wlan,offload,tcp-keepalive">
    <name>AnyCloud TCP Keepalive Offload</name>
    <id>mtb-example-anycloud-offload-tcp-keepalive</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-offload-tcp-keepalive</uri>
    <description><![CDATA[This code example demonstrates the TCP Keepalive Offload functionality offered by Cypress Wi-Fi devices using PSoC 6 MCU. It employs Low Power Assistant (LPA) middleware library which helps in developing low power applications for the Cypress devices.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-anycloud-offload-tcp-keepalive/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license. <br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx low_power anycloud</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,qspi,fram,led">
    <name>QSPI F-RAM Access</name>
    <id>mtb-example-psoc6-qspi-fram-access</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-qspi-fram-access</uri>
    <description><![CDATA[This code example demonstrates interfacing PSoC 6 MCU with an external QSPI F-RAM memory and access it in Single, Dual, or Quad SPI mode using the Serial Memory Interface (SMIF) block. This example uses the PSoC 6 MCU standard QSPI HAL driver library to build the QSPI F-RAM access API.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-qspi-fram-access/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led qspi fram</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,i2c,i2c-slave,callback,pwm,mtb-flow">
    <name>I2C Slave Using Callbacks</name>
    <id>mtb-example-psoc4-i2c-slave-callback</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-i2c-slave-callback</uri>
    <description><![CDATA[This example demonstrates the operation of the I2C block for PSoC 4 in Slave mode using callbacks.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-i2c-slave-callback/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,tcpwm,interrupt">
    <name>Periodic Interrupt Using TCPWM</name>
    <id>mtb-example-psoc4-tcpwm-interrupt</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-tcpwm-interrupt</uri>
    <description><![CDATA[This example uses the TCPWM Component in the Timer/Counter mode to generate a periodic interrupt. An LED toggles whenever the interrupt occurs.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-tcpwm-interrupt/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,uart,led,mtb-flow">
    <name>Hello World</name>
    <id>mtb-example-psoc4-hello-world</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-hello-world</uri>
    <description><![CDATA[This code example demonstrates simple UART communication by printing a "Hello World" message on a terminal and blinks an LED using PSoC 4 devices.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-hello-world/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,mtb-flow,gpio,interrupt,isr,led,deep sleep">
    <name>GPIO Interrupt</name>
    <id>mtb-example-psoc4-gpio-interrupt</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-gpio-interrupt</uri>
    <description><![CDATA[This code example demonstrates the use of a GPIO configured as an input pin to generate interrupts on PSoC 4. The GPIO signal interrupts the CPU and executes a user-defined Interrupt Service Routine (ISR). The GPIO interrupt acts as a wakeup source to wake the CPU from Deep Sleep.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-gpio-interrupt/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,capsense,csx,button,tuning,ezi2c,mtb-flow">
    <name>CapSense CSX Button Tuning</name>
    <id>mtb-example-psoc4-capsense-csx-button-tuning</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-capsense-csx-button-tuning</uri>
    <description><![CDATA[This code example demonstrates how to manually tune a mutual capacitance (CSX)-based button widget in PSoC 4 devices using CapSense Tuner GUI.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-capsense-csx-button-tuning/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 capsense_button</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,i2c,i2c-master,ezi2c-slave,mtb-flow">
    <name>I2C Master EzI2C Slave</name>
    <id>mtb-example-psoc4-i2c-master-slave</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-i2c-master-slave</uri>
    <description><![CDATA[This example demonstrates the operation of I2C resource for PSoC 4 in Master mode with an EzI2C slave.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-i2c-master-slave/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,spi,master">
    <name>SPI Master</name>
    <id>mtb-example-psoc4-spi-master</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-spi-master</uri>
    <description><![CDATA[This example demonstrates the use of a SPI resource for PSoC 4 in master mode using high level APIs. The SPI master is configured to send command packets to control a user LED on the slave.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-spi-master/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,spi,slave">
    <name>SPI Slave</name>
    <id>mtb-example-psoc4-spi-slave</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-spi-slave</uri>
    <description><![CDATA[This example demonstrates the use of a SPI Serial Communication Block (SCB) resource for PSoC 4 in slave mode using high-level API. This example is intended to be used with PSoC 4 SPI Master project
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-spi-slave/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,uart,dma">
    <name>SCB UART Transmit and Receive with DMA</name>
    <id>mtb-example-psoc4-uart-transmit-receive-dma</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-uart-transmit-receive-dma</uri>
    <description><![CDATA[This code example demonstrates the UART transmit and receive operation in PSoC 4 using DMA. The application uses a serial terminal to read data and echoes what is received.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-uart-transmit-receive-dma/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 dma</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,led,pwm,tcpwm,dma,breathing">
    <name>PWM Triggering a DMA Channel</name>
    <id>mtb-example-psoc4-pwm-trigger-dma</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-pwm-trigger-dma</uri>
    <description><![CDATA[This example demonstrates how to route trigger signals on a PSoC 4 device.The trigger signal, in this code example, is routed from the PWM to the DMA, using Device Configurator.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-pwm-trigger-dma/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led dma</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,uart,transmit,receive">
    <name>UART Transmit and Receive</name>
    <id>mtb-example-psoc4-uart-trasmit-receive</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-uart-transmit-receive</uri>
    <description><![CDATA[This example demonstrates the UART transmit and receive operation in PSoC 4 device. The application uses a serial terminal to read data and to echo back the received data.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-uart-trasmit-receive/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,i2s,audio,mtb-flow,smartio,spi">
    <name>I2S Master using Smart IO and SPI</name>
    <id>mtb-example-psoc6-smartio-i2s</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-smartio-i2s</uri>
    <description><![CDATA[This example uses a SPI resource and Smart I/O in PSoC 6 MCU to implement the I2S Master interface (TX only).
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-smartio-i2s/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 smart_io</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,pdm,pcm,i2s,mtb-flow,audio,microphone,codec">
    <name>PDM to I2S Audio</name>
    <id>mtb-example-psoc6-pdm-to-i2s</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-pdm-to-i2s</uri>
    <description><![CDATA[This example demonstrates how to route Pulse-Density Modulation (PDM) audio data to the Inter-IC Sound (I2S) Interface in PSoC 6 MCU.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-pdm-to-i2s/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 pdm i2s</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,usb,mtb-flow,audio,microphone,recorder">
    <name>USB Audio Recorder</name>
    <id>mtb-example-psoc6-usb-audio-recorder</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-usb-audio-recorder</uri>
    <description><![CDATA[This example demonstrates the use of PSoC 6 MCU to implement an audio recorder using the USB Audio Device Class.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-usb-audio-recorder/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 usb_device pdm</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,usb,mtb-flow,hid,mouse">
    <name>USB HID Mouse</name>
    <id>mtb-example-psoc6-usb-hid-mouse</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-usb-hid-mouse</uri>
    <description><![CDATA[This example demonstrates how to configure the USB block in a PSoC 6 MCU as a HID. The device enumerates as a 3-button mouse.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-usb-hid-mouse/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 usb_device pdm</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,usb,mtb-flow,hid,generic">
    <name>USB HID Generic</name>
    <id>mtb-example-psoc6-usb-hid-generic</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-usb-hid-generic</uri>
    <description><![CDATA[This example demonstrates how to configure the USB block in a PSoC 6 MCU as a Human Interface Device (HID). The device enumerates as a Generic HID device.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-usb-hid-generic/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 usb_device pdm</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,wdt,interrupt,reset,deepsleep,mtb-flow">
    <name>Watchdog timer interrupt and reset</name>
    <id>mtb-example-psoc4-wdt</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-wdt</uri>
    <description><![CDATA[This code example features the watchdog timer and its usage in interrupt mode, reset mode and how to wake up the device from deepsleep using watchdog interrupt.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-wdt/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,wdc,interrupt">
    <name>Watchdog Counter Interrupts</name>
    <id>mtb-example-psoc4-wdc</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-wdc</uri>
    <description><![CDATA[This example demonstrates the use of PSoC 4 Watchdog Counters in cascaded mode. The user LED is toggled every time the Counter2 interrupt occurs. The match values of all the counters are set to toggle the LED every 1 second.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-wdc/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 wdc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,gpio,interrupt,switch">
    <name>GPIO Interrupt</name>
    <id>mtb-example-psoc6-gpio-interrupt</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-gpio-interrupt</uri>
    <description><![CDATA[This example demonstrates how to configure a GPIO to generate an interrupt in PSoC 6 MCU.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-gpio-interrupt/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led switch low_power</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,rtc">
    <name>RTC Basics</name>
    <id>mtb-example-psoc6-rtc-basics</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-rtc-basics</uri>
    <description><![CDATA[This example demonstrates the usage of the real-time clock (RTC) in PSoC 6 MCU.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-rtc-basics/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 rtc</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,adc,hal">
    <name>ADC basic</name>
    <id>mtb-example-psoc6-adc-basic</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-adc-basic</uri>
    <description><![CDATA[This example demonstrates use of the ADC (Analog to Digital Converter) HAL driver to perform voltage measurements.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-adc-basic/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,led,power,sleep,mtb-flow">
    <name>Switching Power Modes</name>
    <id>mtb-example-psoc6-switching-power-modes</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-switching-power-modes</uri>
    <description><![CDATA[This example demonstrates how to transition PSoC 6 between the following power modes - Active, Sleep, Low Power Active, Low Power Sleep, and Deep Sleep.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-switching-power-modes/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led low_power</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow, psoc4, low power, uart, led">
    <name>Power Modes</name>
    <id>mtb-example-psoc4-power-modes</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-power-modes</uri>
    <description><![CDATA[This code example shows how to enter system Sleep and Deep Sleep modes. After entering Deep Sleep or Sleep mode, the example also shows how to wake up from these low-power modes and return to normal Active mode.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-power-modes/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,capsense,csd,button,tuning,ezi2c,mtb-flow">
    <name>CapSense CSD Button Tuning</name>
    <id>mtb-example-psoc4-capsense-csd-button-tuning</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-capsense-csd-button-tuning</uri>
    <description><![CDATA[This code example demonstrates how to manually tune a self capacitance (CSD) based button widget in PSoC 4 devices using CapSense Tuner GUI.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-capsense-csd-button-tuning/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led capsense_button</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,msc,capsense,csd,button,tuning,mtb-flow">
    <name>MSC CapSense CSD Button Tuning</name>
    <id>mtb-example-psoc4-msc-capsense-csd-button-tuning</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-msc-capsense-csd-button-tuning</uri>
    <description><![CDATA[This code example demonstrates how to manually tune a self capacitance-based button widget in PSoC 4 devices using the Multi Sense Converter (MSC) CSD-RM sensing technique and CapSense Tuner GUI.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-msc-capsense-csd-button-tuning/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led msc_button</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,msc,capsense,csx,button,tuning,mtb-flow">
    <name>MSC CapSense CSX Button Tuning</name>
    <id>mtb-example-psoc4-msc-capsense-csx-button-tuning</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-msc-capsense-csx-button-tuning</uri>
    <description><![CDATA[This code example demonstrates how to manually tune a mutual capacitance-based button widget in PSoC 4 devices using the Multi Sense Converter (MSC) CSX-RM sensing technique and CapSense Tuner GUI.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-msc-capsense-csx-button-tuning/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led msc_button</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,starter,template,empty,blank,mtb-flow">
    <name>Empty XMC App</name>
    <id>mtb-example-xmc-empty-app</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-empty-app</uri>
    <description><![CDATA[This empty application provides a template for creating applications using XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-xmc-empty-app/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>xmc</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 0.X release</num>
        <commit>latest-v0.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>0.5.0 release</num>
        <commit>release-v0.5.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,gpio,led,isr,toggle,systick,mtb-flow">
    <name>GPIO Toggle</name>
    <id>mtb-example-xmc-gpio-toggle</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-gpio-toggle</uri>
    <description><![CDATA[This code example demonstrates GPIO toggling by periodically blinking an LED using SysTick available in XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-xmc-gpio-toggle/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b>
    This is Early Access Software for XMC devices in ModusToolbox.<br>
    This software is made available for evaluation purposes only and is not recommended for production development.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 0.X release</num>
        <commit>latest-v0.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>0.5.0 release</num>
        <commit>release-v0.5.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,gpio,led,freertos,mtb-flow">
    <name>FreeRTOS Blinky</name>
    <id>mtb-example-xmc-blinky-freertos</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-blinky-freertos</uri>
    <description><![CDATA[This code example demonstrates blinking LED functionality implemented by FreeRTOS tasks running on the XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-xmc-blinky-freertos/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b>
    This is Early Access Software for XMC devices in ModusToolbox.<br>
    This software is made available for evaluation purposes only and is not recommended for production development.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 0.X release</num>
        <commit>latest-v0.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>0.5.0 release</num>
        <commit>release-v0.5.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,ccu,ccu4,pwm,led,mtb-flow">
    <name>CCU4 PWM</name>
    <id>mtb-example-xmc-ccu4-pwm</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-ccu4-pwm</uri>
    <description><![CDATA[This code example demonstrates the use of CCU4 module in XMC MCU to create a PWM signal. The CCU4 slice is configured in monoshot mode and is restarted on an external start event.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-xmc-ccu4-pwm/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b>
    This is Early Access Software for XMC devices in ModusToolbox.<br>
    This software is made available for evaluation purposes only and is not recommended for production development.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 0.X release</num>
        <commit>latest-v0.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>0.5.0 release</num>
        <commit>release-v0.5.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,ccu,ccu4,capture,mtb-flow">
    <name>CCU4 Capture</name>
    <id>mtb-example-xmc-ccu4-capture</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-ccu4-capture</uri>
    <description><![CDATA[This code example demonstrates the capture features of the Capture and Compare Unit 4 (CCU4) slices available in XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-xmc-ccu4-capture/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b>
    This is Early Access Software for XMC devices in ModusToolbox.<br>
    This software is made available for evaluation purposes only and is not recommended for production development.]]></description>
    <req_capabilities>xmc</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 0.X release</num>
        <commit>latest-v0.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>0.5.0 release</num>
        <commit>release-v0.5.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,ccu,ccu4,timer,concatenation,led,mtb-flow">
    <name>CCU4 Timer Concatenation</name>
    <id>mtb-example-xmc-ccu4-timer-concatenation</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-ccu4-timer-concatenation</uri>
    <description><![CDATA[This code example demonstrates the concatenation or linking feature of the Capture and Compare Unit 4 (CCU4) slices available in XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-xmc-ccu4-timer-concatenation/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b>
    This is Early Access Software for XMC devices in ModusToolbox.<br>
    This software is made available for evaluation purposes only and is not recommended for production development.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 0.X release</num>
        <commit>latest-v0.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>0.5.0 release</num>
        <commit>release-v0.5.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,ccu,ccu4,timer,led,mtb-flow">
    <name>CCU4 Timer</name>
    <id>mtb-example-xmc-ccu4-timer</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-ccu4-timer</uri>
    <description><![CDATA[This code example demonstrates the usage of the Capture and Compare Unit 4 (CCU4) timer by blinking an LED using CCU4 timer period match interrupt available in XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-xmc-ccu4-timer/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b>
    This is Early Access Software for XMC devices in ModusToolbox.<br>
    This software is made available for evaluation purposes only and is not recommended for production development.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 0.X release</num>
        <commit>latest-v0.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>0.5.0 release</num>
        <commit>release-v0.5.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,uart,printf,hello world,mtb-flow">
    <name>UART Printf</name>
    <id>mtb-example-xmc-uart-printf</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-uart-printf</uri>
    <description><![CDATA[This example demonstrates how to use the printf function with a Universal Serial Interface Channel (USIC) based UART in XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-xmc-uart-printf/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b>
    This is Early Access Software for XMC devices in ModusToolbox.<br>
    This software is made available for evaluation purposes only and is not recommended for production development.]]></description>
    <req_capabilities>xmc</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 0.X release</num>
        <commit>latest-v0.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>0.5.0 release</num>
        <commit>release-v0.5.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,uart,printf,shell,console,led,mtb-flow">
    <name>UART Shell</name>
    <id>mtb-example-xmc-uart-shell</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-uart-shell</uri>
    <description><![CDATA[This code example demonstrates implementation of a shell on the UART communication interface including commands to toggle a LED using XMC MCU.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-xmc-uart-shell/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b>
    This is Early Access Software for XMC devices in ModusToolbox.<br>
    This software is made available for evaluation purposes only and is not recommended for production development.]]></description>
    <req_capabilities>xmc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 0.X release</num>
        <commit>latest-v0.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>0.5.0 release</num>
        <commit>release-v0.5.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="xmc,uart,dma,mtb-flow">
    <name>UART DMA</name>
    <id>mtb-example-xmc-uart-dma</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-xmc-uart-dma</uri>
    <description><![CDATA[This example demonstrates how to stream data using DMA via UART based on Universal Serial Interface Channel (USIC) to an external terminal.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-xmc-uart-dma/blob/master/README.md">README on GitHub</a>.
    <br><br><b>Note:</b>
    This is Early Access Software for XMC devices in ModusToolbox.<br>
    This software is made available for evaluation purposes only and is not recommended for production development.]]></description>
    <req_capabilities>xmc xmc4000</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>Latest 0.X release</num>
        <commit>latest-v0.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.1" req_capabilities_per_version="bsp_gen2">
        <num>0.5.0 release</num>
        <commit>release-v0.5.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,anycloud,udp,client,wifi,led">
    <name>AnyCloud UDP Client</name>
    <id>mtb-example-anycloud-udp-client</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-udp-client</uri>
    <description><![CDATA[This code example demonstrates implementation of UDP Client using AnyCloud SDK. The UDP Client establishes a connection with a remote UDP server and based on the command received from the UDP server, turns the user LED ON or OFF using PSoC 6 MCU.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-anycloud-udp-client/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license. <br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 cyw43xxx wifi led anycloud</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,anycloud,udp,server,wifi,switch">
    <name>AnyCloud UDP Server</name>
    <id>mtb-example-anycloud-udp-server</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-udp-server</uri>
    <description><![CDATA[This code example demonstrates implementation of UDP Server using AnyCloud SDK. The UDP Server allows the user to send LED ON/OFF command to the UDP client using PSoC 6 MCU.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-anycloud-udp-server/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license. <br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 cyw43xxx wifi switch anycloud</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,wifi,anycloud,ota,http,https">
    <name>AnyCloud OTA Using HTTPS</name>
    <id>mtb-example-anycloud-ota-https</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-ota-https</uri>
    <description><![CDATA[This code example demonstrates OTA update with PSoC 6 MCU and CYW43xxx connectivity devices. The device establishes a connection with the designated HTTPS server. It periodically checks the job document to see if a new update is available. When a new update is available, it will be downloaded and written to the secondary slot. On the next reboot, MCUBoot will copy the new image over to the primary slot and run the application.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-anycloud-ota-https/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license. <br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 cyw43xxx wifi led anycloud</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,uart,capsense,slider,ganged sensor,i2c,tuner,rtos,mtb-flow">
    <name>Low-power CapSense FreeRTOS</name>
    <id>mtb-example-psoc6-low-power-capsense-freertos</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-low-power-capsense-freertos</uri>
    <description><![CDATA[This code example demonstrates how to create a low-power CapSense design using PSoC 6 MCU. This example features a 5-segment CapSense slider and a Ganged Sensor, and displays the detected touch position over the serial terminal.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-low-power-capsense-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 capsense_linear_slider low_power</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,wifi,anycloud,ota,mqtt">
    <name>AnyCloud OTA Using MQTT</name>
    <id>mtb-example-anycloud-ota-mqtt</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-ota-mqtt</uri>
    <description><![CDATA[This code example demonstrates OTA update with PSoC 6 MCU and CYW43xxx connectivity devices. The device establishes a connection with the designated MQTT broker. It periodically checks the job document to see if a new update is available. When a new update is available, it will be downloaded and written to the secondary slot. On the next reboot, MCUBoot will copy the new image over to the primary slot and run the application.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-anycloud-ota-mqtt/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license. <br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 cyw43xxx wifi led anycloud</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.1.0 release</num>
        <commit>release-v2.1.0</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,button,led,ble,findme,FMP,GAP peripheral,mtb-flow">
    <name>BLE Find Me</name>
    <id>mtb-example-psoc6-ble-findme</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-ble-findme</uri>
    <description><![CDATA[This code example demonstrates the implementation of a simple BLE Immediate Alert Service (IAS)-based Find Me Profile (FMP) using PSoC 6 MCU with Bluetooth Low Energy (BLE) Connectivity.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-ble-findme/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 led switch ble</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,anycloud,http,https,server,wifi">
    <name>AnyCloud HTTPS Server</name>
    <id>mtb-example-anycloud-https-server</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-https-server</uri>
    <description><![CDATA[This code example demonstrates the implementation of an HTTPS server with PSoC 6 MCU and CYW43xxx connectivity devices. It employs the HTTPS server middleware library, which takes care of all the underlying socket connections with the HTTPS client. This example establishes a secure connection with a HTTPS client through SSL handshake. Once the SSL handshake completes successfully, the HTTPS client can make GET, POST, and PUT requests with the server.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-anycloud-https-server/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license.<br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 cyw43xxx led wifi anycloud</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,anycloud,tcp,client,wifi">
    <name>AnyCloud TCP Client</name>
    <id>mtb-example-anycloud-tcp-client</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-tcp-client</uri>
    <description><![CDATA[This code example demonstrates implementation of TCP client with PSoC 6 MCU and CYW43xxx connectivity devices.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-anycloud-tcp-client/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license. <br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx led switch anycloud</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,anycloud,tcp,server,wifi">
    <name>AnyCloud TCP Server</name>
    <id>mtb-example-anycloud-tcp-server</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-tcp-server</uri>
    <description><![CDATA[This code example demonstrates implementation of a TCP server with PSoC 6 MCU and CYW43xxx connectivity devices.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-anycloud-tcp-server/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack and the Mbed TLS open-source TLS/SSL library which has cryptographic capabilities. Creating a project from this template will cause lwIP and Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the lwIP &amp; Mbed TLS licenses and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx led switch anycloud</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,anycloud,mqtt,client,wifi,aws,mosquitto">
    <name>AnyCloud MQTT Client</name>
    <id>mtb-example-anycloud-mqtt-client</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-mqtt-client</uri>
    <description><![CDATA[This code example demonstrates implementing an MQTT client using the MQTT client library for the family of Cypress connectivity devices. This library uses the AWS IoT Device SDK that includes an MQTT 3.1.1 client.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-anycloud-mqtt-client/blob/master/README.md">README on GitHub</a>.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license.<br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx led switch anycloud</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,usb,audio,freertos,mtb-flow">
    <name>USB Audio Device FreeRTOS</name>
    <id>mtb-example-psoc6-usb-audio-device-freertos</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-usb-audio-device-freertos</uri>
    <description><![CDATA[This example demonstrates how to use PSoC 6 MCU to implement a USB Audio Device and HID Audio Playback Control that connects to the PC via the USB interface. The example also uses FreeRTOS.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-usb-audio-device-freertos/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 usb_device capsense_button capsense_linear_slider i2s</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,cryptography,trng,mtb-flow">
    <name>Cryptography TRNG Demonstration</name>
    <id>mtb-example-psoc6-crypto-trng</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-crypto-trng</uri>
    <description><![CDATA[This code example demonstrates generating a One-Time Password (OTP) using the True Random Number generation feature of PSoC 6 MCU cryptography block.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-crypto-trng/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 std_crypto</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc6,cryptography,aes,mtb-flow">
    <name>Cryptography AES Demonstration</name>
    <id>mtb-example-psoc6-crypto-aes</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc6-crypto-aes</uri>
    <description><![CDATA[This code example encrypts and decrypts user input data using the AES algorithm using a 128-bit key. The encrypted and decrypted data are displayed on a UART terminal emulator.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc6-crypto-aes/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc6 std_crypto</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc6,anycloud,mqtt,client,wifi,aws,mosquitto">
    <name>AnyCloud MQTT Client</name>
    <id>mtb-example-anycloud-mqtt-client</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-anycloud-mqtt-client</uri>
    <description><![CDATA[
    This code example demonstrates implementing an MQTT client using the MQTT client library for the family of Cypress connectivity devices. This library uses the AWS IoT Device SDK that includes an MQTT 3.1.1 client.
    <br><br><b>License Disclaimer:</b><br><br>
    This code example makes use of the lwIP open-source TCP/IP stack. Creating a project from this template will cause lwIP to be downloaded on your computer. It is your responsibility to understand and accept the lwIP license.<br><br>Creating a project from this template will cause Mbed TLS to be downloaded on your computer. It is your responsibility to understand and accept the Mbed TLS license and regional use restrictions (including abiding by all applicable export control laws).
    ]]></description>
    <req_capabilities>psoc6 wifi cyw43xxx led switch anycloud</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
</apps>
